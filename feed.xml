<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>⑨rz</title>
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://vjudge1.github.io/"/>
  <updated>2017-05-12T19:41:17.064Z</updated>
  <id>https://vjudge1.github.io/</id>
  
  <author>
    <name>vjudge1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>换成 Hexo</title>
    <link href="https://vjudge1.github.io/2017/05/13/change-to-hexo/"/>
    <id>https://vjudge1.github.io/2017/05/13/change-to-hexo/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-05-12T19:41:17.064Z</updated>
    
    <content type="html"><![CDATA[<p>看到某大佬把博客换成 Hexo 之后我也有换软件的冲动了。我还不太熟悉 Hexo，所以先只迁移文章，主题什么的以后再慢慢改吧。</p>
<p>之前用的是 Jekyll 系统，因为 GitHub 能够自动生成博客内容。后来呢，稍微熟悉了点，我就自己设计主题了；再后来呢，设计主题不够了，我又写了点 Ruby 插件，然后改用 Grunt 部署，一切看起来还好。</p>
<p>直到有一天我换系统，问题才真正出现：为了写一个博客，要装 Ruby 和 npm，还要搞一堆沉重的组件，“这不清真”啊。Hexo 与之相比就好多了，只是一堆 js，而且 js 写起来还熟悉。需要什么东西就去堆 js 好了。</p>
<p>因为“又不是不能用”，而且一直很懒，所以不知道博客什么时候能搞好……我觉得还是我自己设计的旧主题好看，但是大概要等N年才能迁移过来吧……orz</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到某大佬把博客换成 Hexo 之后我也有换软件的冲动了。我还不太熟悉 Hexo，所以先只迁移文章，主题什么的以后再慢慢改吧。&lt;/p&gt;
&lt;p&gt;之前用的是 Jekyll 系统，因为 GitHub 能够自动生成博客内容。后来呢，稍微熟悉了点，我就自己设计主题了；再后来呢，设计主
    
    </summary>
    
      <category term="其他" scheme="https://vjudge1.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Hexo" scheme="https://vjudge1.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>换成Arch Linux系统的一些记录</title>
    <link href="https://vjudge1.github.io/2016/11/08/move-to-archlinux/"/>
    <id>https://vjudge1.github.io/2016/11/08/move-to-archlinux/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2017-05-15T18:51:00.270Z</updated>
    
    <content type="html"><![CDATA[<p>又写很水的内容了——突然想把系统换成Arch Linux（64位，GNOME 3桌面），所以记录一下一些配置的要点。当然，具体的安装过程就不写了，网上教程很多，搜一下就能找到。</p>
<a id="more"></a>
<h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>稍有常识的人都能看出，如果我们的电脑不挂代理，那些特别的软件难道还能设置得了嘛？</p>
<p>我推荐使用<a href="https://github.com/renzhn/MEOW" target="_blank" rel="external">MEOW</a>，它可以把各种常见的代理转化为HTTP代理，而且是白名单制（只有白名单的网站不走代理），非常方便。</p>
<p>想自动启动的话，建立一个文件<code>~/.config/autostart/meow.desktop</code>，在其中输入</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="section">[Desktop Entry]</span></div><div class="line"><span class="attr">Type</span>=Application</div><div class="line"><span class="attr">Name</span>=meow</div><div class="line"><span class="attr">Exec</span>=/home/xxx/MEOW</div></pre></td></tr></table></figure>
<p>当然也可以做成systemd服务（user）。</p>
<p>为了在命令行中享受到代理，可以在自己的shell的配置文件中加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">export</span> HTTP_PROXY=http://127.0.0.1:7777</div><div class="line"><span class="built_in">export</span> HTTPS_PROXY=http://127.0.0.1:7777</div></pre></td></tr></table></figure>
<p>当然，跑pacman和滚Arch的时候没必要走代理，所以可以把镜像站的网址放到白名单里。</p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>npm不用代理，直接换<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝镜像</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm config set registry https://registry.npm.taobao.org</div><div class="line">npm config set disturl https://npm.taobao.org/dist</div><div class="line"></div><div class="line">npm config set chromedriver_cdnurl http://cdn.npm.taobao.org/dist/chromedriver</div><div class="line">npm config set operadriver_cdnurl http://cdn.npm.taobao.org/dist/operadriver</div><div class="line">npm config set phantomjs_cdnurl http://cdn.npm.taobao.org/dist/phantomjs</div><div class="line">npm config set fse_binary_host_mirror https://npm.taobao.org/mirrors/fsevents</div><div class="line">npm config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass</div><div class="line">npm config set electron_mirror http://cdn.npm.taobao.org/dist/electron/</div></pre></td></tr></table></figure>
<h3 id="gem"><a href="#gem" class="headerlink" title="gem"></a>gem</h3><p>换用<a href="https://gems.ruby-china.org" target="_blank" rel="external">Ruby China的镜像</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</div><div class="line">bundle config mirror.https://rubygems.org https://gems.ruby-china.org</div></pre></td></tr></table></figure>
<h2 id="AUR"><a href="#AUR" class="headerlink" title="AUR"></a>AUR</h2><p>为了能够多装些东西，我安装了yaourt。具体操作网上有，可以用archlinuxcn源。</p>
<p>配置好之后就可以yaourt地安装软件了。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>在决定手动安装字体之前，可以先到<a href="https://wiki.archlinux.org/index.php/Fonts" target="_blank" rel="external">ArchWiki的“字体”页面</a>上转转——很多字体可以通过pacman和yaourt来搞定。</p>
<p>我推荐三个编程字体：一个是Monaco（Mac系统的字体），一个是Source Code Pro，还有一个是Windows系统的Consolas。</p>
<p>对于中文字体，不想用文泉驿的话，我再推荐一个Google制作的Noto Sans CJK字体。不过最后我还是用微软雅黑了。</p>
<h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>为了配合Sublime Text等软件，我把输入法平台换成了fcitx。另外我一直使用中州韵输入法（放弃了搜狗），所以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo pacman -S fcitx fcitx-im fcitx-rime</div></pre></td></tr></table></figure>
<p>在<code>~/.xprofile</code>（文件名全小写，如果没有该文件那么就新建一个）中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</div><div class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</div><div class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></div></pre></td></tr></table></figure>
<p>接下来需要禁用iBus。在终端中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gsettings set org.gnome.settings-daemon.plugins.keyboard active false</div></pre></td></tr></table></figure>
<p>然后到“系统设置”-&gt;“地区和语言”把所有输入法删掉，这样iBus就不会干扰fcitx了。</p>
<p>fcitx的界面和GNOME的界面看起来不协调，可以通过<code>sudo pacman -S gnome-tweak-tool</code>安装“GNOME优化工具”，再借助它安装一个名为“Input method panel”的扩展程序来调整。</p>
<p>中州韵输入法的配置都在<code>~/.config/fcitx/rime</code>中，自己改改就能用了。为了不跟中州韵冲突，fcitx本身的切换输入法键（Shift）和全半角切换键得关掉。</p>
<h2 id="清理孤立软件包"><a href="#清理孤立软件包" class="headerlink" title="清理孤立软件包"></a>清理孤立软件包</h2><p>滚时间长了，体验然后卸载的软件多了，肯定会产生一些无用的软件包。输入以下命令清理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo pacman -Rns $(pacman -Qtdq)</div></pre></td></tr></table></figure>
<p>另外可以通过<code>sudo pacman -Scc</code>来清理缓存。</p>
<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>我用的 GTK 主题叫 Arc-Flatabulous，图标主题是 Numix 和 Papirus，Shell 主题是 Dark Mode，这些主题用 yaourt 搜一下就有了。</p>
<p>一些扩展：Alternatetab、Applications Menu、Dash to dock、Input method panel、Media player indicator、Screenshot locations、Services systemd、Topicons plus、User themes</p>
<h2 id="终端模拟器"><a href="#终端模拟器" class="headerlink" title="终端模拟器"></a>终端模拟器</h2><p>我现在用的是 Tilix，可以通过 yaourt 安装。另外发现一个叫做 <a href="http://hyper.is/" target="_blank" rel="external">Hyper</a> 的终端模拟器，它可以像 Atom 编辑器那样 Hack，不过我还没开始研究（已知中文会出问题）。</p>
<h1 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h1><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><a href="https://github.com/vjudge1/misc/blob/master/config/vimrc" target="_blank" rel="external">我的Vim配置文件</a>是过去写好的，所以直接搬来用了。</p>
<p>大致的情况就是使用Vundle作为插件管理器，然后塞了一大堆插件。其中最难配置的就是<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe</a>，不过在Linux中的配置可比在Windows和Mac系统中轻松多了。</p>
<p>终端版无法正确处理剪贴板，因此也可以<code>yaourt -S vim-clipboard</code>。</p>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><p>不要<code>yaourt -S sublime-text-dev</code>，那个版本没法敲汉字。我们应当<code>yaourt -S sublime-text-dev-imfix</code>。</p>
<p>如果PATH变量是在<code>.zshrc</code>中设置的，那么Sublime Text可能会注意不到（废话）。对于某些插件来说，你需要修复一下这个问题，或者手动给它们指定PATH。这个症状在Mac中也会出现。</p>
<p>提示“软件包冲突”的话，那么你可以改一下PKGBUILD，去掉zh_CN和zh_TW中的一个——去掉zh_TW的话就是大陆版的“九二共识”，去掉zh_CN的话就是大陆版的“台独”。</p>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><p>Sublime Text的输入法问题实在令人头疼，即使把iBus换成fcitx有时候还是不好使。另外Atom本身也是个很棒的编辑器，所以自然要跟Sublime Text换着用。</p>
<p>因为Atom很火，直接通过pacman安装就行了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo pacman -S atom apm</div></pre></td></tr></table></figure>
<p>在调用apm的时候，你需要挂代理，否则apm就直接废了。具体做法就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apm config proxy http://127.0.0.1:7777</div><div class="line">apm config https-proxy http://127.0.0.1:7777</div><div class="line">apm config set strict-ssl false</div></pre></td></tr></table></figure>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Arch默认的Python是3.x，而且没有提供一种切换Python版本的工具。为了使2.x成为默认Python，按照官方给出的方法，我是这样做的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mkdir ~/.bin</div><div class="line">ln -s /usr/bin/python2 ~/.bin/python</div><div class="line">ln -s /usr/bin/pip2 ~/.bin/pip</div><div class="line">ln -s /usr/bin/python2-config ~/.bin/python-config</div></pre></td></tr></table></figure>
<p>最后在PATH中保证<code>/home/xxx/.bin</code>排在<code>/usr/bin</code>前面即可。</p>
<h2 id="关于本博客（Jekyll-版）"><a href="#关于本博客（Jekyll-版）" class="headerlink" title="关于本博客（Jekyll 版）"></a>关于本博客（Jekyll 版）</h2><p>敲<code>grunt serve</code>的时候突然冒出满屏幕的“Warning: watch … ENOSPC”警告，根本无法预览，所以搜到了<a href="http://stackoverflow.com/questions/16748737/grunt-watch-error-waiting-fatal-error-watch-enospc" target="_blank" rel="external">StackOverflow的解决方案</a>。他们的系统敲的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</div></pre></td></tr></table></figure>
<p>那是Ubuntu系统。我们Arch系统要敲</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.d/99-sysctl.conf &amp;&amp; sudo sysctl --system</div></pre></td></tr></table></figure>
<p>后来换成 Hexo 就没有这个问题了。</p>
<h1 id="日常软件"><a href="#日常软件" class="headerlink" title="日常软件"></a>日常软件</h1><h2 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h2><p>就一行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yaourt -S google-chrome</div></pre></td></tr></table></figure>
<h2 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h2><p>我去年写过一个<a href="/2015/08/21/wineqq/">在Linux上面跑QQ的文章</a>，现在那个WineQQ还在，而且仍然好使，照做即可。</p>
<p>当然，有 AUR 那篇文章就“白写”了。</p>
<h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><p>对我来说 LibreOffice 足够用了。我还有个 Windows 平板所以不担心兼容性的问题。</p>
<h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><h2 id="东方Project"><a href="#东方Project" class="headerlink" title="东方Project"></a>东方Project</h2><p>在Arch里玩东方Project只需这样做：开启multilib支持（64位系统才需要），在<code>/etc/pacman.conf</code>里加一句</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><div class="line"><span class="section">[multilib]</span></div><div class="line"><span class="attr">Include</span> = /etc/pacman.d/mirrorlist</div></pre></td></tr></table></figure>
<p>然后装wine和解码器（32位系统直接去掉命令中的“lib32”）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo pacman -S wine</div><div class="line">sudo pacman -S lib32-alsa-lib lib32-pulse-lib lib32-libpulse lib32-alsa-plugins lib32-mpg123 lib32-sdl lib32-openal lib32-gst-plugins-base lib32-gstreamer gst-libav lib32-gst-plugins-good</div></pre></td></tr></table></figure>
<p>然后就OK了。</p>
<p>注意：</p>
<ol>
<li>如果游戏乱码，请设置LC_ALL变量，例如：<code>LC_ALL=zh_CN.UTF-8 wine th06.exe</code>。Mac系统也是这样处理的。不要听网上说改LANG，没用的。</li>
<li>想全屏游戏的话，桌面不要用Wayland，而是应当换回Xorg，否则不仅进不去而且还会崩终端或桌面。</li>
<li>不知道什么原因，新版wine跑辉针城或以上游戏的时候游戏速度会非常快……</li>
</ol>
<h2 id="Steam"><a href="#Steam" class="headerlink" title="Steam"></a>Steam</h2><p>只需要：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yaourt -S steam steam-native-runtime</div></pre></td></tr></table></figure>
<p>不过Steam没法通过optirun来启动。所以我暂时想到的方法是：把Steam放在那里挂着，然后自己手动通过optirun来运行游戏：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">optirun ~/.steam/steam/steamapps/common/Portal\ 2/portal2.sh -game portal2 -steam</div></pre></td></tr></table></figure>
<p>不幸的是，对于《半条命2》、《传送门》等起源引擎游戏，中文可能连豆腐块都看不到——直接是“无字天书”。这是因为游戏引擎把字体名称写死了，测量中文字符时直接宽度为零，所以我们要做个字体替换，把写死的“Nimbus Sans”字体换成文泉驿：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"pattern"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>Nimbus Sans<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"assign"</span> <span class="attr">binding</span>=<span class="string">"same"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Zen Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></div></pre></td></tr></table></figure>
<p>保存到<code>~/.config/fontconfig/fonts.conf</code>，这样就能显示汉字了。</p>
<h2 id="MIDI"><a href="#MIDI" class="headerlink" title="MIDI"></a>MIDI</h2><p>如果需要 MIDI，可以这样配置：</p>
<ol>
<li>安装 FluidSynth</li>
<li>安装一个 SoundFont，例如 Windows 系统的 SoundFont 文件叫做 2gmgsmt.sf2。</li>
<li>按<a href="https://wiki.archlinux.org/index.php/FluidSynth" target="_blank" rel="external">Archlinux Wiki上面的内容</a>修改<code>/etc/conf.d/fluidsynth</code>，把 SoundFont 文件设置好，并将 FluidSynth 配置成 systemd 服务，启动。</li>
<li>如果 Wine 程序需要 MIDI，那么还要改一下注册表：<code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\MIDIMap</code>（没有就新建一个），新建一个字符串值，名称为<code>CurrentInstrument</code>，并设为“#1”。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又写很水的内容了——突然想把系统换成Arch Linux（64位，GNOME 3桌面），所以记录一下一些配置的要点。当然，具体的安装过程就不写了，网上教程很多，搜一下就能找到。&lt;/p&gt;
    
    </summary>
    
      <category term="备忘录" scheme="https://vjudge1.github.io/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="Linux" scheme="https://vjudge1.github.io/tags/Linux/"/>
    
      <category term="系统维护" scheme="https://vjudge1.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
      <category term="wine" scheme="https://vjudge1.github.io/tags/wine/"/>
    
      <category term="東方Project" scheme="https://vjudge1.github.io/tags/%E6%9D%B1%E6%96%B9Project/"/>
    
      <category term="npm" scheme="https://vjudge1.github.io/tags/npm/"/>
    
      <category term="配置" scheme="https://vjudge1.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>MacPorts的安装与使用</title>
    <link href="https://vjudge1.github.io/2016/10/08/macports/"/>
    <id>https://vjudge1.github.io/2016/10/08/macports/</id>
    <published>2016-10-07T16:00:00.000Z</published>
    <updated>2017-05-15T18:38:31.822Z</updated>
    
    <content type="html"><![CDATA[<p>Mac下常用的软件包管理器有MacPorts和Homebrew等。我用的是MacPorts。用上它们之后，就有一种在用Linux的感觉……</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先需要到App Store安装Xcode。安装完成后，还要安装Command Line Tools。第一次进入Xcode之后应该有提示。如果没有，也可以<code>xcode-select --install</code>。安装完成后可以试一下<code>gcc</code>能不能执行。</p>
<p>MacPorts的安装很简单，到<a href="https://www.macports.org/install.php" target="_blank" rel="external">官方网站</a>上面下载并安装即可。</p>
<p>安装完成后，默认情况下，通过MacPorts安装的软件会被塞到<code>/opt/local</code>之中。</p>
<p>如果想把镜像站设置为USTC的，那么需要做以下两步：</p>
<p>编辑<code>/opt/local/etc/macports/sources.conf</code>，将其中的地址换成</p>
<pre><code>rsync://mirrors.ustc.edu.cn/macports/ports [default]
</code></pre><p>然后再打开<code>/opt/local/etc/macports/macports.conf</code>，加入</p>
<pre><code>rsync_server    mirrors.ustc.edu.cn
rsync_dir       macports/base/
</code></pre><p>然后执行<code>sudo port -v selfupdate</code>即可更新索引。但是USTC的镜像仅限于索引，软件包还会从墙外网站下载。嫌慢的话代理还是必不可少的。</p>
<h1 id="安装、卸载与清理软件包"><a href="#安装、卸载与清理软件包" class="headerlink" title="安装、卸载与清理软件包"></a>安装、卸载与清理软件包</h1><p>安装软件包之前建议先<code>sudo port -v selfupdate</code>更新索引。</p>
<ol>
<li>安装软件包：<code>sudo port install 软件包</code></li>
<li>搜索软件包：<code>port search 关键词</code></li>
<li>卸载软件包：<code>sudo port unistall 软件包</code></li>
<li>查看可以升级的软件包：<code>port outdated</code></li>
<li>升级某个软件包：<code>sudo port upgrade 软件包</code></li>
<li>升级所有软件包：<code>sudo port upgrade outdated</code></li>
<li>查看某个软件包的详细信息：<code>port info 软件包</code></li>
</ol>
<p>如果在安装过程中按了<kbd>Control+C</kbd>，可以先通过<code>sudo port clean --all 软件包</code>进行清理，然后再重新安装。</p>
<p>在升级之后，旧软件包并不会被删除。可以用<code>sudo port uninstall outdated</code>命令清理。</p>
<p>在删除某一软件包之后，有些软件包可能不再被使用（例如安装某软件包时附带的一堆依赖），可以通过<code>sudo port uninstall leaves</code>全部清理掉。垃圾太多的话，那么可能需要执行多次这个命令才能清理干净。如果不希望某个软件包被清理掉，可以先输入<code>port echo leaves</code>可以查看这些软件包名称，接下来输入<code>sudo port setrequested 软件包</code>，然后再进行清理。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="切换默认版本"><a href="#切换默认版本" class="headerlink" title="切换默认版本"></a>切换默认版本</h2><p>以Python为例，</p>
<ol>
<li>查看已有版本：<code>port select --list python</code></li>
<li>将默认版本设置为3.x：<code>sudo port select --set python python35</code></li>
</ol>
<h2 id="修复PATH环境变量"><a href="#修复PATH环境变量" class="headerlink" title="修复PATH环境变量"></a>修复PATH环境变量</h2><p>MacPorts安装程序会自动在shell的配置文件中把<code>/opt/local/bin:/opt/local/sbin</code>补上。但是，在Mac系统中，不通过命令行执行的程序（例如在Dock上面点的，或者从LaunchPad上面选的），他们并不会找shell的配置文件——这些程序仍然会以为PATH是<code>/usr/bin:/bin:/usr/sbin:/sbin</code>，所以需要在终端中执行（10.10或以上系统）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo launchctl config user path <span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p>重启之后生效。这样的话，即使不在命令行打开程序，PATH同样有效。另外，该命令会对系统内的所有用户起作用。</p>
<h2 id="MacPorts的Python与系统的Python"><a href="#MacPorts的Python与系统的Python" class="headerlink" title="MacPorts的Python与系统的Python"></a>MacPorts的Python与系统的Python</h2><p>系统自带Python，其实这是一件很恶心的事情——没法升级，还会对Ports带的Python造成负面影响：在我电脑上，使用系统Python的话，Vim插件（YouCompleteMe）和Powerline都会崩溃，因此需要把系统Python屏蔽掉。</p>
<p>除了在PATH中把<code>/opt/local/bin</code>放到<code>/usr/bin</code>前面，你还需要——</p>
<h3 id="“简单粗暴”"><a href="#“简单粗暴”" class="headerlink" title="“简单粗暴”"></a>“简单粗暴”</h3><p>有一个简单粗暴的办法，把<code>/usr/bin/python</code>改成到<code>/opt/local/bin/python</code>的软链接，然后把<code>/System/Library/Frameworks/Python.framework/Versions/2.7</code>改为到<code>/opt/local/Library/Frameworks/Python.framework/Versions/2.7</code>的软链接，完整命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/bin</div><div class="line">sudo mv python python_backup</div><div class="line">sudo ln <span class="_">-s</span> /opt/<span class="built_in">local</span>/bin/python python</div><div class="line"><span class="built_in">cd</span> /System/Library/Frameworks/Python.framework/Versions</div><div class="line">sudo mv 2.7 2.7_backup</div><div class="line">sudo ln <span class="_">-s</span> /opt/<span class="built_in">local</span>/Library/Frameworks/Python.framework/Versions/2.7 2.7</div></pre></td></tr></table></figure>
<p>但是，对于白苹果（10.11或更高版本）来说，因为SIP（System Integrity Protection）的存在，这种暴力并不能被直接施加，所以还得先进入Recovery模式（开机时按<kbd>Command+R</kbd>），在终端中输入<code>csrutil disable</code>，关掉SIP功能。</p>
<h3 id="“特事特办”"><a href="#“特事特办”" class="headerlink" title="“特事特办”"></a>“特事特办”</h3><p>如果不想诉诸暴力，那么也可以“特事特办”——</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">install_name_tool -change /System/Library/Frameworks/Python.framework/Versions/2.7/Python /opt/<span class="built_in">local</span>/Library/Frameworks/Python.framework/Versions/2.7/Python /Applications/MacVim.app/Contents/MacOS/Vim</div></pre></td></tr></table></figure>
<h2 id="系统升级"><a href="#系统升级" class="headerlink" title="系统升级"></a>系统升级</h2><p>系统升级（例如10.11→10.12）之后，需要执行以下步骤：</p>
<ol>
<li>重新安装Xcode的Command Line Tools。如果Xcode未发生变化，那么就进入Xcode，这时应该会出现提示。如果没有任何提示，也可以到终端里面敲<code>xcode-select --install</code>来重新安装。</li>
<li>重新到官网上下载MacPorts安装包，重新安装。</li>
<li>通过<code>sudo port selfupdate &amp;&amp; sudo port upgrade outdated</code>重新安装软件包。（不像官网说得那样麻烦）</li>
</ol>
<h2 id="卸载MacPorts"><a href="#卸载MacPorts" class="headerlink" title="卸载MacPorts"></a>卸载MacPorts</h2><p>如果想抛弃MacPorts，投入Homebrew的怀抱，或者从此告别软件包管理器，可以按照以下方法卸载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo port -fp uninstall installed</div><div class="line">sudo rm -rf /opt/<span class="built_in">local</span> /Applications/MacPorts ~/.macports</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac下常用的软件包管理器有MacPorts和Homebrew等。我用的是MacPorts。用上它们之后，就有一种在用Linux的感觉……&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="https://vjudge1.github.io/tags/Mac/"/>
    
      <category term="MacPorts" scheme="https://vjudge1.github.io/tags/MacPorts/"/>
    
  </entry>
  
  <entry>
    <title>维基百科编程笔记</title>
    <link href="https://vjudge1.github.io/2016/10/07/programming-in-wikipedia/"/>
    <id>https://vjudge1.github.io/2016/10/07/programming-in-wikipedia/</id>
    <published>2016-10-06T16:00:00.000Z</published>
    <updated>2017-05-15T18:38:39.849Z</updated>
    
    <content type="html"><![CDATA[<p>最近维基百科严重上瘾，除了写条目和<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E7%A0%B4%E5%9D%8F" target="_blank" rel="external">搞破坏</a>，还写了一点脚本。像我这种<a href="https://wiki.esu.moe/曹国祥" target="_blank" rel="external">电脑高级中手</a>，有了心得之后，在自己博客上随便写点什么算了，不往百科用户页里面写了。维基百科内有很详细的文档，而且高手非常多，不会的话可以问他们。</p>
<a id="more"></a>
<div class="bs-callout bs-callout-info">
                <h4 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h4><p>2016年11月21日：把“机器人”一节补完。</p>

            </div>
<p>维基百科基于MediaWiki系统，这个系统提供了很多API，所以对维基百科编程（例如写点小工具等）其实很容易。当然，不要拿去搞破坏，否则会被一群认真狂魔给封禁。</p>
<p>为了体验编程的乐趣，必须要注册账号。注册满七天和50次编辑即可变为自动确认用户。如果想刷编辑次数的话，记住，做正经编辑，或者至少不要在正经场合捣乱和冲刷“最近编辑”，否则也会被封禁。</p>
<p>下面假设自己的用户名叫做Example。</p>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>首先，自己的JavaScript脚本必须放在<code>User:Example/</code>下面。如果想每次打开一个页面都自动执行的话，请把代码放到<code>User:Example/common.js</code>中——在维基百科不需要<a href="https://zh.wikipedia.org/zh/Greasemonkey" target="_blank" rel="external">油猴</a>插件。</p>
<h2 id="引用其他脚本"><a href="#引用其他脚本" class="headerlink" title="引用其他脚本"></a>引用其他脚本</h2><p>新接触JS的维基用户往往是为了导入一些实用的小工具。可以用以下两种代码来加载代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 加载某个URL的脚本。注意像GitHub的Raw那样强行要求text/plain的网址是无效的。</span></div><div class="line">mw.loader.load(<span class="string">'https://wikiplus-app.smartgslb.com/Main.js'</span>);</div><div class="line"><span class="comment">// 加载某个用户（包括自己）的脚本</span></div><div class="line"><span class="comment">// 虽然有 importScript 函数，但那个是中文维基自己搞的。</span></div><div class="line">mw.loader.load(<span class="string">'https://zh.wikipedia.org/w/index.php?title=User:逆襲的天邪鬼/js/link-ts.js&amp;action=raw&amp;ctype=text/javascript'</span>);</div><div class="line"><span class="comment">// 加载某个 CSS</span></div><div class="line">mw.loader.load(<span class="string">'https://zh.wikipedia.org/w/index.php?title=User:逆襲的天邪鬼/common.css&amp;action=raw&amp;ctype=text/css'</span>, <span class="string">'text/css'</span>);</div></pre></td></tr></table></figure>
<p>mw.loader.load 不会监控脚本加载状态。如果需要监控脚本加载情况，可以用 $.getScript()。</p>
<h2 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h2><p>只要会JavaScript，只要不对别人产生不良影响，怎么写都行。</p>
<p>因为调试脚本是件很麻烦的事情，建议在自己的浏览器上安装油猴（Greasemonkey/Tampermonkey）插件。写得差不多再提交到维基百科中。当然如果想刷编辑次数的话就当我什么都没说。</p>
<p>这样做的话，脚本的加载时机是不同的。正常情况下，用户脚本（common.js）是在皮肤脚本加载完成后加载的，这时网页内容已经差不多加载完了。使用油猴的话会早一些。</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>目前维基百科自带jQuery，版本1.11.3，拿去用就行了。维基百科还提供了jQuery UI等组件，可以通过类似<code>mw.loader.using(&#39;jquery.ui.dialog&#39;);</code>的代码来加载。mw.loader.using 函数返回一个 Promise。</p>
<p>MediaWiki提供了很多API，用于获取信息、更改内容等。所有JavaScript API都在<code>mw</code>之中，而API都通过<code>https://zh.wikipedia.org/w/api.php</code>调用，详细内容可以见<a href="https://doc.wikimedia.org/mediawiki-core/master/js/#!/api/mw-property-config" target="_blank" rel="external">JS参考手册</a>和<a href="https://www.mediawiki.org/wiki/API:Main_page/zh" target="_blank" rel="external">API参考</a>。</p>
<p>另外，维基百科也提供了 RESTful 的 API，详见<a href="https://zh.wikipedia.org/api/rest_v1/" target="_blank" rel="external">文档</a>。</p>
<p>举一些例子：</p>
<h3 id="获取当前页面完整名称"><a href="#获取当前页面完整名称" class="headerlink" title="获取当前页面完整名称"></a>获取当前页面完整名称</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> name = mw.config.get(<span class="string">'wgPageName'</span>);</div></pre></td></tr></table></figure>
<h3 id="在“查看历史”右面添加一个菜单"><a href="#在“查看历史”右面添加一个菜单" class="headerlink" title="在“查看历史”右面添加一个菜单"></a>在“查看历史”右面添加一个菜单</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> node = mw.util.addPortletLink(<span class="string">'p-cactions'</span>, <span class="string">'#'</span>, <span class="string">'Hello'</span>);</div><div class="line">$(node).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    e.preventDefault();</div><div class="line">    alert(<span class="string">'Hello world!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="获取某页面内容（客户端）"><a href="#获取某页面内容（客户端）" class="headerlink" title="获取某页面内容（客户端）"></a>获取某页面内容（客户端）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">pageName</span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: mw.util.wikiScript(<span class="string">'api'</span>),</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">action</span>: <span class="string">'query'</span>,</div><div class="line">            <span class="attr">prop</span>: <span class="string">'revisions'</span>,</div><div class="line">            <span class="attr">rvprop</span>: <span class="string">'content'</span>,</div><div class="line">            <span class="attr">titles</span>: pageName,       <span class="comment">// 多个页面用“|”分隔</span></div><div class="line">            redirects: <span class="literal">true</span>,        <span class="comment">// 解析重定向</span></div><div class="line">            format: <span class="string">'json'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data.query) &#123;</div><div class="line">                <span class="keyword">var</span> pages = data.query.pages;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> pageid <span class="keyword">in</span> pages) &#123;</div><div class="line">                    <span class="keyword">var</span> page = pages[pageid];</div><div class="line">                    <span class="keyword">if</span> (<span class="string">'missing'</span> <span class="keyword">in</span> page) &#123;</div><div class="line">                        alert(<span class="string">'页面'</span> + page.title + <span class="string">'不存在'</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        alert(<span class="string">'页面'</span> + page.title + <span class="string">'的内容是：\n'</span> + page.revisions[<span class="number">0</span>][<span class="string">'*'</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xhr </span>) </span>&#123;</div><div class="line">            alert(<span class="string">'请求失败'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>query功能其实非常多，这里只列出了一个最简单的……</p>
<h3 id="改写某页面内容（客户端）"><a href="#改写某页面内容（客户端）" class="headerlink" title="改写某页面内容（客户端）"></a>改写某页面内容（客户端）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params">pageName, text, summary</span>) </span>&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: mw.util.wikiScript(<span class="string">'api'</span>),</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">format</span>: <span class="string">'json'</span>,</div><div class="line">            <span class="attr">action</span>: <span class="string">'edit'</span>,</div><div class="line">            <span class="attr">title</span>: pageName,</div><div class="line">            <span class="attr">summary</span>: summary,</div><div class="line">            <span class="attr">text</span>: text,</div><div class="line">            <span class="attr">token</span>: mw.user.tokens.get(<span class="string">'editToken'</span>)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data &amp;&amp; data.edit &amp;&amp; data.edit.result === <span class="string">'Success'</span>) &#123;</div><div class="line">                alert(<span class="string">'成功'</span>);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &amp;&amp; data.edit &amp;&amp; data.edit.result === <span class="string">'Failure'</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (data.edit.captcha) &#123;</div><div class="line">                    alert(<span class="string">'需要验证码，id='</span> + data.edit.captcha.id + <span class="string">'，url='</span> + data.edit.captcha.url);</div><div class="line">                    <span class="comment">// 这时需要人工识别验证码，在下次提交时需要加入captchaword（验证码内容）和captchaid（上面的id）两个参数。</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.edit.code === <span class="string">'abusefilter-warning'</span>) &#123;</div><div class="line">                    alert(<span class="string">'被防滥用过滤器警告'</span>);</div><div class="line">                    <span class="comment">// 如果确定自己的编辑没有问题，再提交一次即可。</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.edit.code === <span class="string">'abusefilter-disallowed'</span>) &#123;</div><div class="line">                    alert(<span class="string">'被防滥用过滤器阻止'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.edit.spamblacklist) &#123;</div><div class="line">                    alert(<span class="string">'被垃圾过滤器阻止'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    alert(<span class="string">'未知错误'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data &amp;&amp; data.error) &#123;</div><div class="line">                <span class="keyword">if</span> (data.error.code === <span class="string">'protectedpage'</span>) &#123;</div><div class="line">                    alert(<span class="string">'页面被保护'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.error.code === <span class="string">'blocked'</span>) &#123;</div><div class="line">                    alert(<span class="string">'你已被封禁'</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    alert(<span class="string">'错误'</span> + data.error.code + <span class="string">'：'</span> + data.error.info);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                alert(<span class="string">'未知错误'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xhr </span>) </span>&#123;</div><div class="line">            alert(<span class="string">'请求失败'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于详细参数、错误码等信息，可见<a href="https://www.mediawiki.org/wiki/API:Edit" target="_blank" rel="external">API:Edit</a>。</p>
<p>注意，这段代码不会自动追踪重定向页——如果标题是个重定向页，那么重定向页本身会被改写。</p>
<p>如果这段代码不正确地用在了正经场合（例如条目或计划页），你就等着被管理员收拾吧……</p>
<div style="display: none;"><br>如果页面被保护，那么data.error.code会返回“protectedpage”。<br><br>如果是新用户触发了验证码（所以建议先把自己刷到自动确认用户，免得麻烦），那么会返回：<br><br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"edit"</span>:&#123;<span class="attr">"captcha"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"image"</span>,<span class="attr">"mime"</span>:<span class="string">"image/png"</span>,<span class="attr">"id"</span>:<span class="string">"1027249016"</span>,<span class="attr">"url"</span>:<span class="string">"/w/index.php?title=Special:%E9%AA%8C%E8%AF%81%E7%A0%81/image&amp;wpCaptchaId=1027249016"</span>&#125;,<span class="attr">"result"</span>:<span class="string">"Failure"</span>&#125;&#125;</div></pre></td></tr></table></figure><br><br>这时需要人工识别验证码，在下次提交时加入captchaword（验证码内容）和captchaid（上面的id）两个参数。<br><br>如果因触发防滥用过滤器而被警告，那么编辑会失败，然后data会返回和下面类似的字符串：<br><br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"edit"</span>:&#123;<span class="attr">"code"</span>:<span class="string">"abusefilter-warning"</span>,<span class="attr">"message"</span>:&#123;<span class="attr">"key"</span>:<span class="string">"abusefilter-warning"</span>,<span class="attr">"params"</span>:[<span class="string">"编辑其他用户的用户页"</span>,<span class="number">27</span>]&#125;,<span class="attr">"abusefilter"</span>:&#123;<span class="attr">"id"</span>:<span class="number">27</span>,<span class="attr">"description"</span>:<span class="string">"编辑其他用户的用户页"</span>,<span class="attr">"actions"</span>:[<span class="string">"warn"</span>]&#125;,<span class="attr">"info"</span>:<span class="string">"Hit AbuseFilter: 编辑其他用户的用户页"</span>,<span class="attr">"warning"</span>:<span class="string">"&lt;b&gt;警告：&lt;/b&gt;此操作已被自动识别为有害……"</span>,<span class="attr">"result"</span>:<span class="string">"Failure"</span>&#125;&#125;</div></pre></td></tr></table></figure><br><br>重新提交一次即可。<br><br>如果被防滥用过滤器阻止，那么data会返回：<br><br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"edit"</span>:&#123;<span class="attr">"code"</span>:<span class="string">"abusefilter-disallowed"</span>,<span class="attr">"message"</span>:&#123;<span class="attr">"key"</span>:<span class="string">"abusefilter-disallowed"</span>,<span class="attr">"params"</span>:[<span class="string">"移除所有分类（新用户）"</span>,<span class="number">28</span>]&#125;,<span class="attr">"abusefilter"</span>:&#123;<span class="attr">"id"</span>:<span class="number">28</span>,<span class="attr">"description"</span>:<span class="string">"移除所有分类（新用户）"</span>,<span class="attr">"actions"</span>:[<span class="string">"disallow"</span>]&#125;,<span class="attr">"info"</span>:<span class="string">"Hit AbuseFilter: 移除所有分类（新用户）"</span>,<span class="attr">"warning"</span>:<span class="string">"&lt;table...&gt;...&lt;/table&gt;\n"</span>,<span class="attr">"result"</span>:<span class="string">"Failure"</span>&#125;&#125;</div></pre></td></tr></table></figure><br><br>如果被垃圾过滤器阻止，那么会返回：<br><br><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"edit"</span>:&#123;<span class="attr">"spamblacklist"</span>:<span class="string">"t.cn"</span>,<span class="attr">"result"</span>:<span class="string">"Failure"</span>&#125;&#125;</div></pre></td></tr></table></figure><br><br></div>

<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>维基百科上面的<a href="https://zh.wikipedia.org/wiki/Help:%E6%A8%A1%E6%9D%BF" target="_blank" rel="external">Help:模板</a>和<a href="https://zh.wikipedia.org/wiki/Help:%E8%A7%A3%E6%9E%90%E5%99%A8%E5%87%BD%E6%95%B0" target="_blank" rel="external">Help:解析器函数</a>已经讲得很详细了。如果不想看长篇大论，下面是简化版：</p>
<p>&#123;&#123;&#123;1&#125;&#125;&#125;就是套用模板时的第一个参数，&#123;&#123;&#123;1&#124;默认值&#125;&#125;&#125;会指定一个默认值。假如模板叫Template:a，内容是“&#123;&#123;&#123;1&#125;&#125;&#125;，&#123;&#123;&#123;2&#124;默认值&#125;&#125;&#125;”，那么&#123;&#123;a&#125;&#125;会返回“，默认值”，&#123;&#123;a&#124;123&#124;456&#125;&#125;会返回“123，456”。</p>
<p>解析器函数包括expr、if、ifeq、ifexist、ifexpr、switch、time、language、babel、invoke等。大致用法如下：</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>&#123;&#123; #expr: 1+1 &#125;&#125;</td>
<td>2</td>
</tr>
<tr>
<td>&#123;&#123; #if: 字符串 &#124; 它是空白 &#124; 它不是空白 &#125;&#125;</td>
<td>它不是空白</td>
</tr>
<tr>
<td>&#123;&#123; #ifeq: 字符串 &#124; 字符串2 &#124; 相等 &#124; 不等 &#125;&#125;</td>
<td>不等</td>
</tr>
<tr>
<td>&#123;&#123; #ifexist: Wikipedia:首页 &#124; 存在 &#124; 不存在 &#125;&#125;</td>
<td>存在</td>
</tr>
<tr>
<td>&#123;&#123; #ifexpr: 1+1 &#124; 不等于0 &#124; 等于0 &#125;&#125;</td>
<td>不等于0</td>
</tr>
<tr>
<td>&#123;&#123; #switch: 3 &#124; 1=a &#124; 2=b &#124; 3=c &#124; #default=4 &#125;&#125;</td>
<td>c</td>
</tr>
<tr>
<td>&#123;&#123; #invoke:String &#124; replace &#124; abc &#124; a &#124; b &#125;&#125;</td>
<td>bbc</td>
</tr>
</tbody>
</table>
<p>其中invoke就要涉及lua编程了。</p>
<h1 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h1><p>如果模板非常复杂，那么可以改用lua脚本来生成。</p>
<p>MediaWiki上面有一个非常详细的<a href="https://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual" target="_blank" rel="external">入门教程</a>，即使没学过lua也没关系。</p>
<p>在维基百科，lua脚本页面必须以“Module:”（“模块:”）开头。如果想建立测试页面，则需要以“Module:沙盒/Example/”开头。</p>
<p>在调试模块之前，可以找个沙盒页面把invoke写好，然后在编辑代码时预览那个页面。</p>
<h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><p>脚本需要返回一个table，所有对外公开的函数都需要放到那个table里。函数只有一个参数，frame，它是把&#123;&#123;#invoke:&#125;&#125;后面参数等信息包装好之后的东西。</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line">f = &#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f.fun</span><span class="params">(frame)</span></span></div><div class="line">    ...</div><div class="line">    <span class="comment">-- error('报错')</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'字符串'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> f</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>假如脚本位于<code>Module:沙盒/Example</code>，函数叫fun，维基文本是&#123;&#123;#invoke:沙盒/Example &#124; fun &#124; aaaaa &#124; info=bbbb&#125;&#125;，那么可以用以下方法获取参数：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">local</span> text = frame.args[<span class="number">1</span>]</div><div class="line"><span class="keyword">local</span> info = frame.args.info</div></pre></td></tr></table></figure>
<p>获取某个页面的内容（注意，有些模板会被展开）：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">local</span> content = mw.title.new(<span class="string">'Wikipedia:首页'</span>):getContent()</div></pre></td></tr></table></figure>
<p>使用别的模块：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><div class="line"><span class="keyword">local</span> f = <span class="built_in">require</span>(<span class="string">'Module:沙盒/Example/其他模块'</span>)</div><div class="line">f.fun()</div></pre></td></tr></table></figure>
<h1 id="GNU-LilyPond"><a href="#GNU-LilyPond" class="headerlink" title="GNU LilyPond"></a>GNU LilyPond</h1><p>只是稍微提个醒，如果闲得蛋疼，可以在维基百科里排个简单的钢琴谱，而且可以播放出来！详见<a href="https://zh.wikipedia.org/wiki/Help:%E4%B9%90%E8%B0%B1" target="_blank" rel="external">Help:乐谱</a>。</p>
<p>举个例子，<a href="https://zh.wikipedia.org/w/index.php?oldid=41405796" target="_blank" rel="external">和平大佬随手写的一段</a>。</p>
<p>注意不要侵权。</p>
<h1 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h1><p>详细内容可以见<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E8%A3%BD%E4%BD%9C%E6%A9%9F%E5%99%A8%E4%BA%BA" target="_blank" rel="external">Wikipedia:制作机器人</a>。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>前面JavaScript一节已经给出了机器人的基本原理——那段代码其实已经可以当作人工辅助机器人来用。</p>
<p>维基百科要求自动化程序必须使用自己的User-Agent，没有User-Agent或者伪装成浏览器（然后被发现）会导致500。</p>
<p>机器人在运行之前需要登录，而且访问API的脚本需要保存Cookie，否则无法保持登录状态。虽然可以用账号本身的密码进行登录，不过最安全的方法是通过OAuth。一般情况大家都用<a href="https://zh.wikipedia.org/wiki/Special:BotPasswords" target="_blank" rel="external">机器人密码</a>，因为OAuth还需要额外申请。</p>
<p>以使用<a href="https://github.com/request/request" target="_blank" rel="external">request</a>库的Node.js代码为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>).defaults(&#123;<span class="attr">jar</span>: <span class="literal">true</span>&#125;);</div><div class="line">request.post(&#123;</div><div class="line">    <span class="attr">url</span>: url,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: USERAGENT</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">form</span>: &#123;</div><div class="line">        <span class="attr">action</span>: <span class="string">'query'</span>,</div><div class="line">        <span class="attr">meta</span>: <span class="string">'tokens'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'login'</span>,</div><div class="line">        <span class="attr">format</span>: <span class="string">'json'</span></div><div class="line">    &#125;</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</div><div class="line">        <span class="keyword">var</span> token = <span class="built_in">JSON</span>.parse(body).query.tokens.logintoken;</div><div class="line"></div><div class="line">        request.post(&#123;</div><div class="line">            <span class="attr">url</span>: url,</div><div class="line">            <span class="attr">headers</span>: &#123;</div><div class="line">                <span class="string">'User-Agent'</span>: USERAGENT</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">form</span>: &#123;</div><div class="line">                <span class="attr">action</span>: <span class="string">'login'</span>,</div><div class="line">                <span class="attr">lgname</span>: <span class="string">'用户名'</span>,       <span class="comment">// 如果使用机器人密码，那么用户名中含有“@”号。</span></div><div class="line">                lgpassword: <span class="string">'密码'</span>,</div><div class="line">                <span class="attr">lgtoken</span>: token,</div><div class="line">                <span class="attr">format</span>: <span class="string">'json'</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</div><div class="line">                <span class="keyword">var</span> result = <span class="built_in">JSON</span>.parse(body).login.result;</div><div class="line">                <span class="keyword">if</span> (result === <span class="string">'Success'</span>) &#123;</div><div class="line">                    <span class="comment">// 登录成功</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 登录失败，例如用户不存在、密码错误等，详见</span></div><div class="line">                    <span class="comment">// https://www.mediawiki.org/wiki/API:Login#The_login_action</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 错误</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 错误</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>有些机器人的作者公开了源代码，例如<a href="https://zh.wikipedia.org/wiki/User:Cewbot" target="_blank" rel="external">Cewbot</a>（Node.js）、<a href="https://zh.wikipedia.org/wiki/User:Antigng-bot" target="_blank" rel="external">Antigng-bot</a>（C语言orz）等，可以前去膜拜一下。另外，在Tools Lab上运行的机器人必须使用采用自由软件许可的项目。</p>
<h2 id="Tools-Lab"><a href="#Tools-Lab" class="headerlink" title="Tools Lab"></a>Tools Lab</h2><p>维基媒体基金会提供了一个免费空间，大家可以在上面进行架网站、跑机器人等活动，当然，得和维基媒体基金会的计划有关。只需要到<a href="https://wikitech.wikimedia.org/wiki/Main_Page" target="_blank" rel="external">Wikitech</a>注册一个账户，然后申请Tools权限。之后管理员审核通过后会赋予你shell权限。把自己的SSH公钥加入到Wikitech的系统设置中就可以通过ssh登录。</p>
<p>Tools Lab的规矩比较多（而且大伙儿都在同一个主机上面登录），所以在实际操作之前应该仔细阅读各项说明文件，以免意外翻车。</p>
<p>Lab各软件配置：</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>系统</td>
<td>Ubuntu 14.04.4</td>
</tr>
<tr>
<td>Linux</td>
<td>3.13.0</td>
</tr>
<tr>
<td>Python</td>
<td>2.7.6 / 3.4.3</td>
</tr>
<tr>
<td>Ruby</td>
<td>1.9.3</td>
</tr>
<tr>
<td>PHP</td>
<td>5.5.9</td>
</tr>
<tr>
<td>Node.js</td>
<td>0.10.25</td>
</tr>
<tr>
<td>Perl</td>
<td>5.18.2</td>
</tr>
</tbody>
</table>
<p>用jsub（常驻型程序必须通过jsub运行）跑Node.js时记得给内存分大一点，否则肯定会挂。</p>
<p>不要以为Labs自带的Node.js版本很旧——维基大佬<a href="https://zh.wikipedia.org/wiki/User:Kanashimi" target="_blank" rel="external">Kanashimi</a>在<code>/shared/bin/node</code>放了一个最新版的node。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>维基百科不允许未经批准的机器人进行编辑（但是可以在不会对维基百科造成任何影响的地方例如沙盒进行测试），即使已有机器人权限也要严格按照申请进行，所以进行每一种正式编辑之前都要进行申请。</p>
<p>此外也可以到<a href="https://test2.wikipedia.org" target="_blank" rel="external">test2wiki</a>进行测试。</p>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="电脑高手们"><a href="#电脑高手们" class="headerlink" title="电脑高手们"></a>电脑高手们</h2><p>这个列表可能会持续更新：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/User_talk:Liangent" target="_blank" rel="external">Liangent</a>：才女，Orz。（个人用户页被技术那边的人给整丢了）</li>
<li><a href="https://zh.wikipedia.org/wiki/User:Jimmy_Xu" target="_blank" rel="external">Jimmy Xu</a>：Orz</li>
<li><a href="https://zh.wikipedia.org/wiki/User:Antigng" target="_blank" rel="external">Antigng</a>：Orz</li>
<li><a href="https://zh.moegirl.org/User_talk:妹空酱" target="_blank" rel="external">妹空酱</a>/<a href="https://zh.wikipedia.org/wiki/User:镜音铃" target="_blank" rel="external">镜音铃</a>：Wikiplus作者，Orz</li>
<li><a href="https://zh.wikipedia.org/wiki/User:Kanashimi" target="_blank" rel="external">Kanashimi</a>：Orz</li>
<li>还有一堆潜水的大神们……Orz。</li>
</ul>
<p>详见<a href="https://zh.wikipedia.org/wiki/Special:%E7%94%A8%E6%88%B7%E5%88%97%E8%A1%A8/bot" target="_blank" rel="external">机器人列表</a>。</p>
<h2 id="版权"><a href="#版权" class="headerlink" title="版权"></a>版权</h2><p>目前维基百科采用CC BY-SA 3.0（未来可能会改为4.0）和GFDL两个许可协议，因此不要粘GPL等协议的代码。</p>
<p>举个例子，Wikiplus是个实用的小工具，然而一方面作者本人认为工具还不够好，另一方面程序采用Apache协议授权，所以作者不应该往维基百科里面放，维基百科也不会接受。这种情况下，如果是JavaScript脚本，那么可以把代码放到别的地方，然后再通过mw.loader.load加载过来。</p>
<p>再举个例子，本博客采用CC BY-NC-SA 4.0许可，所以，尽管内容跟维基百科紧密相关，而且还是自己写的，就是不能直接粘过去。</p>
<h2 id="关于自动化修改和破坏"><a href="#关于自动化修改和破坏" class="headerlink" title="关于自动化修改和破坏"></a>关于自动化修改和破坏</h2><p>如果想对很多页面进行修改的话，可以申请自动维基浏览器使用权，也可以申请机器人，或者请求其他人用机器人进行修改。实施自动化或半自动化修改应当先申请或打招呼，保证自己的修改不会引发争议，否则容易招致封禁。</p>
<p>如果纯粹是想通过编程来破坏维基百科的话，建议不要这样做，因为破坏很快就能被恢复，而且自己会被管理员给收拾一顿（封禁）。真想搞破坏的话，应当做好充分的技术准备，制定周密的计划，然后再进行行动——像<a href="https://wiki.esu.moe/张祥如" target="_blank" rel="external">这位</a>或<a href="https://wiki.esu.moe/曹国祥" target="_blank" rel="external">这位</a>那样洗版是不行的。</p>
<p>如果不想引起任何争议的话，可以在自己电脑上架个MediaWiki，这样的话无论如何破坏和滥权都没问题（曹国铁路除外——只要架个网站就会迅速坠毁，回归虚无）。维基百科所使用的插件见<a href="https://zh.wikipedia.org/wiki/Special:%E7%89%88%E6%9C%AC" target="_blank" rel="external">Special:版本</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近维基百科严重上瘾，除了写条目和&lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia:%E7%A0%B4%E5%9D%8F&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;搞破坏&lt;/a&gt;，还写了一点脚本。像我这种&lt;a href=&quot;https://wiki.esu.moe/曹国祥&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;电脑高级中手&lt;/a&gt;，有了心得之后，在自己博客上随便写点什么算了，不往百科用户页里面写了。维基百科内有很详细的文档，而且高手非常多，不会的话可以问他们。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="https://vjudge1.github.io/tags/JavaScript/"/>
    
      <category term="维基百科" scheme="https://vjudge1.github.io/tags/%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/"/>
    
      <category term="API" scheme="https://vjudge1.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Google App Engine入门（Python）</title>
    <link href="https://vjudge1.github.io/2016/10/04/gae/"/>
    <id>https://vjudge1.github.io/2016/10/04/gae/</id>
    <published>2016-10-03T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:07.356Z</updated>
    
    <content type="html"><![CDATA[<p>Google App Engine其实是一个非常不错的应用引擎，免费，不用处理审核备案之类的麻烦事，而且文档丰富，感觉上要比新浪SAE或百度BAE好多了。虽说以前用GAE只是为了<a href="https://zh.wikipedia.org/zh/GoAgent" target="_blank" rel="external">GoAgent</a>，而且GAE被墙了，但是它免费啊，而且自己可以自行翻墙啊，因此仍然可以拿它做一些个人专用的或者给老外用的应用。</p>
<p>GAE的文档很全，不过内容全是英语，对于我这种英语不好的来说简直就是在赎罪。此外GAE也是个巨坑，在探索过程中我也碰了不少灰，所以正好在本文总结一下坑点。</p>
<a id="more"></a>
<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>为了免去很多不必要的麻烦，建议用Linux/Mac系统。我就用Mac了。</p>
<p>首先肯定要注册Google账号了。</p>
<div class="bs-callout bs-callout-danger">
                <h4 id="大坑注意"><a href="#大坑注意" class="headerlink" title="大坑注意"></a>大坑注意</h4><p>在墙内Google账号很有可能无法通过手机验证（换多少个电话都不好使），所以建议找海外的人帮忙注册，或者先搜一下“手机无法用于验证”，总结一下注意事项，然后做好失败的精神准备。</p>

            </div>
<p>然后得做一些最起码的事情，例如给自己系统装上Python（2.7）和Git，然后把代理配置好。我个人建议使用HTTP代理（我使用的是<a href="https://github.com/cyfdecyf/cow" target="_blank" rel="external">COW</a>），并且在终端中把<code>HTTP_PROXY</code>和<code>HTTPS_PROXY</code>设置好，免得麻烦。</p>
<p>接下来需要<a href="https://cloud.google.com/appengine/docs/python/download" target="_blank" rel="external">下载SDK</a>。SDK有两种，一种是旧的SDK（下载按钮下面的那个“Optionally, ……”），图形界面的，还有一种是新的SDK（蓝色的DOWNLOAD按钮），纯命令行的。两者都行，不过我用的是后者。</p>
<p>别被花钱的Google Cloud Platform吓到，其实App Engine和它是一起的。新建项目的时候瞅准点就行——我们用的是App Engine。如果你不小心搞了一个Cloud，花钱了，不要来找我。</p>
<p>点击蓝色的DOWNLOAD按钮，就会跳转到新SDK下载处。下载，把它扔到一个固定的位置（我的意思是，装完之后就是那个目录了，所以别放桌面上），<code>./install.sh</code>。如果放<code>/usr/local</code>一类的地方，别忘了sudo。</p>
{% callout info %}
#### 代理

如果不是通过环境变量设置的代理，那么需要对gcloud配置一下，例如：

    gcloud config set proxy/address 127.0.0.1
    gcloud config set proxy/port 1080
    gcloud config set proxy/type socks5
{% endcallout %}
<p>既然是Python，那么需要再安装一个本地调试用的扩展。输入</p>
<pre><code>gcloud components install app-engine-python
</code></pre><p>其他的话可以用<code>gcloud components list</code>来查看。</p>
<p>安装完成后，需要连接到自己的谷歌账号。输入<code>gcloud init</code>即可登录。</p>
<h1 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h1><p>GAE对Python的支持怎么说呢？大多数框架还是支持的，例如Django和Flask等等都可以直接跑。但是仍然有很多限制，例如：</p>
<ol>
<li>向本地写入文件的行为被禁止。</li>
<li>subprocesses被禁用。</li>
<li>多线程被禁止。</li>
<li>大多数基于C语言的模块被禁止。</li>
<li>系统调用被禁止。</li>
</ol>
<div class="bs-callout bs-callout-info">
                <h4 id="免费版限制"><a href="#免费版限制" class="headerlink" title="免费版限制"></a>免费版限制</h4><p>如果不花钱的话……</p>
<ol>
<li>socket模块无法使用。也就是说，凡是用到import socket的东西都会出错。</li>
<li>每天流量1GB，北京时间下午4点重置。urlfetch每分钟22M，传入传出带宽每分钟56M……所以GoAgent翻墙会有流量限制，而且这并不应当由GoAgent背锅。</li>
<li>详细的资源限制可以到GAE控制面板的“配额”哪里查看。</li>
</ol>

            </div>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>以最简单的基于Flask的Hello World为例。一个GAE项目基本上要有自己的程序、app.yaml、appengine_config.py、requirements.txt。</p>
<h3 id="hello-py"><a href="#hello-py" class="headerlink" title="hello.py"></a>hello.py</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> os</div><div class="line">sys.path.append(os.path.join(os.path.abspath(<span class="string">'.'</span>), <span class="string">'venv/Lib/site-packages'</span>))</div><div class="line"></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'It doesn\'t work!'</span></div></pre></td></tr></table></figure>
<h3 id="app-yaml"><a href="#app-yaml" class="headerlink" title="app.yaml"></a>app.yaml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">runtime:</span> <span class="string">python27</span></div><div class="line"><span class="attr">api_version:</span> <span class="number">1</span></div><div class="line"><span class="attr">threadsafe:</span> <span class="literal">yes</span></div><div class="line"><span class="attr">handlers:</span></div><div class="line"><span class="attr">- url:</span> <span class="string">.*</span></div><div class="line"><span class="attr">  script:</span> <span class="string">hello.app</span></div></pre></td></tr></table></figure>
<p>其中hello.app对应hello.py。以前需要写应用名和version，现在不需要，而且不能写。如果从别的地方复制的代码中含有application和version，现在可以删掉了。</p>
<p>handlers相当于路由表。静态文件可以（而且应当）直接处理，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">- url:</span> <span class="string">/favicon\.ico</span></div><div class="line"><span class="attr">  static_files:</span> <span class="string">static/images/favicon.ico</span></div><div class="line"><span class="attr">  upload:</span> <span class="string">static/images/favicon\.ico</span></div></pre></td></tr></table></figure>
<p>有一些特殊的库因为很常用，所以不需要自行安装，例如ssl等。<a href="https://cloud.google.com/appengine/docs/python/tools/built-in-libraries-27" target="_blank" rel="external">这些库</a>可以在app.yaml中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">libraries:</span></div><div class="line"><span class="attr">- name:</span> <span class="string">ssl</span></div><div class="line"><span class="attr">  version:</span> <span class="number">2.7</span></div></pre></td></tr></table></figure>
<h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><p>因为我们用到了flask，不是Python自带的，也不是GAE自带的，所以需要安装。在文件中输入：</p>
<pre><code>Flask&gt;=0.10.1
</code></pre><h3 id="appengine-config-py"><a href="#appengine-config-py" class="headerlink" title="appengine_config.py"></a>appengine_config.py</h3><p>通过该文件，我们可以告诉GAE在import的时候应该到哪里去找库。输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> google.appengine.ext <span class="keyword">import</span> vendor</div><div class="line">vendor.add(<span class="string">'lib'</span>)</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果想跑定期运行的任务（cron），可以看<a href="https://cloud.google.com/appengine/docs/python/config/cron" target="_blank" rel="external">cron文档</a>。</p>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><p>打开终端，进入项目所在目录。</p>
<p>把依赖库装上：</p>
<pre><code>pip install -t lib -r requirements.txt
</code></pre><div class="bs-callout bs-callout-warning">
                <h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h4><p>官方文档中指出基于Homebrew的Python可能会出问题。我用的MacPorts，而且直接把系统Python干掉了（要不然Vim插件ycmd无法加载），所以不知道是什么情况。</p>

            </div>
<p>输入以下命令即可运行：</p>
<pre><code>dev_appserver.py .
</code></pre><p>屏幕会提示<code>http://localhost:8080</code>，那就是调试用的网站了。网站遇到错误的时候终端直接就会有提示（所以我建议用终端版的SDK，看起来方便）。另外还有个8000是后台。</p>
{% callout warning %}
#### 坑

如果程序运行结果与预想结果不符的话，不妨试试`rm *.pyc`。刚开始的时候我就被pyc坑苦了。
{% endcallout %}
<p>实际上，以上命令在GAE的在线命令行里面敲同样是好使的。</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>如果想让网站在GAE上正式跑起来，首先需要在GAE上开个代码库，然后通过gcloud命令部署。</p>
<h2 id="代码库"><a href="#代码库" class="headerlink" title="代码库"></a>代码库</h2><p>进到GAE网站，在左面的菜单中找到“开发”，点进去，可以看到“源代码”，Source Tools。GAE的代码库既可以从GitHub导入，也可以直接开一个。</p>
<p>开一个新代码库之后，GAE会告诉你如何上传代码。你可以选择把空仓库<code>git clone</code>到本地，也可以选择在本地<code>git init</code>然后再上传。</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>我选择在GAE建立一个新代码库，通过<code>git init</code>推过去。</p>
<p>首先得把当前目录变成Git仓库：</p>
<pre><code>git init
</code></pre><p>建立一个<code>.gitignore</code>，在其中输入<code>*.pyc</code>和<code>*/*.pyc</code>。没必要把这类文件加到仓库里面。</p>
<p>如果有lib目录的话，当然不要把lib目录扔了，否则程序没法运行。把代码上传到GitHub的时候应当把lib删掉，但是调试和部署的时候还是得把lib弄回来。</p>
<p>然后是git的一套：</p>
<pre><code>git add *
git commit -m &apos;First&apos;
</code></pre><p>接下来照敲GAE给你的命令：</p>
<pre><code>git config credential.helper gcloud.sh
git remote add google https://source.developers.google.com/...（换成你自己的地址）
git push --all google
</code></pre><p>前两条命令只需要敲一次。以后只需要把git的那一套弄好（add、rm、commit等等），直接push即可。</p>
<div class="bs-callout bs-callout-info">
                <h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>第一次会问你Google账号密码。如果你确定输入无误，但是上传失败，过一会儿再试就可以了。当然，别忘了代理。</p>

            </div>
<h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><p>部署很简单，在本地敲一行命令，然后在提示中敲“y”即可：</p>
<pre><code>gcloud app deploy
</code></pre><p>小项目的话等几分钟就可以完成部署。有的时候可能比较慢，实际上是因为正在建立Docker的映像……</p>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除网站时，首先要进入App Engine界面，到设置中把它停止，然后再到Dashboard（不叫dashboard但是是这种Dashboard或Overview的意思）中找到它，删除。一开始我找了半天，后来发现，最好还是先手动停止一下，这样“删除”就比较好找了。删除动作不是马上进行的，GAE会给你一个期限，在此期间可以反悔。</p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>还有些东西没去折腾，以后有机会再填坑（不排除弃坑的可能）：</p>
<ol>
<li>GAE的数据库和Storage怎么折腾？</li>
<li>GAE新支持了Ruby和Node.js，怎么折腾？花不花钱？</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Google App Engine其实是一个非常不错的应用引擎，免费，不用处理审核备案之类的麻烦事，而且文档丰富，感觉上要比新浪SAE或百度BAE好多了。虽说以前用GAE只是为了&lt;a href=&quot;https://zh.wikipedia.org/zh/GoAgent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GoAgent&lt;/a&gt;，而且GAE被墙了，但是它免费啊，而且自己可以自行翻墙啊，因此仍然可以拿它做一些个人专用的或者给老外用的应用。&lt;/p&gt;
&lt;p&gt;GAE的文档很全，不过内容全是英语，对于我这种英语不好的来说简直就是在赎罪。此外GAE也是个巨坑，在探索过程中我也碰了不少灰，所以正好在本文总结一下坑点。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾记录" scheme="https://vjudge1.github.io/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="GAE" scheme="https://vjudge1.github.io/tags/GAE/"/>
    
      <category term="Python" scheme="https://vjudge1.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>自己动手写東方Project作弊器（三）</title>
    <link href="https://vjudge1.github.io/2016/08/20/touhou-cheater-3/"/>
    <id>https://vjudge1.github.io/2016/08/20/touhou-cheater-3/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:21.362Z</updated>
    
    <content type="html"><![CDATA[<p>東方Project还有若干格斗游戏，主要由黄昏边境开发。作为有官方设定的歪作，当然也应该通通关。</p>
<p>虽然黄昏的画风不错，可是，这样一个全是萝莉的格斗游戏居然没有格斗游戏应有的功能<span class="blackout">例如乳摇和爆乳</span>（没法和<a href="http://cn.uncyclopedia.wikia.com/wiki/DOA" target="_blank" rel="external">DOA</a>相比），更过分的是，双方根本就是<strong>8比特的马赛克小人</strong>！所以说，给东方的格斗游戏写个作弊器/修改器也是理所应当的了（坏笑）。</p>
<p>作弊作到什么程度呢？来个最缺德的——自己不死，对方一击毙命。<span class="blackout">没乳摇还玩啥嘛。</span></p>
<a id="more"></a>
<div class="bs-callout bs-callout-info">
                <h4 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h4><p>我没能搞出心绮楼和深秘录的作弊方法orz……</p>

            </div>
<h1 id="东方萃梦想"><a href="#东方萃梦想" class="headerlink" title="东方萃梦想"></a>东方萃梦想</h1><p>（版本：1.11）</p>
<p>研究萃梦想的作弊（说好听点叫修改），首先得去打游戏。我个人打不好东方的格斗游戏，怎么办呢？经过试验，发现剧情模式和双人模式的地址都是一样的（废话），所以直接开双人就行。</p>
<p>人数地址是固定的，在剧情模式里挨几顿打就能搜出来了（671622）。写这个地址的指令位于43CD5D，改写成三个90，就不会GAME OVER了。</p>
<p>血槽地址是动态的，每打一架都会变化，而且双方都变，所以搜索要一气呵成（使用模糊搜索，大概需要搜八九次）。满血是10000。搜到地址之后马上定位，可以找到三个地址：44365C（自己和对手掉血，血的偏移量是324，短的那部分——我不懂格斗类游戏的术语，别笑话我）、4436EB（自己和对手掉<del>血</del>应该是体力吧，长的那部分，数据地址偏移量是326）、4425FE（自己的，和血量同步，数据地址偏移量328）。</p>
<div class="bs-callout bs-callout-info">
                <h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>能够改变血量的地址还有443E19（偏移量324）、452879（偏移量324，保证血量不大于体力值）、444BD5（偏移量324，发动符卡之后）、444C0D（偏移量328，发动符卡之后）、444D16（偏移量328，发动符卡之后）等。精力有限所以没挨个研究具体作用。</p>

            </div>
<p>值得注意的是，自己和对手掉血的指令是同一个指令，因此不能直接NOP或者直接MOV成0。为了省事儿，先把4436EB、4425FE和443E19给NOP掉（均改为7个90），专门研究血量。</p>
<p>注意443657处的SUB，将其改为<code>2B C9</code>（<code>sub ecx, ecx</code>，直接归零）后，对方就可以被一拳头打趴下了。但是，自己也会被对方一拳打趴下。因此还要设法分清敌我。</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/20/touhou-cheater-3/th75.png" alt="th75.png" title=""></p>
<p>为了接下来的调试，443657还得改回来。在此处下断点，发现只有EAX寄存器的值有区别（ECX、EDX分别是血量和血量变化，不用管）。EAX取自<code>[ebp+10]</code>，而双方挨打时EBP均为19FA04。</p>
<p>一开始我的思路是关注堆栈的变化情况，虽然找得很辛苦，但是没有任何成效。</p>
<p>后来重新思考一下——既然有<code>mov eax, [ebp+10]</code>，还有一个<code>[eax+324]</code>，那么这不就是个指针吗？因此，换用游戏修改器，搜索一下指针所指的内存地址（当然两个角色的<code>[ebp+10]</code>所保存的值得记下来，然后马上搜，要不然只要重新开一盘内容就变了），于是发现了指针本身所处地址——1P是671418，2P是67141C。</p>
<p>现在的问题就变成了：如何在扣血之前将双方的地址分辨出来，分别处理——一不做二不休直接把对方打死？</p>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>后者比较简单，先尝试一下，不过修改完发现有个bug就是对方打自己之后双方就无法继续打下去了，因此还得选择前者。</p>
<p>从44365C往前改，重新编一段新代码。从443645开始，改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址    汇编指令                      机器码</div><div class="line">443645: nop                         ;90</div><div class="line">443646: nop                         ;90</div><div class="line">443647: nop                         ;90</div><div class="line">443648: nop                         ;90</div><div class="line">443649: mov ecx, [ebp+10]           ;8B 4D 10</div><div class="line">44364C: cmp ecx, [671418]           ;3B 0D 18 14 67 00</div><div class="line">443652: je 443663                   ;74 0F</div><div class="line">443654: sub ecx, ecx                ;29 C9</div><div class="line">443656: mov edx, [67141C]           ;8B 15 1C 14 67 00</div><div class="line">44365C: mov word ptr [edx+324], cx  ;66 89 8A 24 03 00 00，保持不变</div></pre></td></tr></table></figure>
<p>这样改仍然有可能掉血，经过观察和追踪可以发现，血量一定不大于体力值，这是由452879处的指令来控制的（下图）。NOP掉（改写成7个90）之后自己就不会再掉血了。</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/20/touhou-cheater-3/th75_2.png" alt="th75_2.png" title=""></p>
<p>在对手发动符卡的时候，44365C处的指令并不起作用，因此还得找到在符卡战中掉血的指令，继续编程。</p>
<p>通过搜索和跟踪发现，发动符卡的时候，掉血的指令位于444BD0。新代码本来应该和上面差不多，不过留出来的字节数不够，只好略去CMP，直接把对方打趴下（不知道会有什么副作用）。</p>
<img src="/2016/08/20/touhou-cheater-3/th75_3.png" alt="th75_3.png" title="">
<p>这次从444BC9开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址    汇编指令                      机器码</div><div class="line">444BC9: nop                         ;90</div><div class="line">444BCA: nop                         ;90</div><div class="line">444BCB: nop                         ;90</div><div class="line">444BCC: nop                         ;90</div><div class="line">444BCD: sub edx, edx                ;29 D2</div><div class="line">444BCF: mov eax, [67141C]           ;8B 05 1C 14 67 00</div><div class="line">444BC5: mov word ptr [eax+324], dx  ;66 89 90 24 03 00 00，本行不变</div></pre></td></tr></table></figure>
<p>经过试验，只要把上面两个重新编程的地方改一下，然后在452879处写入7个90，就可以吊打小女生了。</p>
<h2 id="思路二（推荐）"><a href="#思路二（推荐）" class="headerlink" title="思路二（推荐）"></a>思路二（推荐）</h2><p>在改绯想天时，我想到了另一个思路。既然前面提到<code>call 00455640</code>是计算血量变化值的，那么我们也可以这样玩——自己掉血时直接返回0，对手掉血时有多少血就返回多少。</p>
<p>观察443645附近的指令，可以发现，CALL完之后变化量存在了AX里面，所以……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址   汇编指令                         机器码</div><div class="line">455640: push edx                       ; 52</div><div class="line">455641: mov edx, dword ptr [ebp+10]    ; 8B 55 10</div><div class="line">455644: movsx eax, word ptr [edx+324]  ; 0F BF 82 24 03 00 00</div><div class="line">45564B: mov edx, dword ptr [67141C]    ; 8B 15 1C 14 67 00</div><div class="line">455651: cmp edx, dword ptr [ebp+10]    ; 3B 55 10</div><div class="line">455654: je short 00455658              ; 74 02</div><div class="line">455656: sub eax, eax                   ; 29 C0</div><div class="line">455658: pop edx                        ; 5A</div><div class="line">455659: retn                           ; C3</div><div class="line">; 后面不用管了</div></pre></td></tr></table></figure>
<p>然后到444BC4（<code>sar eax, 1</code>）改一下，把它NOP掉（<code>90 90</code>），否则符卡战没法把血放光。</p>
<p>这样改就可以了，而且比思路一好多了。</p>
<p>我可怜的小<a href="https://zh.moegirl.org/%E4%BC%8A%E5%90%B9%E8%90%83%E9%A6%99" target="_blank" rel="external">萃香</a>啊TAT。</p>
<h1 id="东方绯想天"><a href="#东方绯想天" class="headerlink" title="东方绯想天"></a>东方绯想天</h1><p>版本：1.06</p>
<p>按照相同的思路来研究绯想天的作弊。</p>
<p>萃梦想的那个指针（角色状态信息的基准地址）是静态的，而绯想天是动态的，很坑。</p>
<p>一开始还是搜血条，找到了5个地址，不过只有一个是主动改变的，其他都是被动改变的，只要挨个改一下就能试出来。对那个主动的进行跟踪，就定位到了46BAF1处的指令（<code>sub word ptr [esi+174], bx</code>），最终应该是对它和另外一处地址（符卡战）下手。不过后面实际上对BX下手了。</p>
<p>注意到<code>[esi+174]</code>之后继续用修改器搜索esi的值，会找到一串子地址，返回角色选单（千万不要手贱点“X”关闭了）、开打、再返回再开打就可以筛掉一部分。在返回主菜单一瞬间，数值最先变成0的那个地址就是指针所处的地址。</p>
<p>但指针本身也是动态的，因此要对指针所处地址的写入进行跟踪（在进入游戏的一瞬间会被写入）。这样就定位到了4635B6（<code>mov dword ptr [ebx+eax*4+28], esi</code>）。下断点，可以发现，EAX是0或1，而EBX的值（通过搜索发现它）来自6E623C。</p>
<p>因此，1P的血量就相当于<code>[[[6E623C]+0+28]+174]</code>，2P的血量就相当于<code>[[[6E623C]+4+28]+174]</code>。用C语言表示，就相当于：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ushort unsigned short</span></div><div class="line">ushort ***base = (ushort***) <span class="number">0x6E623C</span>;</div><div class="line">ushort **p1 = (*base) + <span class="number">0</span> + <span class="number">10</span>,   <span class="comment">// 10=0x28/sizeof(ushort*)=0x28/4</span></div><div class="line">       **p2 = (*base) + <span class="number">1</span> + <span class="number">10</span>;</div><div class="line">ushort *life1, *life2;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (*p1 != <span class="literal">NULL</span> &amp;&amp; *p2 != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">    life1 = *p1 + <span class="number">186</span>;            <span class="comment">// 186=0x174/sizeof(ushort)=0x174/2</span></div><div class="line">    life2 = *p2 + <span class="number">186</span>;</div><div class="line">    <span class="comment">// 血量是 *life1 和 *life2</span></div><div class="line">    *life2 -= *life2;             <span class="comment">// 缺德</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 没开打</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为地址的计算比较复杂，自己写指令会占非常多的字节，所以可以考虑专门找个CALL来改造一下。注意46BAF1指令中的减数是BX，所以往前找写入BX的指令，即46B9AC（<code>movzx ebx, ax</code>）。通过下断点，发现AX的值是由前一条指令<code>call 0045AAE0</code>算出来的，于是……</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址    汇编指令                        机器码</div><div class="line">45AAE0: push ecx                     ; 51</div><div class="line">45AAE1: mov ecx, dword ptr [6E623C]  ; 8B 0D 3C 62 6E 00</div><div class="line">45AAE7: add ecx, 2C                  ; 83 C1 2C</div><div class="line">45AAEA: mov eax, [esi+174]           ; 8B 86 74 01 00 00</div><div class="line">45AAF0: cmp esi, [ecx]               ; 3B 31</div><div class="line">45AAF2: je 0045AAF6                  ; 74 02</div><div class="line">45AAF4: sub eax, eax                 ; 29 C0</div><div class="line">45AAF6: pop ecx                      ; 59</div><div class="line">45AAF7: retn                         ; C3</div></pre></td></tr></table></figure>
<p>于是我的<a href="https://zh.moegirl.org/比那名居天子" target="_blank" rel="external">天子</a>被我的<a href="https://zh.moegirl.org/博丽灵梦" target="_blank" rel="external">灵梦</a>打成孙子了Orz。</p>
<h1 id="东方非想天则"><a href="#东方非想天则" class="headerlink" title="东方非想天则"></a>东方非想天则</h1><p>版本：1.10（beta）</p>
<p>非想天则的作弊和绯想天一模一样，我就直接贴结果了。</p>
<p>掉血的指令位于47A72C（<code>sub word ptr [esi+184], bx</code>）。写地址的指令位于46D5BA（<code>mov dword ptr [ebx+eax*4+28], esi</code>），EBX的值源于8855BC，所以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址   汇编指令                       机器码</div><div class="line">464240: push ecx                     ; 51</div><div class="line">464241: mov ecx, dword ptr [8855BC]  ; 8B 0D BC 55 88 00</div><div class="line">464247: add ecx, 2C                  ; 83 C1 2C</div><div class="line">46424A: mov eax, [esi+184]           ; 8B 86 84 01 00 00</div><div class="line">464250: cmp esi, [ecx]               ; 3B 31</div><div class="line">464252: je 00464256                  ; 74 02</div><div class="line">464254: sub eax, eax                 ; 29 C0</div><div class="line">464256: pop ecx                      ; 59</div><div class="line">464257: retn                         ; C3</div></pre></td></tr></table></figure>
<p>真是像非想天则（人偶）那样不需要思考了。</p>
<h1 id="东方心绮楼（未完待续）"><a href="#东方心绮楼（未完待续）" class="headerlink" title="东方心绮楼（未完待续）"></a>东方心绮楼（未完待续）</h1><h1 id="东方深秘录（未完待续）"><a href="#东方深秘录（未完待续）" class="headerlink" title="东方深秘录（未完待续）"></a>东方深秘录（未完待续）</h1><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>如果想直接改EXE文件的话，文件内的偏移量就是我们所需要的偏移量减去400000，例如想在412345处写入90，那么就可以找个十六进制编辑器，在12345处写个90。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;東方Project还有若干格斗游戏，主要由黄昏边境开发。作为有官方设定的歪作，当然也应该通通关。&lt;/p&gt;
&lt;p&gt;虽然黄昏的画风不错，可是，这样一个全是萝莉的格斗游戏居然没有格斗游戏应有的功能&lt;span class=&quot;blackout&quot;&gt;例如乳摇和爆乳&lt;/span&gt;（没法和&lt;a href=&quot;http://cn.uncyclopedia.wikia.com/wiki/DOA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOA&lt;/a&gt;相比），更过分的是，双方根本就是&lt;strong&gt;8比特的马赛克小人&lt;/strong&gt;！所以说，给东方的格斗游戏写个作弊器/修改器也是理所应当的了（坏笑）。&lt;/p&gt;
&lt;p&gt;作弊作到什么程度呢？来个最缺德的——自己不死，对方一击毙命。&lt;span class=&quot;blackout&quot;&gt;没乳摇还玩啥嘛。&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="折腾记录" scheme="https://vjudge1.github.io/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="東方Project" scheme="https://vjudge1.github.io/tags/%E6%9D%B1%E6%96%B9Project/"/>
    
      <category term="反汇编" scheme="https://vjudge1.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>自己动手写東方Project作弊器（二）</title>
    <link href="https://vjudge1.github.io/2016/08/18/touhou-cheater-2/"/>
    <id>https://vjudge1.github.io/2016/08/18/touhou-cheater-2/</id>
    <published>2016-08-17T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:27.472Z</updated>
    
    <content type="html"><![CDATA[<p>東方的射击类游戏还没修改完。接着折腾。（没有耐心的话可以直接看结尾附带的链接。）</p>
<a id="more"></a>
<h1 id="东方红魔乡"><a href="#东方红魔乡" class="headerlink" title="东方红魔乡"></a>东方红魔乡</h1><p>红魔乡似乎加壳了。虽然对作弊器研究没有影响，但是上一篇文章提到的“参考资料”的作者研究了脱壳的问题，所以我直接贴个地址：<a href="http://tieba.baidu.com/p/3730028296" target="_blank" rel="external">东方红魔乡脱壳</a></p>
<h1 id="东方妖妖梦-amp-东方永夜抄"><a href="#东方妖妖梦-amp-东方永夜抄" class="headerlink" title="东方妖妖梦 &amp; 东方永夜抄"></a>东方妖妖梦 &amp; 东方永夜抄</h1><p><img src="https://static.mengniang.org/common/2/29/Th135Youmu%26Yuyuko.gif" alt="吃货"></p>
<p>（版本：妖妖梦1.00b，永夜抄1.00d）</p>
<p>妖妖梦和永夜抄的作弊与其他正作略有区别。不同之处在于：</p>
<ol>
<li>残机、BOMB、Power等数据以浮点数形式储存（不知为何ZUN神主突然想拿float当int使）。</li>
<li>地址是动态的，即使是续关，地址都会发生变化。</li>
<li>直接改数值的话游戏会崩掉。</li>
</ol>
<p>了解这些情况之后，应当先练习一下妖妖梦和永夜抄，至少要撑到第三四关（囧），否则很可能搜不到数据。练得差不多之后继续开修改器搜索。但是，找到数据之后，不要停止游戏，而是应当立马开启追踪。然后，剩下的事情就和其他作品差不多了。</p>
<p>以永夜抄为例：</p>
<p>通过搜索，找到了存放生命值的地址是2D0EB84。</p>
<img src="/2016/08/18/touhou-cheater-2/th8_1.png" alt="th8_1.png" title="">
<p>追踪对这个地址的读写（注意float是4字节），找到两个地址43C66D和43C676。</p>
<img src="/2016/08/18/touhou-cheater-2/th8_2.png" alt="th8_2.png" title="">
<img src="/2016/08/18/touhou-cheater-2/th8_3.png" alt="th8_3.png" title="">
<p><del>对于那个FILD指令，加残机的时候进去的数字是1，掉残机时进去的数字是-1。</del>何必管它呢？直接把43C676处的指令（FSTP那个）填成3个90（NOP），这样改就不掉残机数了（不过也不增加了）。</p>
<p>稍微深入地跟踪一下，发现Miss时是由44D100处调用改残机数的指令，前面（44D0F9处）有个<code>push -1</code>——经过试验，将44D0FA改成00也能不掉残机数。</p>
<p>大胆地往前找call，反复加断点，并结合<a href="/2016/08/12/touhou-cheater/">上篇文章</a>的经验（判定时会读写自机的状态），可以发现：</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/18/touhou-cheater-2/th8_4.png" alt="th8_4.png" title=""></p>
<p>在Miss过程中，44C48A（<code>call 0044CBF0</code>）会被不断地调用。44C482处的<code>cmp edx, 2</code>是判断自机状态（由前文经验得知），也就是说，状态2表示“正在挂掉”。继续追踪，发现这个状态被写在了17D5EF8里面，而且这个地址是固定的。不过这次不要再野蛮地改成RET了，否则游戏会崩——改成NOP就行了。</p>
<p>备注：在永夜抄中，自机Miss的一瞬间会有一个短暂的暂停——等待玩家发动决死。有人给出了跳过这段等待时间的方法，照着改就行：<a href="http://tieba.baidu.com/p/1271755034" target="_blank" rel="external">永夜抄自机、bomb、power内存地址</a>。</p>
<h1 id="东方花映塚"><a href="#东方花映塚" class="headerlink" title="东方花映塚"></a>东方花映塚</h1><p>（版本：1.50a）</p>
<p>花映塚的作弊和格斗类游戏的作弊有一点相似——双方掉血都是由同一指令操作的。详细思路见<a href="/2016/08/20/touhou-cheater-3/">下一篇文章</a>。</p>
<p>花映塚的人数是浮点数。经过搜索，它位于Bxxxxx（动态地址），追踪后发现417AAF（<code>fld dword ptr [ecx]</code>），接下来一句是<code>fsub dword ptr [0x48e2a4]</code>。冲到48E2A4那里一看，里面果然存着一个浮点数1，但这个数字不能改，否则游戏会崩。回到417AB1（fsub dword ptr [48E2A4]），我们干脆把它NOP掉（改成6个90），于是再也不会没人了。</p>
<p>再谈对战的问题。通过搜血量（满血是10），找到血的地址（把它记住，然后别死掉，后面还要用），跟踪到41E5FE，血是在这里扣的，地址存在了<code>[ESI+0A8]</code>里——指针。</p>
<img src="/2016/08/18/touhou-cheater-2/th9_1.png" alt="th9_1.png" title="">
<p>下断点，使用内存搜索搜ESI的值（可以换GameMaster搜），自己血量的地址存在4A7D94里，对手血量的地址存在4A7DCC里。</p>
<p>往前追几行（注意跳转的来源），我们简单粗暴一点，把41E46A改成<code>mov esi, dword ptr [4A7DCC]</code>（<code>8B 35 CC 7D 4A 00</code>），接下来的两条指令全部NOP掉（改为9个90）——撞弹直接赢。</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/18/touhou-cheater-2/th9_2.png" alt="th9_2.png" title=""></p>
<p>直接让对方挂掉确实有点太损了，还是只让自己无敌比较好。那么回到41E5FE，往前翻，子程序从41E420开始。它是由41E8EC调用的，说明在这里已经准备好扣血了。</p>
<p>接下来要搞清楚一个问题：人物状态存在了哪里？</p>
<img src="/2016/08/18/touhou-cheater-2/th9_3.png" alt="th9_3.png" title="">
<p>在上图中下了多个断点，发现41E8B0这段子程序也会按1P和2P轮流调用。在41E8B7处，EAX的值就是自机和敌机状态（1正常、4正在挂掉、2已经挂掉），因此改变自机状态的子程序很可能就在435EC0里面。</p>
<p>想得挺美——其实435EC0里面只有一个<code>mov eax, dword ptr [ecx]</code>。说明这句话实际上是想把[ecx]里面存的状态送给eax。</p>
<p>我们试一下，如果把41E8B2改为<code>mov eax, 1</code>（B801000000），双方是否都会无敌呢？</p>
<p>果然敌我双方都无敌了。</p>
<p>这样的话，我们就可以写一个子程序，<del>如果ecx是[4A7DC8]，那么就不要让eax等于4，如果ecx是[4A7DCC]，那么就照常执行<code>mov eax, dword ptr [ecx]</code></del>（实践证明这不好使，暂时还没想明白为什么）。附近没有地方写子程序，“答案”给出了一个方案，那就是到程序末尾随便找个空间。下面直接贴出“答案”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">;地址   汇编指令                      机器码</div><div class="line">48DB20: cmp dword ptr [4A7EA4], 4    ;83 3D A4 7E 4A 00 04</div><div class="line">48DB27: je short 0048DB2E            ;74 05</div><div class="line">48DB29: cmp ebx, 0B                  ;83 FB 0B</div><div class="line">48DB2C: je short 0048DB30            ;74 02</div><div class="line">48DB2E: mov eax, dword ptr [ecx]     ;8B 01</div><div class="line">48DB30: retn                         ;C3</div></pre></td></tr></table></figure>
<p>最后别忘了把41E8B2改成<code>call 0048DB20</code>（E8 69 F2 06 00）。</p>
<h1 id="妖精大战争"><a href="#妖精大战争" class="headerlink" title="妖精大战争"></a>妖精大战争</h1><p><del>我的<a href="https://zh.moegirl.org/%E7%90%AA%E9%9C%B2%E8%AF%BA" target="_blank" rel="external">琪露诺</a>那么强，用得着作弊吗？</del></p>
<p>（版本：1.00a）</p>
<p>妖精大战争的作弊比较容易，不过干劲的设定与残机数量略有区别。最初的干劲是200%，实际上在内存中的数值是20000（十进制）。</p>
<p>很容易就能搜到具体地址4B4D64，固定的。追踪发现，干劲上升和下降都是同一指令在起作用（下图42729C）。</p>
<img src="/2016/08/18/touhou-cheater-2/th128_1.png" alt="th128_1.png" title="">
<p>如果不想上升也不想下降，直接写入6个90（NOP）就可以了。如果想上升不想下降，我们注意ECX的值，还有427277处的指令，可以发现干劲的变化值被存到堆栈里面了。继续追踪调用这段代码的CALL，找到了43CDDF（下图）。</p>
<img src="/2016/08/18/touhou-cheater-2/th128_2.png" alt="th128_2.png" title="">
<p>看到43CDD8处的<code>push -2710</code>了吗？Miss一下就掉100%干劲，乘100再转成十六进制，正好2710。所以改成<code>push 0</code>就完事儿了。需要注意的是，在EX关，魔理沙的大招（激光）也会让小<a href="https://zh.moegirl.org/%E7%90%AA%E9%9C%B2%E8%AF%BA#.E2.80.9C.E2.91.A8.E2.80.9D.E5.8F.8A.E2.80.9C.E7.AC.A8.E8.9B.8B.E2.80.9D.E4.B9.8B.E5.90.8D.E7.9A.84.E7.94.B1.E6.9D.A5" target="_blank" rel="external">⑨</a>掉干劲。想作的彻底一点的话就自己研究吧。</p>
<p>妖精大战争的无敌方法和<a href="/2016/08/12/touhou-cheater/">前文</a>完全一样，本文不再重复叙述了。直接给出“答案”：把43D0C0处改为C2 04 00（<code>retn 4</code>）。</p>
<h1 id="弹幕天邪鬼"><a href="#弹幕天邪鬼" class="headerlink" title="弹幕天邪鬼"></a>弹幕天邪鬼</h1><p>（版本：1.00a）</p>
<p>弹幕天邪鬼的作弊稍微麻烦一点，因为Miss之后直接Game Over了，所以不能向其他作品那样靠撞弹定位指令。</p>
<p>道具数量很好改，开搜索之后能搜到两个地址，这两个都是动态地址，均是道具数量，代码跟踪之后可以找到457860（<code>DEC DWORD PTR [EDI+18]</code>），NOP掉就行（改成90 90 90）。</p>
<p>接下来是无敌。</p>
<h2 id="第一次研究（失败）"><a href="#第一次研究（失败）" class="headerlink" title="第一次研究（失败）"></a>第一次研究（失败）</h2><p>这次从擦弹入手。</p>
<p>弹幕天邪鬼的分数由多部分组成，例如射击分数、擦弹分数，这些分数在内存中是分开放置的，直到显示的时候才会求和。因此在搜索擦弹数量的时候要专心擦弹，不要射击或者用道具。每10分是1个子弹。</p>
<p>擦弹分数也保存在两个不同的地址中，一个是动态的，另一个是4E46F8。追踪对4E46F8的写入，可定位到41970B（<code>MOV DWORD PTR [4E46F8], ECX</code>）。找到对这部分指令的CALL，便来到435801。</p>
<p>一直往前翻，直到这部分代码的开头，可以一直翻到4350E0。对这里下断点，发现这部分代码是可能游戏的主循环，或者是主循环的一部分。</p>
<p>后面的事情就很无聊了：下断点（建议对所有CALL和不在范围内的JMP下断点，然后记录调用顺序），打游戏，等死，定位……一帧一帧地玩。</p>
<p>结果发现这段循环根本与判定无关。实际上，它是擦弹并且离开之后才被调用的，中间还隔着Windows API，对我这样的初学者来说根本没法玩。</p>
<h2 id="第二次研究（成功）"><a href="#第二次研究（成功）" class="headerlink" title="第二次研究（成功）"></a>第二次研究（成功）</h2><p>这次又是碰运气与投机取巧的结合体。</p>
<p>经过多次作弊，我发现东方每部射击作品都用01234这几个数字来表示自机状态（未出场、正常状态、正在死亡和已经死亡）。正常状态和已经死亡的状态是比较持久的，即使满身疮痍，那个死亡的状态仍在内存里面保存着，并且直接续关之后地址不变。因此，我们可以尝试反复搜索两种状态，直到找到地址为止。</p>
<p>现在有一个小问题，就是不知道“正常”和“死亡”分别是几。</p>
<p>考虑到弹幕天邪鬼是辉针城的后作，那么我们可以偷个懒，先尝试用辉针城的状态来搜天邪鬼，也就是说，活着的时候反复搜索1，死了之后反复搜索2。当然，不要一出场或者一死亡就点搜索按钮，因为还有0和4两个状态。</p>
<p>经过观察，状态确实是用1和2表示的，因为死亡一瞬间那个地址的数值一下子变成了4，然后很快就变成了2。得到的地址是0Axxxxxx（每次都变化的），追踪对这个地址的写入，撞弹，发现确实能找到一个对其写入4的指令，其地址为44F26C（<code>mov dword ptr [edi+684], 4</code>）。</p>
<p>所以剩下的事情和辉针城一模一样了——往前翻，直到这个子程序的开头44F140，把它改成C3（RET），这样写入死亡状态的子程序就全被屏蔽了。</p>
<h1 id="东方文花帖-amp-DS"><a href="#东方文花帖-amp-DS" class="headerlink" title="东方文花帖 &amp; DS"></a>东方文花帖 &amp; DS</h1><p>（文花帖版本1.02a，DS文花帖版本1.00a）</p>
<p>东方文花帖和DS作什么弊呢？还是不死吧。</p>
<p>因为和天邪鬼一样都是撞弹就满身疮痍，所以还是直接搜状态。</p>
<p>经过试验，文花帖和DS文花帖都用1表示活着，用2表示死亡，并且没有“正在死亡”的状态。那么剩下的事情就和天邪鬼一模一样了。直接给结论：文花帖是把4306D0改成C3，DS文花帖是把436C20改成C3。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://cheater.seesaa.net/category/9478192-1.html" target="_blank" rel="external">東方改造: Nice cheat.</a><ul>
<li><a href="http://cheater.seesaa.net/article/169529488.html" target="_blank" rel="external">东方绀珠传作弊</a></li>
</ul>
</li>
<li><a href="http://tieba.baidu.com/p/1271755034" target="_blank" rel="external">永夜抄自机、bomb、power内存地址</a></li>
<li><a href="http://tieba.baidu.com/p/1270485699" target="_blank" rel="external">关于妖妖梦作弊…….</a></li>
<li><a href="http://tieba.baidu.com/p/3730028296" target="_blank" rel="external">东方红魔乡脱壳</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;東方的射击类游戏还没修改完。接着折腾。（没有耐心的话可以直接看结尾附带的链接。）&lt;/p&gt;
    
    </summary>
    
      <category term="折腾记录" scheme="https://vjudge1.github.io/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="東方Project" scheme="https://vjudge1.github.io/tags/%E6%9D%B1%E6%96%B9Project/"/>
    
      <category term="反汇编" scheme="https://vjudge1.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>自己动手写東方Project作弊器（一）</title>
    <link href="https://vjudge1.github.io/2016/08/12/touhou-cheater/"/>
    <id>https://vjudge1.github.io/2016/08/12/touhou-cheater/</id>
    <published>2016-08-11T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:31.159Z</updated>
    
    <content type="html"><![CDATA[<p>很久没写程序了，甚至很久没和计算机代码打交道了。为了证明自己没被查水表，我就随便写点什么吧。</p>
<p>最近发现了<a href="https://zh.wikipedia.org/wiki/%E6%9D%B1%E6%96%B9Project" target="_blank" rel="external">東方Project</a>，不幸的是，由于天生手残，就连打Easy都有些吃力（除了永夜抄和辉针城）。作为一个猥琐大叔，就这样被萝莉们欺负，能爽吗？所以，为了把她们统统<a href="http://cn.uncyclopedia.wikia.com/wiki/%E6%8E%A8%E5%80%92" target="_blank" rel="external">推倒</a>，我要写东方的作弊器（修改器）了！</p>
<a id="more"></a>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>如果想直接作弊的话，只要搜一下东方的修改器，或者装个金山游侠、Cheat Engine或Game Master，然后改数据就可以了。如果自己写修改器，其实也不难，因为东方正作，除了妖妖梦和永夜抄，那些参数的地址都是固定的，只要记住地址，把数据写进去就OK了。妖妖梦和永夜抄比较特殊，<a href="/2016/08/18/touhou-cheater-2/">下一篇文章</a>再单独分析（其实也没什么太特殊的东西）。</p>
<p>修改器这种东西，用VB6写会比较简单。虽然VB6早就过时了，但是不得不说它是最简单实用的解决方案，没有之一。修改器的代码很多，网上随便找一个就能改造成XXX专用修改器了。</p>
<h2 id="修改内存数据"><a href="#修改内存数据" class="headerlink" title="修改内存数据"></a>修改内存数据</h2><p>修改内存数据的话，需要使用Windows API。核心函数就是WriteProcessMemory。</p>
<p>具体思路如下：</p>
<p>获取进程PID。比如寻找名为“th10.exe”的进程，或者通过FindWindow函数找到游戏窗口，再通过GetWindowThreadProcessId获取PID：</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><div class="line"><span class="keyword">Dim</span> hwnd <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line"><span class="keyword">Dim</span> pid <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line"></div><div class="line">hwnd = FindWindow(<span class="string">"BASE"</span>, vbNullString)</div><div class="line"><span class="keyword">If</span> hwnd = <span class="number">0</span> <span class="keyword">Then</span> <span class="keyword">Exit</span> <span class="keyword">Sub</span></div><div class="line"></div><div class="line">GetWindowThreadProcessId hwnd, pid</div></pre></td></tr></table></figure>
<p>接下来进行写入：</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><div class="line"><span class="keyword">Dim</span> pHandle <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line">pHandle = OpenProcess(PROCESS_ALL_ACCESS, <span class="literal">False</span>, lppid)</div><div class="line">WriteProcessMemory pHandle, <span class="keyword">ByVal</span> 目标地址, <span class="keyword">ByVal</span> VarPtr(目标值), 字节数, <span class="number">0</span>&amp;</div><div class="line">CloseHandle pHandle</div></pre></td></tr></table></figure>
<p>如果写入多个字节，可以开个Byte数组（例如叫做Arr），然后传入ByVal VarPtr(Arr(0))。</p>
<p>当然，在实际操作过程中要搞清楚运行的到底是哪一款游戏。我个人是通过GetWindowText获取窗口标题栏文字，然后检查有没有英文关键词（例如风神录是“Mountain of Faith”）来判断游戏版本的。反正不会特意去玩体验版，所以不用管它了。</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>直接用WriteProcessMemory是无法修改其他进程数据的。在修改之前，需要给进程提权。提权很简单，照抄现成代码就行：</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><div class="line"><span class="keyword">Dim</span> hToken <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line"><span class="keyword">Dim</span> tmpLuid <span class="keyword">As</span> LUID</div><div class="line"><span class="keyword">Dim</span> tkp <span class="keyword">As</span> TOKEN_PRIVILEGES</div><div class="line"><span class="keyword">Dim</span> tkpNewButIgnored <span class="keyword">As</span> TOKEN_PRIVILEGES</div><div class="line"><span class="keyword">Dim</span> lBufferNeeded <span class="keyword">As</span> <span class="built_in">Long</span></div><div class="line">OpenProcessToken GetCurrentProcess(), TOKEN_ALL_ACCESS, hToken</div><div class="line">LookupPrivilegeValue <span class="string">""</span>, <span class="string">"SeDebugPrivilege"</span>, tmpLuid</div><div class="line">tkp.PrivilegeCount = <span class="number">1</span></div><div class="line">tkp.Privileges(<span class="number">0</span>).pLuid = tmpLuid</div><div class="line">tkp.Privileges(<span class="number">0</span>).Attributes = SE_PRIVILEGE_ENABLED</div><div class="line">AdjustTokenPrivileges hToken, <span class="literal">False</span>, tkp, Len(tkpNewButIgnored), tkpNewButIgnored, lBufferNeeded</div></pre></td></tr></table></figure>
<p>不过最终的程序并不需要管理员权限。</p>
<h2 id="寻找地址"><a href="#寻找地址" class="headerlink" title="寻找地址"></a>寻找地址</h2><p>即使要自己写修改器，金山游侠一类软件还是要用的，要不然怎样找到地址呢？</p>
<p>现在修改器用起来非常简单：刚开局残机数量为2，我们就搜索一下“2”；自杀，再搜索一下“1”；再自杀，搜索“0”；如果还有一大堆结果，那么就复活一下，继续搜索，直到只剩下一个搜索结果。最后留下来的这个结果就是残机数量——只管改数就行了。</p>
<h1 id="直接改值"><a href="#直接改值" class="headerlink" title="直接改值"></a>直接改值</h1><p>送给拿来主义者——其实自己用游侠跑几遍就出来了。如果没有特殊说明，数据均为十六进制，数据大小都是1字节。</p>
<table>
<thead>
<tr>
<th>游戏</th>
<th>版本</th>
<th>残机</th>
<th>BOMB</th>
<th>Power</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td>红魔乡</td>
<td>1.02</td>
<td>69D4BA</td>
<td>69D4BB</td>
<td>69D4B0，最大0x80</td>
<td></td>
</tr>
<tr>
<td>风神录</td>
<td>1.00a</td>
<td>474C70</td>
<td></td>
<td>474C48，示数除以0.05，最大0x64</td>
<td></td>
</tr>
<tr>
<td>地灵殿</td>
<td>1.00a</td>
<td>4A5718</td>
<td></td>
<td>4A56E8，示数除以0.05，最大0x64<br>（魔理沙＋爱丽丝最大0xC8）</td>
<td></td>
</tr>
<tr>
<td>星莲船</td>
<td>1.00b</td>
<td>4B0C98</td>
<td>4B0CA0</td>
<td>4B0C48（2字节），示数乘100，最大0x190</td>
<td></td>
</tr>
<tr>
<td>神灵庙</td>
<td>1.00c</td>
<td>4BE7F4</td>
<td>4BE800</td>
<td>4BE7E8（2字节），最大0x190</td>
<td></td>
</tr>
<tr>
<td>辉针城</td>
<td>1.00b</td>
<td>4F5864</td>
<td>4F5870</td>
<td>4F5858（2字节），最大0x190</td>
<td></td>
</tr>
<tr>
<td>绀珠传</td>
<td>1.00b</td>
<td>4E7450</td>
<td>4E745C</td>
<td>4E7440（2字节），最大0x190</td>
<td></td>
</tr>
</tbody>
</table>
<p>改Power的时候建议先改成最大值减去一个数，否则自机火力容易不正常。</p>
<p>如何想锁定残机的话，用一个Timer来反复修改，就能达到锁定的效果了。</p>
<h1 id="改指令"><a href="#改指令" class="headerlink" title="改指令"></a>改指令</h1><p>深入地思考一下，既然能改残机数，为什么不直接通过修改程序来防止掉残机，或者干脆直接撞不到子弹呢？</p>
<p>怀着这样猥琐的目的，我草草地学了一下汇编语言。以前看机器码完全看不懂，借助几篇文章（见结尾“参考资料”），终于进步到看着头大的程度了。（说明教程作者具有<em>操纵看代码头疼程度的能力</em>。）</p>
<p>因为辉针城通关了（Easy不要鄙视我），所以就拿辉针城（版本1.00b）进行一下修改器的探索。其他大作的原理都一样。</p>
<div class="bs-callout bs-callout-info">
                <h4 id="高手和拿来主义者"><a href="#高手和拿来主义者" class="headerlink" title="高手和拿来主义者"></a>高手和拿来主义者</h4><p>作为没学过汇编的初学者，我详细地记录了自己的探索过程。如果你是高手或者想直接找地址，可以直接找结尾的“参考资料”。</p>

            </div>
<h2 id="残机数量不减"><a href="#残机数量不减" class="headerlink" title="残机数量不减"></a>残机数量不减</h2><p>辉针城残机数量的地址是4F5864，首先用追踪功能（<s>新手嘛，用Game Master试的</s>还是OllyDbg便于装酷）找到写入该地址的代码。</p>
<img src="/2016/08/12/touhou-cheater/1.png" alt="1.png" title="">
<p>看到那个<code>dec eax</code>（EAX减1）了吗？直接改成90（NOP，空指令）试一下。</p>
<p>改完之后可以主动撞一下，果然残机数不减了。</p>
<h2 id="无敌"><a href="#无敌" class="headerlink" title="无敌"></a>无敌</h2><p>无敌不是一下子就能追踪出来的，因此要有耐心（废话），多设置一些断点，观察设置断点与NOP前后游戏画面的变化（正经话）。</p>
<p>首先猜想一下，在撞子弹的一瞬间会发生什么事情。想不出来也没关系，在后面的探索过程中也要去总结：</p>
<ol>
<li>判定中弹</li>
<li>播放中弹声音、自机失去控制、播放中弹动画、自机数量减一（顺序不确定）</li>
<li>消弹</li>
<li>恢复正常状态</li>
</ol>
<p>中弹之后会处于短暂的无敌状态。在装弹的一瞬间一定会判定这个状态，因此可能要从判定方面下手。</p>
<p>首先定位到残机数量减一这里（下图）。</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/12/touhou-cheater/2.png" alt="2.png" title=""></p>
<p>减生命值的指令位于一小坨代码中。这小坨指令的第一条位于44F5E0。给44F5E0上断点，发现在Miss之后会经历一个很短暂的时间，然后才会触发断点。不过，这也可以说明这段代码确实与Miss有关。</p>
<p>将44F5E0处的指令改为C3（RET），发现还会Miss，但是不会播放中弹的动画效果，残机数量也不会减少了。</p>
<p>为了方便后面调试，先把44F5E0改回来，然后把44F617改成90（NOP），免得满身疮痍（Game Over）。</p>
<p>接下来追踪调用44F5E0的代码，找到了44DD91（下图的<code>call 0044F5E0</code>）。</p>
<p><span style="display:none;"><code> </code></span><img src="/2016/08/12/touhou-cheater/3.png" alt="3.png" title=""></p>
<p>在这里，死亡已经是既定事实，所以需要继续往前追溯。在44DD84处（CMP）下断点，发现要做8次比较之后才会调用44F5E0。这就是经过一小段延迟之后才播放Miss效果、残机数量减一。</p>
<p>那么44DD84处的CMP是从哪里跳过来的呢？继续跟踪，找到了44DBF8（下图的JMP）。</p>
<img src="/2016/08/12/touhou-cheater/4.png" alt="4.png" title="">
<p>JMP的目标地址不是固定的，而是与EAX有关。这大概是个指向函数的指针吧。</p>
<p>在44DBE9处（MOV）下断点，观察EAX值和那个EDI+684的地址。经过反复尝试，可以发现，EDI+684的值是0D4906CC（备注：动态分配的空间，每次都不一样），里面存着主角的状态，大概是0（无）、1（正常/金身）、2（已经挂掉）、4（正在挂掉），而且在撞弹的一瞬间，这个地址的值会变成4。</p>
<p>因此可以做出一个假设：只要阻止这个地址变成4（的子程序），主角就不会撞弹了。</p>
<p>设置条件断点，一旦向0D4906CC写入数值就中断，结果找到了44F871（下图MOV）。</p>
<img src="/2016/08/12/touhou-cheater/5.png" alt="5.png" title="">
<p>这部分应该都是和死亡判定有关的了。定位到这坨代码的开头（44F7A0），直接改成C3（RET）。OK！</p>
<p>我的<a href="https://zh.moegirl.org/zh/%E5%8D%9A%E4%B8%BD%E7%81%B5%E6%A2%A6" target="_blank" rel="external">灵梦</a>再也不怕撞弹了……</p>
<h2 id="自动捡道具"><a href="#自动捡道具" class="headerlink" title="自动捡道具"></a>自动捡道具</h2><p>这个有点歪打正着了——全凭看<a href="http://cheater.seesaa.net/article/369899074.html" target="_blank" rel="external">答案</a>和碰运气。</p>
<p>先猜一下，大概应该从捡到Power道具开始，然后再慢慢回溯。按照猜想，首先定位到了Power增长（4390DD），发现开头是4390C0，寻找CALL，于是发现了：</p>
<img src="/2016/08/12/touhou-cheater/6.png" alt="6.png" title="">
<p>注意438B4A处的JMP，有点<code>switch () { ... }</code>的意思。应该是自机捡到了一个道具，然后判断道具种类，然后给予不同的奖励。</p>
<p>往上看438B3E（MOV），这条语句说明道具种类就存在[EDI+0BF4]里面，因此处理道具的时候也一定会碰到这个地址。开启高亮功能，往前翻，直到找到另一个[EDI+0BF4]为止：</p>
<img src="/2016/08/12/touhou-cheater/7.png" alt="7.png" title="">
<p>设置断点，继续<del>泡妹子</del>打游戏，发现当道具离自机有一定距离时就会触发43897E，直到接触到道具才会触发438B3E。在438B3E前面有几个JA（下图），如果距离不够就直接跳出去了：</p>
<img src="/2016/08/12/touhou-cheater/8.png" alt="8.png" title="">
<p>这时我开始听天由命，胡乱搞了——如果能随时触发43897E处的代码，离自动捡道具不就近了一步嘛。为什么会这样想呢？不知道，反正就这样干了——至少离“参考答案”又近了一步。</p>
<p>注意上图底下有个“Jump from 438838”，就是这个样子：</p>
<img src="/2016/08/12/touhou-cheater/9.png" alt="9.png" title="">
<p>直接把“0F84”改成“2EE9”（JMP）会怎样呢？没反应。</p>
<p>再回到43897E处，发现438965也是JMP们的目标地址（438965~43897E之间没有跳转了，肯定是一块儿的）：</p>
<img src="/2016/08/12/touhou-cheater/10.png" alt="10.png" title="">
<p>啥也别说了，直接用排除法，挨个定位，把条件跳转都改成直接跳转JMP，然后回到游戏看看到底发生了什么变化：</p>
<img src="/2016/08/12/touhou-cheater/11.png" alt="11.png" title="">
<p>结果出人意料，居然自动捡道具了。</p>
<p>果然是歪打正着。我改的是438689，“参考答案”改的是4386B0，也不知道我会搞出什么副作用（补充：没有副作用——怎么改都能跳到438965那儿），毕竟我只是草草地看了一遍汇编语言教材。</p>
<p>话说回来，这回该让我的<a href="https://zh.moegirl.org/zh/%E9%9B%BE%E9%9B%A8%E9%AD%94%E7%90%86%E6%B2%99" target="_blank" rel="external">魔理沙</a>出场了吧……</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文本来是要讲“如何写作弊器”来着，结果写成了“如何寻找作弊码”……</p>
<p>为了赶紧投入到萝莉们的怀抱中，我决定，直接下载一个现成的作弊器。</p>
<img src="/2016/08/12/touhou-cheater/boring.jpg" alt="boring.jpg" title="">
<p>東方有毒啊！</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://cheater.seesaa.net/category/9478192-1.html" target="_blank" rel="external">東方改造: Nice cheat.</a><ul>
<li><a href="http://cheater.seesaa.net/article/169529488.html" target="_blank" rel="external">东方绀珠传作弊</a></li>
</ul>
</li>
<li><a href="http://tieba.baidu.com/p/1271755034" target="_blank" rel="external">永夜抄自机、bomb、power内存地址</a></li>
<li><a href="http://tieba.baidu.com/p/1270485699" target="_blank" rel="external">关于妖妖梦作弊…….</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没写程序了，甚至很久没和计算机代码打交道了。为了证明自己没被查水表，我就随便写点什么吧。&lt;/p&gt;
&lt;p&gt;最近发现了&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9D%B1%E6%96%B9Project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;東方Project&lt;/a&gt;，不幸的是，由于天生手残，就连打Easy都有些吃力（除了永夜抄和辉针城）。作为一个猥琐大叔，就这样被萝莉们欺负，能爽吗？所以，为了把她们统统&lt;a href=&quot;http://cn.uncyclopedia.wikia.com/wiki/%E6%8E%A8%E5%80%92&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;推倒&lt;/a&gt;，我要写东方的作弊器（修改器）了！&lt;/p&gt;
    
    </summary>
    
      <category term="折腾记录" scheme="https://vjudge1.github.io/categories/%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="東方Project" scheme="https://vjudge1.github.io/tags/%E6%9D%B1%E6%96%B9Project/"/>
    
      <category term="反汇编" scheme="https://vjudge1.github.io/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>从C++转向C#的快速入门教程</title>
    <link href="https://vjudge1.github.io/2016/04/02/cpp2cs/"/>
    <id>https://vjudge1.github.io/2016/04/02/cpp2cs/</id>
    <published>2016-04-01T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:37.616Z</updated>
    
    <content type="html"><![CDATA[<p>从C++过渡到C#也能很快入门。</p>
<a id="more"></a>
<p>只要你舍得你电脑C盘的空间，C#环境特别容易配置——Visual Studio。</p>
<p>如果你用的是Linux或Mac，你也可以通过装Mono来跑C#，然后拿Xamarin Studio（写安卓和iOS应用需要花钱，写本地应用不要钱）或Code（目前还没出正式版）写程序，只不过没有Windows Forms、ADO.NET以及那些乱七八糟的八百年都用不到的WPF什么的。</p>
<p>早在微软把.Net Core开源之前，就有一伙人（Mono）在模仿.Net。现在.Net开源了，所以也没什么太大区别了。</p>
<p>为了照顾Linux和Mac<span class="blackout">其实是偷懒</span>，本文直接省略Windows Forms内容——反正在这方面VB、C#、C++/CLI是一模一样的，随便捡一本书都通用<span class="blackout">其实我自己学过VB，所以还是偷懒</span>。</p>
<h1 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h1><p>在VS中新建“C#控制台工程”，然后在Program.cs中：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">Hello</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">MainClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"Hello World!"</span>);</div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了防止控制台窗口一闪而过，你可能希望在最后加一行ReadLine()。后面都一样。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="命名习惯"><a href="#命名习惯" class="headerlink" title="命名习惯"></a>命名习惯</h2><p>和C++不一样，而且C#的命名习惯比较固定，直接Google一下就知道了。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>C#将数据类型分为值类型和引用类型，大意就是当你用=赋值的时候，值类型就是在内存里开个新空间，然后把内容拷一份，而引用类型就相当于一个指针，不用Clone复制的话即使用一百个=赋值其实也只有一个实例。</p>
<p>值类型：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>.Net Framework中的名称</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>sbyte</td>
<td>System.SByte</td>
<td>-128~127</td>
</tr>
<tr>
<td>byte</td>
<td>System.Byte</td>
<td>0~255</td>
</tr>
<tr>
<td>short</td>
<td>System.Int16</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>ushort</td>
<td>System.UInt16</td>
<td>0~65535</td>
</tr>
<tr>
<td>int</td>
<td>System.Int32</td>
<td>有符号32位</td>
</tr>
<tr>
<td>uint</td>
<td>System.UInt32</td>
<td>无符号32位</td>
</tr>
<tr>
<td>long</td>
<td>System.Int64</td>
<td>有符号64位</td>
</tr>
<tr>
<td>ulong</td>
<td>System.UInt64</td>
<td>无符号64位</td>
</tr>
<tr>
<td>char</td>
<td>System.Char</td>
<td>无符号16位</td>
</tr>
<tr>
<td>float</td>
<td>System.Single</td>
<td>1.5e-45~3.4e38</td>
</tr>
<tr>
<td>double</td>
<td>System.Double</td>
<td>5.0e-324~1.7e308</td>
</tr>
<tr>
<td>decimal</td>
<td>System.Decimal</td>
<td>1.0e-28~7.9e28</td>
</tr>
<tr>
<td>bool</td>
<td>System.Boolean</td>
<td>true和false</td>
</tr>
</tbody>
</table>
<ul>
<li>枚举类型也是值类型。</li>
<li>这些类型定义出的变量和类型本身都是可以当成对象来用的。</li>
<li>引用类型：类、object（System.Object）、string（System.String）、数组、接口、委托等</li>
<li>引用类型的变量需要用new分配空间。</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>和C语言一样，使用小括号进行类型转换。</p>
<p>或者使用as关键字进行转换（as必须是引用类型。转换失败不会引发异常）：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">object</span> o = <span class="number">10</span>;</div><div class="line">T t = o <span class="keyword">as</span> T;</div></pre></td></tr></table></figure>
<p>不过像文本与字符串之间的转换是不能靠小括号实现的。这时候要借助类库了：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line"><span class="keyword">string</span> b = <span class="string">"123"</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> b2 = <span class="keyword">int</span>.Parse(b);</div><div class="line"><span class="keyword">int</span> b3 = Convert.ToInt32(b);</div><div class="line"><span class="keyword">string</span> a2 = a.ToString();</div><div class="line"><span class="keyword">string</span> a3 = Convert.ToString(a);</div></pre></td></tr></table></figure>
<p>不过这些转换如果失败那是要引发异常的。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>函数参数默认情况下是值类型按值传递，引用类型按引用传递。</p>
<p>不过值类型的传递方式是可以改的，例如：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">HelloCS</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">MainClass</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun1</span>(<span class="params"><span class="keyword">ref</span> <span class="keyword">int</span> i</span>) </span>&#123;</div><div class="line">            i = <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">int</span> i</span>) </span>&#123;</div><div class="line">            i = <span class="number">20</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line">            fun1(<span class="keyword">ref</span> a);        <span class="comment">// 不能丢掉ref</span></div><div class="line">            System.Console.WriteLine(a);</div><div class="line">            fun2(<span class="keyword">out</span> a);        <span class="comment">// 不能丢掉out</span></div><div class="line">            System.Console.WriteLine(a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ref（引用参数）相当于引用，out（输出参数）也差不多。</p>
<p>此外还有一个params，可接受任意个参数，相当于C++里的“…”。它必须是最后一个参数，且为一维数组。</p>
<h2 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h2><p>C#没有指针和引用。不过在函数参数中可以用类似的东西——ref。</p>
<p>成员访问没有“-&gt;”，只有“.”运算符。</p>
<h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><p>和C++一样，不过if和while的括号里的东西得是严格的bool类型。</p>
<p>foreach语句：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> a <span class="keyword">in</span> b)</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>C#的switch语句中，至少要有一个跳出switch结构的语句，例如goto、throw、return、break。</p>
<h2 id="using"><a href="#using" class="headerlink" title="using"></a>using</h2><p>using语句块用于获取一个或多个资源，语句块结束之后释放。对象需要实现IDisposable接口。</p>
<p>例如：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">A</span> : <span class="title">IDisposable</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(<span class="string">"Hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">void</span> IDisposable.Dispose()</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(<span class="string">"释放资源"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="keyword">using</span> (A a = <span class="keyword">new</span> A())</div><div class="line">&#123;</div><div class="line">    a.fun();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>语法和C++略有区别——权限修饰符要跟上：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params"><span class="keyword">int</span> <span class="keyword">value</span></span>)</span></div><div class="line">    &#123;</div><div class="line">        n = <span class="keyword">value</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        n = <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>挂上sealed关键字可防止被继承。</p>
<h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><p>和C++差不多。</p>
<ul>
<li>不要写复制构造函数——去实现ICloneable接口吧！</li>
<li>构造函数可以挂static。这样的话在第一次碰到这个类的时候会执行。</li>
</ul>
<h2 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h2><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>可使用static、readonly等修饰。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>;</div></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>static、virtual是相同的。</p>
<p>列出几个和C++不同的地方：</p>
<ul>
<li>用virtual声明为虚方法（在C++里叫虚函数），重写虚方法时要写上override关键字。</li>
<li>用sealed override防止被重写。</li>
<li>用abstract表示抽象方法（相当于C++的纯虚函数）。这种类在定义时，class前面也要跟abstract关键字。</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性是一个比较特殊的东西，它可以让setter和getter形式变得很简单——想想Java是怎样写的就知道了……</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">string</span> Name</div><div class="line">&#123;</div><div class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</div><div class="line">    <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假设这个类有个实例叫做a，那么赋值直接就是<code>a.Name = &quot;xxx&quot;;</code>，取值则是<code>a.Name</code>。</p>
<h3 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h3><p>就是可以用“[]”来访问——</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">string</span> <span class="keyword">this</span>[<span class="keyword">int</span> index]</div><div class="line">&#123;</div><div class="line">    <span class="keyword">get</span> &#123; <span class="keyword">return</span> ...; &#125;</div><div class="line">    <span class="keyword">set</span> &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>见后面的“委托”。</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>C#可以重载运算符。以下是与C++的不同之处：</p>
<ul>
<li>运算符必须为public static成员。</li>
<li>不能重载各种赋值、&amp;&amp;、||、new。</li>
<li>不能重载[]，但是可以定义索引器——也算是重载了吧。</li>
<li>比较运算符必须成对重载：==和!=、&lt;和&gt;、&lt;=和&gt;=。重载其中一个的话必须同时重载另一个。</li>
<li>重载类型转换运算符时要挂上explicit（要求强制转换）或implicit（可以隐式转换）关键字。</li>
</ul>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>namespace定义命名空间，using引用。</p>
<p>using可定义别名，例如</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> WF = System.Forms;</div></pre></td></tr></table></figure>
<h2 id="分部类型"><a href="#分部类型" class="headerlink" title="分部类型"></a>分部类型</h2><p>一个类的内容可以被分割到多个文件当中——只要都挂上partial关键字就行了。编译时它们的内容会自动被合并到一起。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>C#的继承也是用冒号表示。</li>
<li>C#不支持多继承，也不支持挂private、protected什么的。</li>
<li>在实例化子类时，基类的构造函数会被自动调用。</li>
<li>用base表示基类。</li>
<li>如果直接覆盖基类的某个成员，需要加new关键字。要么就用虚函数。</li>
</ul>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>和C++差不多，不过在子类实现时要加override关键字。</p>
<p>C++的纯虚函数在C#里叫做抽象方法，用abstract关键字修饰。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>C#也有struct，不过功能弱化很多。</p>
<p>结构是值类型（内存分配在堆栈上，而且使用时不需要new），不支持无参数的构造函数，不能继承，但可以实现接口。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>如果一个类里面全是抽象函数，那么这个类也可以定义成接口。例如：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Testable</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Test</span>(<span class="params"></span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">string</span> <span class="title">Result</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口支持多继承。</p>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托有点像C++里的函数指针，但还有些区别——委托是一个类。</p>
<h3 id="定义和使用委托"><a href="#定义和使用委托" class="headerlink" title="定义和使用委托"></a>定义和使用委托</h3><p>简单例子：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">MyDelegate</span>(<span class="params"><span class="keyword">int</span> i</span>)</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Fun</span>(<span class="params"><span class="keyword">int</span> i</span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> i * <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            MyDelegate d1 = <span class="keyword">new</span> MyDelegate(Program.Fun);</div><div class="line">            <span class="keyword">int</span> r = d1(<span class="number">20</span>);</div><div class="line">            Console.WriteLine(r);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h3><p>委托可以使用+和-运算符。这样通过一个委托就可以依次执行多个方法。例如：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"></span>)</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F1</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"F1"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">F2</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"F2"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            MyDelegate d1 = <span class="keyword">new</span> MyDelegate(Program.F1);</div><div class="line">            MyDelegate d2 = <span class="keyword">new</span> MyDelegate(Program.F2);</div><div class="line">            MyDelegate d3 = d1 + d2;</div><div class="line">            d3();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><p>类似观察者模式，但是“事件”在语法上使其变得简单很多——用不着定义一堆复杂的类。</p>
<p>事件通过委托实现。</p>
<p>示例：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">EventTest</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 声明事件</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler Change;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> N</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> n; &#125;</div><div class="line">            <span class="keyword">set</span></div><div class="line">            &#123;</div><div class="line">                n = <span class="keyword">value</span>;</div><div class="line">                <span class="comment">// 调用事件</span></div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.Change != <span class="literal">null</span>)</div><div class="line">                &#123;</div><div class="line">                    Change(<span class="keyword">this</span>, <span class="literal">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">A_Change</span>(<span class="params"><span class="keyword">object</span> sender, EventArgs e</span>)</span></div><div class="line">        &#123;</div><div class="line">            Console.WriteLine(<span class="string">"N被改变"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            EventTest a = <span class="keyword">new</span> EventTest();</div><div class="line">            <span class="comment">// 注册事件</span></div><div class="line">            a.Change += A_Change;</div><div class="line"></div><div class="line">            <span class="comment">// 改变N时会触发事件</span></div><div class="line">            a.N = <span class="number">5</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 移除事件</span></div><div class="line">            a.Change -= A_Change;</div><div class="line"></div><div class="line">            <span class="comment">// 没有提示</span></div><div class="line">            a.N = <span class="number">6</span>;</div><div class="line"></div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>类似C++的模板，不过在C#里不能扔非类型形参。</p>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">public class A&lt;T&gt;</div><div class="line">&#123;</div><div class="line">    private T n;</div><div class="line">    public T Fun()</div><div class="line">    &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> fun&lt;T&gt;(T a)</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">x.fun&lt;<span class="keyword">int</span>&gt;(<span class="number">12</span>);</div></pre></td></tr></table></figure>
<p>泛型方法也支持abstract、virtual、override和委托。</p>
<h3 id="类型形参的约束"><a href="#类型形参的约束" class="headerlink" title="类型形参的约束"></a>类型形参的约束</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">public class A&lt;T&gt; where T : struct</div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>常用的约束有：</p>
<ul>
<li>struct：必须是值类型（但不是Nullable）</li>
<li>class：必须是引用类型</li>
<li>new()：必须有无参数的构造函数</li>
<li>基类名称：必须是这个基类或者其派生类。</li>
<li>接口名称：必须实现指定的接口。</li>
<li>T：假如为<code>A&lt;T1, T2&gt; where T2 : T1</code>，那么T2的类型必须是T1或由T1派生。</li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr;</div><div class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</div></pre></td></tr></table></figure>
<p>若不初始化，则元素初值为其类型默认值。</p>
<p>遍历：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++)</div><div class="line">&#123;</div><div class="line">    System.Console.WriteLine(arr[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">foreach</span> (<span class="keyword">int</span> i <span class="keyword">in</span> arr)</div><div class="line">&#123;</div><div class="line">    System.Console.WriteLine(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[,] arr;</div><div class="line"><span class="keyword">int</span>[,] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>,<span class="number">3</span>];</div></pre></td></tr></table></figure>
<h2 id="交错数组"><a href="#交错数组" class="headerlink" title="交错数组"></a>交错数组</h2><p>交错数组即数组的数组。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][];</div></pre></td></tr></table></figure>
<h2 id="System-Array"><a href="#System-Array" class="headerlink" title="System.Array"></a>System.Array</h2><p>数组的实质是Array类实例。</p>
<p>该类有一个属性Length可获取数组长度。此外该类还有若干静态方法：BinarySearch()、Clear()、Clone()、ConstrainedCopy()、Copy()、FindIndex()、FindLastIndex()、GetUpperBound()、Reverse()、Sort()等。</p>
<h2 id="System-ArrayList"><a href="#System-ArrayList" class="headerlink" title="System.ArrayList"></a>System.ArrayList</h2><p>ArrayList是动态数组。通过其Add()、Insert()、Remove()、RemoveAt()、RemoveRange()等方法进行操作。</p>
<h1 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h1><p>语法糖就是对语言功能没什么影响，但写起来会方便一些的东西。</p>
<h2 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h2><p>可空类型就是可以赋值为null的类型。本质是System.Nullable<t>。</t></p>
<p>定义一个可空类型的变量有两种方法：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line">System.Nullable&lt;<span class="keyword">int</span>&gt; a;</div><div class="line"><span class="keyword">int</span>? b;</div></pre></td></tr></table></figure>
<p>获取可空类型的值：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>? a = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> b;</div><div class="line"></div><div class="line"><span class="comment">// 方法一</span></div><div class="line"><span class="keyword">if</span> (a.HasValue)</div><div class="line">&#123;</div><div class="line">    b = a.Value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方法二</span></div><div class="line">b = a.GetValueOrDefault(<span class="number">10</span>);</div></pre></td></tr></table></figure>
<p>bool?类型的真值表（bool?不能使用&amp;&amp;、||）：</p>
<table>
<thead>
<tr>
<th>x</th>
<th>y</th>
<th>x &amp; y</th>
<th>x \</th>
<th>y</th>
</tr>
</thead>
<tbody>
<tr>
<td>true</td>
<td>null</td>
<td>null</td>
<td>true</td>
</tr>
<tr>
<td>false</td>
<td>null</td>
<td>false</td>
<td>null</td>
</tr>
<tr>
<td>null</td>
<td>null</td>
<td>null</td>
<td>null</td>
</tr>
</tbody>
</table>
<p>如果a为null，那么!a的结果仍是null。</p>
<h2 id="匿名类型"><a href="#匿名类型" class="headerlink" title="匿名类型"></a>匿名类型</h2><p>var语句可以自动推断类型，例如</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">10</span>;         <span class="comment">// int</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</div></pre></td></tr></table></figure>
<p>通过var可以定义匿名类型：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> &#123; ID = <span class="number">1</span>, Name = <span class="string">"Alice"</span> &#125;;</div><div class="line">Console.WriteLine(stu.ID);</div></pre></td></tr></table></figure>
<p>如果不同匿名类型的属性相同，属性的顺序也相同，则会被视为同一类型。</p>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式是一种方便书写的匿名函数，也属于委托。例如：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">delegate</span> <span class="keyword">int</span> <span class="title">D</span>(<span class="params"><span class="keyword">int</span> m</span>)</span>;</div><div class="line">...</div><div class="line">D fun = (m) =&gt; m * m;</div><div class="line"><span class="keyword">int</span> a = fun(<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>通常不需要在Lambda表达式里指定参数类型。如果编译器难以推断，也可手动指定。</p>
<p>如果表达式中有多条语句，用花括号{}包一下就好。</p>
<p>如果一个函数的参数要求是委托、Expression类型或Func类型，那么也可传入Lambda表达式，例如统计偶数个数（需要<code>using System.Linq</code>）：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</div><div class="line">Console.WriteLine(arr.Count((x) =&gt; x % <span class="number">2</span> == <span class="number">0</span>));</div></pre></td></tr></table></figure>
<h2 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h2><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line">button.Click += <span class="keyword">delegate</span>(<span class="keyword">object</span> sender, EventArgs e)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(<span class="string">"这是匿名方法"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名方法也可以作为参数来传递。</p>
<h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><p>LINQ查询表达式允许像SQL语句一样操作一个集合（实现IEnumerable接口就行）。</p>
<p>举几个例子感受一下：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">11</span>&#125;;</div><div class="line"><span class="comment">// 挑出大于等于10的数</span></div><div class="line"><span class="keyword">var</span> query1 = <span class="keyword">from</span> n <span class="keyword">in</span> arr <span class="keyword">where</span> n &gt;= <span class="number">10</span> <span class="keyword">select</span> n;</div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> query1)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 挑出其中的大于4的数，按照奇偶性分成两组，并降序排列</span></div><div class="line"><span class="keyword">var</span> query2 =</div><div class="line">    <span class="keyword">from</span> n <span class="keyword">in</span> arr</div><div class="line">    <span class="keyword">let</span> isOdd = (n % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">    <span class="keyword">where</span> n &gt; <span class="number">4</span></div><div class="line">    <span class="keyword">orderby</span> n <span class="keyword">descending</span></div><div class="line">    <span class="keyword">group</span> n <span class="keyword">by</span> isOdd;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> a <span class="keyword">in</span> query2)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a)</div><div class="line">    &#123;</div><div class="line">        Console.WriteLine(i);</div><div class="line">    &#125;</div><div class="line">    Console.WriteLine();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一个用来联接两个数据源的join子句：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</div><div class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span> &#125;;</div><div class="line"></div><div class="line"><span class="comment">// 内部联接</span></div><div class="line"><span class="keyword">var</span> query = <span class="keyword">from</span> a <span class="keyword">in</span> arr1</div><div class="line">            <span class="keyword">join</span> b <span class="keyword">in</span> arr2 <span class="keyword">on</span> a <span class="keyword">equals</span> b</div><div class="line">            <span class="keyword">select</span> a;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> n <span class="keyword">in</span> query)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 分组联接</span></div><div class="line"><span class="keyword">var</span> query2 = <span class="keyword">from</span> a <span class="keyword">in</span> arr1</div><div class="line">             <span class="keyword">join</span> b <span class="keyword">in</span> arr2 <span class="keyword">on</span> a <span class="keyword">equals</span> b <span class="keyword">into</span> g</div><div class="line">             <span class="keyword">select</span> <span class="keyword">new</span></div><div class="line">             &#123;</div><div class="line">                 A = a,</div><div class="line">                 B = g</div><div class="line">             &#125;;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> query2)</div><div class="line">&#123;</div><div class="line">    Console.Write(<span class="string">"&#123;0&#125;: "</span>, item.A);</div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> item.B)</div><div class="line">    &#123;</div><div class="line">        Console.Write(<span class="string">"&#123;0&#125; "</span>, i);</div><div class="line">    &#125;</div><div class="line">    Console.WriteLine();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 左外部联接</span></div><div class="line"><span class="keyword">var</span> query3 = <span class="keyword">from</span> a <span class="keyword">in</span> arr1</div><div class="line">             <span class="keyword">join</span> b <span class="keyword">in</span> arr2 <span class="keyword">on</span> a <span class="keyword">equals</span> b <span class="keyword">into</span> g</div><div class="line">             <span class="keyword">from</span> ab <span class="keyword">in</span> g.DefaultIfEmpty()</div><div class="line">             <span class="keyword">select</span> ab;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> n <span class="keyword">in</span> query3)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘了<code>using System.Linq;</code></p>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>捕获异常：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">try</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception ex)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(ex.Message);</div><div class="line">&#125;</div><div class="line"><span class="keyword">finally</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义异常应当继承System.Exception类。</p>
<p>抛出异常同样是throw语句。</p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>String是不变字符串。String有很多属性和方法：</p>
<ul>
<li>Chars属性</li>
<li>Length属性</li>
<li>Insert()：插入字符串。返回值为处理之后的字符串，下同。</li>
<li>Remove()</li>
<li>Replace()</li>
<li>Concat()</li>
<li>static Join()</li>
<li>Split()：返回值是数组</li>
<li>PadLeft()/PadRight()</li>
<li>IndexOf()</li>
<li>Substring()</li>
<li>static Format()：格式化字符串。使用的是<code>{0}</code>一类的格式。</li>
</ul>
<h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><p>StringBuilder类似于C++的stringstream，适合频繁修改的字符串。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line">StringBuilder strb = <span class="keyword">new</span> StringBuilder();</div><div class="line">strb.Append(<span class="string">"Hello"</span>);</div><div class="line">strb.Append(<span class="string">"World"</span>);</div><div class="line">Console.WriteLine(strb);</div></pre></td></tr></table></figure>
<p>StringBuilder也有一些属性和方法：</p>
<ul>
<li>Length属性</li>
<li>Capacity属性</li>
<li>MaxCapacity属性</li>
<li>Chars属性</li>
<li>Insert()</li>
<li>Append()</li>
<li>Remove()</li>
<li>Replace()</li>
<li>CopyTo()</li>
</ul>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 简单测试</span></div><div class="line">Console.WriteLine(Regex.IsMatch(<span class="string">"Helloworld"</span>, <span class="string">@"\w+"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 匹配和提取</span></div><div class="line">MatchCollection mc = Regex.Matches(<span class="string">"a=0\nb=1"</span>, <span class="string">@"(\w+)=(.+?)"</span>);</div><div class="line"><span class="keyword">foreach</span> (Match m <span class="keyword">in</span> mc)</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(<span class="string">"&#123;0&#125;: &#123;1&#125;"</span>, m.Groups[<span class="number">1</span>], m.Groups[<span class="number">2</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 替换</span></div><div class="line"><span class="keyword">string</span> r1 = Regex.Replace(<span class="string">"The code is 12345"</span>, <span class="string">"[a-z]"</span>, <span class="string">""</span>);</div><div class="line"><span class="comment">// 小写字母统统变成十六进制ASCII码</span></div><div class="line"><span class="keyword">string</span> r2 = Regex.Replace(<span class="string">"The code is 12345"</span>, <span class="string">"[a-z]"</span>,</div><div class="line">    (Match match) =&gt; Convert.ToString(Convert.ToChar(match.Value), <span class="number">16</span>));</div><div class="line">Console.WriteLine(r1);</div><div class="line">Console.WriteLine(r2);</div></pre></td></tr></table></figure>
<p>既可以使用Regex的静态函数，也可将其实例化。</p>
<p>最后别忘了</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</div></pre></td></tr></table></figure>
<h1 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期/时间"></a>日期/时间</h1><p>日期时间（时刻）可以用DateTime结构表示，时间间隔用TimeSpan结构表示。</p>
<p>DateTime和TimeSpan有很多属性和方法，可以获取和设置各个细节、追加时间。因为VS的智能感知很强大<span class="blackout">明明是偷懒</span>，这里就不列举了。</p>
<p>获取当前时间：<code>DateTime.Now</code>和<code>DateTime.UtcNow</code></p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>首先，</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div></pre></td></tr></table></figure>
<h2 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h2><p>这些容器都不是线程安全的。</p>
<ul>
<li>List</li>
<li>LinkedList</li>
<li>Stack</li>
<li>Queue</li>
<li>SortedSet</li>
<li>SortedList</li>
<li>SortedDictionary</li>
<li>HashSet</li>
<li>Dictionary</li>
</ul>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>如果想让一个类可以通过foreach进行迭代，则需要实现IEnumerable接口，实现GetEnumerator()方法，然后用yield return语句送值（yield break表示迭代中止）。如果是泛型类，把泛型加上就行。</p>
<p>示例：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Collections;</div><div class="line"><span class="keyword">using</span> System.Collections.Generic;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">class</span> <span class="title">Fib</span> : <span class="title">IEnumerable</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>(<span class="params"></span>)</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">1</span>, z;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">            &#123;</div><div class="line">                z = x + y;</div><div class="line">                x = y;</div><div class="line">                y = z;</div><div class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> y;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">class</span> <span class="title">Program</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></div><div class="line">        &#123;</div><div class="line">            Fib fib = <span class="keyword">new</span> Fib();</div><div class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> fib)</div><div class="line">            &#123;</div><div class="line">                Console.WriteLine(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用IEnumerator：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><div class="line">IEnumerator ie = fib.GetEnumerator();</div><div class="line"><span class="keyword">while</span> (ie.MoveNext())</div><div class="line">&#123;</div><div class="line">    Console.WriteLine(ie.Current);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刚GetEnumerator()时，指针指在第一个元素的前面（Current为null）。用Reset()可以恢复到这个位置。</p>
<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>主要有FileStream、MemoryStream和BufferedStream。</p>
<p>这些类既支持读取又支持写入，既支持同步又支持异步。用智能感知就知道那些方法叫什么名字了<span class="blackout">又偷懒</span>。</p>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>主要集中在File类中，基本上都是静态方法。</p>
<p>FileInfo可以获取文件信息，同时也能操作文件。读写时通过FileInfo创建实例，打开文件，然后用FileStream操作就行了。</p>
<p>类似地，Directory和DirectoryInfo类就是操作目录的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从C++过渡到C#也能很快入门。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="C#" scheme="https://vjudge1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>从C++转向Java的快速入门教程</title>
    <link href="https://vjudge1.github.io/2016/03/31/cpp2java/"/>
    <id>https://vjudge1.github.io/2016/03/31/cpp2java/</id>
    <published>2016-03-30T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:44.609Z</updated>
    
    <content type="html"><![CDATA[<p>如果学过C++，那么从C++过渡到Java很快就能入门。</p>
<a id="more"></a>
<p>因为网上有一大堆介绍配置Java开发环境的教程，本文就不再复述了。</p>
<p>推荐一个好用的IDE——IntelliJ IDEA。这个IDE分为社区版和旗舰版，旗舰版要花钱<span class="blackout">网上一堆激活服务器，随便挑一个就能激活。</span>，社区版免费而且开源，只不过社区版不支持Web开发。</p>
<h1 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h1><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>C++和Java都需要编译才能运行，不同的是，Java程序是编译成中间码，然后由Java虚拟机运行。这也是实现“write once, run anywhere”的技术基础。</p>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>C++需要手动实现垃圾回收，而Java是自动垃圾回收。虚拟机内部维护一个计数器，当引用计数为零之后自动释放实例的存储空间。</p>
<p>因为自动垃圾回收，所以Java的对象几乎不需要析构函数，但是在驻守型程序中仍然需要注意内存泄漏问题。</p>
<h1 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h1><ul>
<li>源代码：.java</li>
<li>编译后的中间文件：.class</li>
<li>.jar：将若干中间文件按照包的结构打成zip包之后的文件。</li>
</ul>
<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1><p>将文件命名为Hello.java，然后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">          System.out.println(<span class="string">"Hello, world!"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行：</p>
<pre><code>javac Hello.java
java Hello
</code></pre><p>如果有 package：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> com.hello;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">          System.out.println(<span class="string">"Hello, world!"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文件要保存为 <code>com/hello/Hello.java</code></p>
<p>编译运行：</p>
<pre><code>javac com/hello/Hello.java
java com.hello.Hello
</code></pre><p>注意两点：</p>
<ol>
<li>Java里一切都是对象。main是通过类的静态函数实现的。</li>
<li>类名称和文件名要一致，而“包”要和目录名一致。</li>
</ol>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="命名习惯"><a href="#命名习惯" class="headerlink" title="命名习惯"></a>命名习惯</h2><p>和C++不一样，而且Java的命名习惯比较固定，直接Google一下就知道了。</p>
<p>大概是这样：</p>
<ol>
<li>变量等名称用小驼峰，类名、接口名等用大驼峰；</li>
<li>类中的字段用 getter 和 setter 包装。</li>
</ol>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>Java的数据类型分为基本数据类型和对象类型。</li>
<li>基本数据类型包括：boolean、byte、short、int、long、char、float、double。没有signed和unsigned关键字。</li>
<li>一切对象类型都继承自Object类，包括字符串String。</li>
<li>基本数据类型都是值类型，除此之外（包括类、数组等）全部都是引用类型。这两个概念的大意就是当你用=赋值的时候，值类型就是在内存里开个新空间，然后把内容拷一份，而引用类型就相当于是指针，不用clone复制的话即使用一百个=赋值其实也只有一个实例。</li>
<li>引用类型需要用new分配空间之后才能用，数组也是。</li>
<li>final相当于C++里的const：<code>final int N=10;</code></li>
<li>Java支持Unicode，变量名甚至可以使用汉字！</li>
<li>强制类型转换使用圆括号。</li>
</ul>
<h2 id="条件与循环"><a href="#条件与循环" class="headerlink" title="条件与循环"></a>条件与循环</h2><p>条件语句和循环语句和C++是一样的。但是，括号内的表达式必须是严格的boolean类型。</p>
<p>此外Java的for有一种foreach语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i: arr) &#123;</div><div class="line">    System.out.println(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="指针和引用"><a href="#指针和引用" class="headerlink" title="指针和引用"></a>指针和引用</h2><p>Java没有指针。除了几个基本数据类型以外，其他类型全都相当于指针或引用。</p>
<p>成员访问没有“::”和“-&gt;”，只有“.”运算符。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>因为一切都是面向对象编程，所以调用函数时也要按照面向对象的方法——要么建立一个实例，要么统统static。</p>
<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>和C++略有不同——权限修饰符要跟上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line"></div><div class="line">    Hello() &#123;</div><div class="line">        <span class="keyword">this</span>.n = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Hello(<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="keyword">this</span>.n = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setN</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getN</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.n;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">A a = <span class="keyword">new</span> A();</div></pre></td></tr></table></figure>
<p>Java会自动对成员变量进行初始化，但不会对局部变量（在栈中分配）初始化。</p>
<p>权限修饰符有四种：什么都不写、private、protected和public，可见范围与包有关。</p>
<h2 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h2><ul>
<li>构造函数和C++差不多。</li>
<li>因为自动垃圾回收，所以Java的对象几乎不需要析构函数。</li>
<li>因为类是引用类型，所以不要写复制构造函数——重载clone()会更好。</li>
<li>如果想使用本类签名不同的构造函数，用this(xxx)。</li>
</ul>
<h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>和C++一样。但是有一点很坑——Java不能重载运算符（所以那堆ACMer一定对大数感到很不爽……）</p>
<p>Java不支持给函数参数设默认值。Java认为，重载已经足以解决这个问题了。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>和C++差不多。不过，Java中可以用static塞代码块，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">     A() &#123;</div><div class="line">          System.out.println(<span class="string">"A()"</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">static</span> &#123;</div><div class="line">          System.out.println(<span class="string">"static"</span>);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在调用构造函数之前会依次执行代码块中的代码。</p>
<h2 id="package和import"><a href="#package和import" class="headerlink" title="package和import"></a>package和import</h2><p>在工程中，你的类应该指定一个目录层次，即package语句。把一堆package编译之后整理到一个压缩包中，就产生了jar文件。当然这个工作是用命令完成的。</p>
<p>使用来自其他模块（准确地说，应该叫做包）的类或函数时，需要先import。</p>
<p>如果嫌懒可以用星星，例如<code>import java.util.*;</code>，不过这不见得是好事儿。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>类里面套一个类。内部类可以直接访问外部类的所有成员（当然别忘了 static 和实例化的问题）。注意this。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">int</span> n=<span class="number">0</span>;          <span class="comment">// 1</span></div><div class="line">     <span class="keyword">public</span> Inner &#123;</div><div class="line">          <span class="keyword">private</span> <span class="keyword">int</span> n=<span class="number">1</span>;     <span class="comment">// 2</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">int</span> n=<span class="number">2</span>;        <span class="comment">// 3</span></div><div class="line">               System.out.println(n);               <span class="comment">// 3</span></div><div class="line">               System.out.println(<span class="keyword">this</span>.n);          <span class="comment">// 2</span></div><div class="line">               System.out.println(Outer.<span class="keyword">this</span>.n);    <span class="comment">// 1</span></div><div class="line">          &#125;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Outer outer = <span class="keyword">new</span> Outer();</div><div class="line">Outer.Inner inner = outer.new Inner();</div><div class="line"></div><div class="line">Outer.Inner inner = <span class="keyword">new</span> Outer().new Inner();</div></pre></td></tr></table></figure>
<h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p>匿名类是没有名字的类，它是final类（不能被继承和重写）。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    Hello (<span class="keyword">int</span> i) &#123;</div><div class="line">        System.out.println(<span class="string">"Hello()"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hello.fun()"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a=<span class="number">1</span>;</div><div class="line">        Hello h = <span class="keyword">new</span> Hello(a) &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"nofun"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        h.fun();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>匿名类会产生一个类似 JavaScript 的闭包，但在匿名类内部只能访问已经 final 的外部变量。</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java不支持多继承，也不支持挂private、protected什么的。</p>
<p>在实例化子类时，基类的构造函数会被自动调用。可以使用super()显式调用基类构造函数（还有一个this()，是自己的其他签名的构造函数）。</p>
<h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>Java没有虚函数的概念——只要没挂上final关键字，都相当于是虚函数。</p>
<h2 id="抽象类和抽象函数"><a href="#抽象类和抽象函数" class="headerlink" title="抽象类和抽象函数"></a>抽象类和抽象函数</h2><p>抽象函数相当于C++里的纯虚函数，使用abstract修饰。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果类里面有抽象函数，自然地这个类也要挂abstract。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>如果一个抽象类的所有方法都是抽象的，也可以定义成接口。</p>
<p>Java不支持多继承，但支持实现多个接口。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Testable</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> id=<span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Helloable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Testable</span>, <span class="title">Helloable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>给class挂上final，它就不能再被继承。给函数挂上final，它就不能再被重写。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>此处只提一个@Override：保证所定义的函数一定是重写基类的，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>所有类都继承了Object。</p>
<ul>
<li>Object的equals()方法用于判断是否为同一实例。不过，String等类重写了equals方法，用于比较变量的值是否相等。所以<strong>比较字符串是否相等要用equals()而不是“==”。</strong></li>
<li>hashCode()用于生成散列码。</li>
<li>toString()不解释了。</li>
<li>clone()：用=赋值只是一个引用，用clone才是副本。</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Java中字符串不是“字符的数组”。</p>
<ul>
<li>int length()</li>
<li>char charAt(int)</li>
<li>int compareTo(String)：不要用“&lt;”、“&gt;”比较字符串大小！</li>
<li>String concat(String)</li>
<li>boolean equals(String)：不要用“==”和“!=”判断字符串是否相等！</li>
<li>int indexOf(int)、int indexOf(String)、int lastIndexOf(int)、int lastIndexOf(String)</li>
<li>String toUpperCase()、String toLowerCase()</li>
<li>String trim()</li>
<li>String substring(int)、String substring(int, int)</li>
<li>String[] split(String)</li>
<li>static String valueOf()：基本数据类型变String。</li>
</ul>
<h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p>相当于stringstream。如果不需要线程，也可使用StringBuilder。</p>
<ul>
<li>append()</li>
<li>insert()</li>
<li>delete()</li>
<li>reverse()</li>
</ul>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><table>
<thead>
<tr>
<th>基本数据类型</th>
<th>对应的包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td> boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td> byte</td>
<td>Byte</td>
</tr>
<tr>
<td> char</td>
<td>Character</td>
</tr>
<tr>
<td> short</td>
<td>Short</td>
</tr>
<tr>
<td> int</td>
<td>Integer</td>
</tr>
<tr>
<td> long</td>
<td>Long</td>
</tr>
<tr>
<td> float</td>
<td>Float</td>
</tr>
<tr>
<td> double</td>
<td>Double</td>
</tr>
</tbody>
</table>
<p>包装类可以自动装箱和自动拆箱，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Integer i=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> j=i;</div><div class="line"><span class="keyword">int</span> k=i+j;</div></pre></td></tr></table></figure>
<p>将字符串转为基本类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a = Integer.parseInt(<span class="string">"20"</span>);</div></pre></td></tr></table></figure>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>数学函数都在这里面。</p>
<h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>用于生成随机数。需要实例化（可以带种子）然后再nextInt()、nextDouble()什么的。</p>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><ul>
<li>Date类存储日期。</li>
<li>DataFormat类表示格式，是抽象类，使用DateFormat.getDateTimeInstance()获取一些标准的格式。使用parse()方法解析。</li>
<li>Calendar类可以获取日期的某一部分，或者进行计算。</li>
</ul>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 判断是否匹配。不用import</span></div><div class="line">        System.out.println(<span class="string">"Helloworld"</span>.matches(<span class="string">"\\w+"</span>));</div><div class="line"></div><div class="line">        Pattern p = Pattern.compile(<span class="string">"(\\w+)=(.+?)"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 匹配和提取</span></div><div class="line">        Matcher m = p.matcher(<span class="string">"a=0\nb=1"</span>);</div><div class="line">        <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">            System.out.println(m.group(<span class="number">1</span>) + <span class="string">":"</span> + m.group(<span class="number">2</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 替换</span></div><div class="line">        Pattern p2 = Pattern.compile(<span class="string">"test"</span>, Pattern.CASE_INSENSITIVE);</div><div class="line">        Matcher m2 = p2.matcher(<span class="string">"hello test java TEst c++"</span>);</div><div class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">while</span> (m2.find()) &#123;</div><div class="line">            m2.appendReplacement(buf, <span class="string">"***"</span>);</div><div class="line">        &#125;</div><div class="line">        m2.appendTail(buf);</div><div class="line">        System.out.println(buf);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>通过各种next()可以从一堆乱七八糟的文本中提取基本数据类型。例如经典的A+B问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">APlusB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Scanner cin = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> a, b;</div><div class="line">        a = cin.nextInt();</div><div class="line">        b = cin.nextInt();</div><div class="line">        System.out.println(a+b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>异常包括必须要检查的异常和非检查的异常（Error和RuntimeException）。如果程序没有对必须要检查的异常进行处理，编译器会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">int</span> c = System.in.read();</div><div class="line">        <span class="keyword">if</span> (c != <span class="string">'a'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Please Input a"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ThrowTest a = <span class="keyword">new</span> ThrowTest();</div><div class="line">            <span class="keyword">int</span> n = a.read();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            System.out.println(ex);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            System.out.println(<span class="string">"End"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在继承时，在子类方法中的声明抛出异常不能比基类的多。</p>
<p>自定义异常通常继承Exception类。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a[];</div><div class="line"><span class="keyword">int</span> [] a;</div><div class="line"><span class="comment">// int a[100];     // 错误</span></div><div class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</div></pre></td></tr></table></figure>
<p>二维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a[][];</div><div class="line"><span class="keyword">int</span> [][] a;</div><div class="line"><span class="comment">// int a[100][100];     // 错误</span></div><div class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>][<span class="number">100</span>];</div><div class="line"><span class="keyword">int</span>[][] a = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; &#125;;</div><div class="line"><span class="keyword">int</span>[][] a = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, &#123;<span class="number">2</span>,<span class="number">3</span>&#125; &#125;;</div></pre></td></tr></table></figure>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>普通方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++) &#123;</div><div class="line">    System.out.println(a[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>foreach语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i: a) &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>二维数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] a = &#123; &#123;<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>&#125;,&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">15</span>&#125;,&#123;<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>&#125; &#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;a[i].length; j++) &#123;</div><div class="line">        System.out.println(a[i][j]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line">...</div><div class="line"><span class="comment">// 复制</span></div><div class="line">System.arraycopy(src, srcPos, dest, destPos, length);</div><div class="line"></div><div class="line"><span class="comment">// 排序</span></div><div class="line">Arrays.sort(a);</div><div class="line"></div><div class="line"><span class="comment">// 二分查找。找不到则返回-1。</span></div><div class="line">Arrays.binarySearch(array, key);</div></pre></td></tr></table></figure>
<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Week &#123;</div><div class="line">    SUNDAY, MONDAY, TUESDAY, WEDNESDAY;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Week week = Week.MONDAY;</div></pre></td></tr></table></figure>
<p>enum的本质是一个final的class，所以也可以有成员方法、构造函数（但必须private）、代码块等。使用 enum 可以很容易地实现一个线程安全的单例。</p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>Iterator、Collection都是接口，而List、Set、Queue是基于Collection的接口。</p>
<h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><p>Collections是一个类，提供了几个实用方法，例如copy、fill、nCopies、shuffle、sort、min、max、binarySearch等。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>常用的List包括ArrayList和LinkedList。</p>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>相当于C++中的vector。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line"><span class="comment">// 添加</span></div><div class="line">list.add(<span class="string">"C"</span>);</div><div class="line">list.add(<span class="string">"A"</span>);</div><div class="line">list.add(<span class="string">"B"</span>);</div><div class="line">list.add(<span class="string">"D"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 删除</span></div><div class="line">System.out.println(list.remove(<span class="number">3</span>));</div><div class="line"></div><div class="line"><span class="comment">// 访问</span></div><div class="line">System.out.println(list.get(<span class="number">2</span>));</div><div class="line">System.out.println(list.contains(<span class="string">"A"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 插入</span></div><div class="line">List&lt;String&gt; list2 = Arrays.asList(<span class="string">"G"</span>, <span class="string">"Z"</span>, <span class="string">"F"</span>);</div><div class="line">list.addAll(<span class="number">2</span>, list2);</div><div class="line"></div><div class="line"><span class="comment">// 排序</span></div><div class="line">Collections.sort(list);</div><div class="line"></div><div class="line"><span class="comment">// 遍历</span></div><div class="line">Iterator&lt;String&gt; it=list.iterator();</div><div class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">    System.out.println(it.next());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>相当于C++中的list和deque。</p>
<p>包括addFirst()、addLast()、getFirst()、getLast()、removeFirst()、removeLast()。堆栈和队列均可用LinkedList实现。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>ArrayList和LinkedList都不是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">List lst = Collections.synchronizedList(<span class="keyword">new</span> ArrayList());</div></pre></td></tr></table></figure>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>LinkedList可以用作普通队列。</p>
<p>PriorityQueue是优先队列。用法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;();</div><div class="line"></div><div class="line"><span class="comment">// 入队</span></div><div class="line">queue.offer(<span class="number">4</span>);</div><div class="line">queue.offer(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// 出队</span></div><div class="line">System.out.println(queue.peek());   <span class="comment">// 不移除</span></div><div class="line">System.out.println(queue.poll());   <span class="comment">// 移除</span></div><div class="line">System.out.println(queue.poll());</div></pre></td></tr></table></figure>
<p>PriorityQueue也可以扔比较器。如果不扔，则为最小值先出列（但同为最小值时不保证相对顺序）。</p>
<p>PriorityQueue线程不安全。</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>常用HashSet、TreeSet和LinkedHashSet。线程不安全。</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>要求对象在equals返回true时，hashCode也一致。</p>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet使用对象的compareTo方法进行比较，所以存储自定义对象时应实现Comparable接口。</p>
<p>如果自定义比较规则，需要定义比较器类，实现Comparator接口，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsoluteComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> x=Math.abs(o1), y=Math.abs(o2);</div><div class="line">        <span class="keyword">if</span> (x&gt;y) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x&lt;y) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt; (<span class="keyword">new</span> AbsoluteComparator());</div><div class="line">        set.addAll(Arrays.asList(<span class="number">3</span>, -<span class="number">7</span>, -<span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, -<span class="number">5</span>));</div><div class="line">        Iterator&lt;Integer&gt; it = set.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">            System.out.println(it.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>常用HashMap、TreeMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Map&lt;String, Integer&gt; map1 = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line"></div><div class="line">map1.put(<span class="string">"A"</span>, <span class="number">1</span>);</div><div class="line">map1.put(<span class="string">"B"</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">System.out.println(map1.containsKey(<span class="string">"C"</span>));</div><div class="line">System.out.println(map1.get(<span class="string">"A"</span>));</div><div class="line">System.out.println(map1.get(<span class="string">"C"</span>));      <span class="comment">// 返回null</span></div><div class="line">System.out.println(map1.remove(<span class="string">"A"</span>));</div><div class="line"></div><div class="line">System.out.println(map1.keySet());</div><div class="line"></div><div class="line">TreeMap&lt;String, Integer&gt; map2 = <span class="keyword">new</span> TreeMap&lt;String, Integer&gt;();</div><div class="line"></div><div class="line">map2.put(<span class="string">"C"</span>, <span class="number">1</span>);</div><div class="line">map2.put(<span class="string">"A"</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">System.out.println(map2.firstKey());</div><div class="line">System.out.println(map2.tailMap(<span class="string">"A"</span>));      <span class="comment">// 生成键值大于等于A的子集</span></div></pre></td></tr></table></figure>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>在C++里叫做模板，不过Java里不能扔非类型形参。</p>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T n;</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getN</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(T a)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line">...</div><div class="line">x.&lt;Integer&gt;fun(<span class="number">12</span>);</div></pre></td></tr></table></figure>
<h2 id="受限泛型"><a href="#受限泛型" class="headerlink" title="受限泛型"></a>受限泛型</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">List</span>&gt; </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">MyClass&lt;?&gt; a = <span class="keyword">new</span> MyClass&lt;ClassA&gt;();</div><div class="line">MyClass&lt;? extends List&gt; b;        <span class="comment">// 限定类型</span></div><div class="line">MyClass&lt;? <span class="keyword">super</span> HashSet&gt; c;        <span class="comment">// 限定父类</span></div></pre></td></tr></table></figure>
<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><p>需要</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div></pre></td></tr></table></figure>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>InputStream/OutputStream是抽象类。</p>
<ul>
<li>InputStream：read()、skip()、available()、close()</li>
<li>OutputStream：write()、flush()、close()</li>
</ul>
<p>具体类：FileInputStream、ByteArrayInputStream、ObjectInputStream、PipedInputStream、SequenceInputStream等。</p>
<h2 id="过滤流"><a href="#过滤流" class="headerlink" title="过滤流"></a>过滤流</h2><p>BufferedInputStream/BufferedOutputStream</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>DataInputStream/DataOutputStream，方法以read/write开头。</p>
<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>InputStreamReader/OutputStreamWriter、FileReader/FileWriter，可指定编码。</p>
<p>BufferedReader/BufferedWriter</p>
<p>BufferedReader有readLine()。</p>
<h2 id="PrintStream、PrintWriter"><a href="#PrintStream、PrintWriter" class="headerlink" title="PrintStream、PrintWriter"></a>PrintStream、PrintWriter</h2><p>支持自动刷新（flush）。</p>
<h2 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h2><p>System.in、System.out、System.err</p>
<p>重定向：System.setOut(…)</p>
<h2 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(<span class="string">"/home/xxx/file"</span>, <span class="string">"rw"</span>);</div><div class="line">file.seek(<span class="number">3</span>);</div><div class="line">file.writeByte(<span class="number">10</span>);</div><div class="line">file.close();</div></pre></td></tr></table></figure>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>一个对象需要实现java.io.Serializable接口（该接口没有具体方法）才能被序列化。</p>
<p>给非静态成员挂transient关键字可防止被序列化。</p>
<p>使用ObjectInputStream/ObjectOutputStream进行序列化。</p>
<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>File类即可用于单个文件（实例化），又可用于文件操作（静态函数）。</p>
<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="创建和启动线程"><a href="#创建和启动线程" class="headerlink" title="创建和启动线程"></a>创建和启动线程</h2><p>两种方法：继承Thread类或实现Runnable接口。此处为了省篇幅就写成匿名类了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">                    System.out.println(currentThread().getName() + <span class="string">":"</span> + i);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        thread.start();</div><div class="line">        <span class="comment">// 再启动一个</span></div><div class="line">        thread.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Runnable target = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</div><div class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">100</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(target);</div><div class="line">        thread.start();</div><div class="line">        <span class="comment">// 再启动一个</span></div><div class="line">        thread.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意，运行结果是不可预测的。</p>
<h2 id="线程状态与调度"><a href="#线程状态与调度" class="headerlink" title="线程状态与调度"></a>线程状态与调度</h2><p>状态：新建（New，尚未开始运行）、就绪（Runnable，就绪或正在运行）、阻塞（Blocked）、死亡（Dead）</p>
<p>调度：</p>
<ul>
<li>setPriority()</li>
<li>sleep()：不考虑优先级，直接让行；阻塞当前线程。</li>
<li>yield()：让给同优先级或高级的，不阻塞当前线程。</li>
</ul>
<p>合并：join()，暂停当前线程，直到目标线程结束。</p>
<p>设为守护线程：setDaemon()</p>
<h2 id="线程安全-1"><a href="#线程安全-1" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">synchronized</span> (对象) &#123;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>java.util.concurrent.locks.Lock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Lock locker = <span class="keyword">new</span> ReentrantLock();</div><div class="line">...</div><div class="line">locker.lock();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    locker.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生产者-消费者"><a href="#生产者-消费者" class="headerlink" title="生产者/消费者"></a>生产者/消费者</h2><p>wait()/notify()/notifyAll()，必须配合使用，否则容易死锁。</p>
<p>这三个方法是Object的，但必须在synchronized代码块中才能使用。wait通常放在while里。</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p>一个简单的聊天软件。如果想多人聊天，服务器端显然需要多线程。</p>
<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataInputStream dis = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</div><div class="line">        Socket socket = <span class="keyword">null</span>;</div><div class="line">        ServerSocket ss = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</div><div class="line">            System.out.println(<span class="string">"Listening at 127.0.0.1:9999..."</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (BindException e) &#123;</div><div class="line">            System.err.println(<span class="string">"Can't bind."</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.exit(<span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            started = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">while</span> (started) &#123;</div><div class="line">                <span class="keyword">boolean</span> connected = <span class="keyword">false</span>;</div><div class="line">                socket = ss.accept();</div><div class="line">                connected = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">                dis = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</div><div class="line"></div><div class="line">                <span class="keyword">while</span> (connected) &#123;</div><div class="line">                    String str = dis.readUTF();</div><div class="line">                    System.out.println(<span class="string">"Get: "</span> + str);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</div><div class="line">            System.out.println(<span class="string">"Client disconnected"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (dis != <span class="keyword">null</span>) &#123;</div><div class="line">                    dis.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</div><div class="line">                    socket.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</div><div class="line">        Socket socket = <span class="keyword">null</span>;</div><div class="line">        DataOutputStream dos = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</div><div class="line">            dos = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        BufferedReader stream = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">        String line;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (!(line = stream.readLine()).isEmpty()) &#123;</div><div class="line">                dos.writeUTF(line);</div><div class="line">                dos.flush();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                dos.close();</div><div class="line">                socket.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>UDP是面向无连接的，无需多线程。</p>
<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        DatagramSocket socket = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9998</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</div><div class="line">            System.err.println(<span class="string">"Can't bind."</span>);</div><div class="line">            System.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">        DatagramPacket rPacket = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;          <span class="comment">// 按Ctrl+C结束</span></div><div class="line">                rPacket = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">1024</span>);</div><div class="line">                socket.receive(rPacket);</div><div class="line"></div><div class="line">                String text = <span class="keyword">new</span> String(rPacket.getData(), rPacket.getOffset(), rPacket.getLength());</div><div class="line">                System.out.println(<span class="string">"Get "</span> + text);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClient</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BufferedReader stream = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">        String line;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (!(line = stream.readLine()).isEmpty()) &#123;</div><div class="line">                <span class="keyword">byte</span>[] buffer = line.getBytes();</div><div class="line">                DatagramPacket sPacket = <span class="keyword">new</span> DatagramPacket(buffer,</div><div class="line">                        buffer.length, InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">9998</span>);</div><div class="line">                DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</div><div class="line">                socket.send(sPacket);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URL类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.google.com"</span>);</div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream()));</div><div class="line">        String s;</div><div class="line">        <span class="keyword">while</span> ((s = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>URLConnection类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.google.com"</span>);</div><div class="line">        URLConnection conn = url.openConnection();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"GET "</span> + url.getHost() + <span class="string">" PORT "</span> + url.getDefaultPort());</div><div class="line">        System.out.println(<span class="string">"Content-Length: "</span> + conn.getContentLength());</div><div class="line"></div><div class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</div><div class="line">        String s;</div><div class="line">        <span class="keyword">while</span> ((s = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">            System.out.println(s);</div><div class="line">        &#125;</div><div class="line">        reader.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>Java使用JDBC作为统一的接口。假如想连接到MySQL，那么需要先下载<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">MySQL驱动</a>，然后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        Statement stmt = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 连接</span></div><div class="line">            conn = DriverManager.getConnection(</div><div class="line">                    <span class="string">"jdbc:mysql://localhost:3306/database"</span>, <span class="string">"root"</span>, <span class="string">"12345678"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 访问</span></div><div class="line">            stmt = conn.createStatement();</div><div class="line">            rs = stmt.executeQuery(<span class="string">"SELECT * FROM table"</span>);</div><div class="line">            <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">                System.out.print(rs.getInt(<span class="string">"id"</span>));</div><div class="line">                System.out.println(rs.getString(<span class="string">"name"</span>));</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 记录处理</span></div><div class="line">            stmt.executeUpdate(<span class="string">"UPDATE table SET name='wang' WHERE id=5"</span>);</div><div class="line">            stmt.executeUpdate(<span class="string">"DELETE FROM table WHERE id=6"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 预处理和批处理</span></div><div class="line">            pstmt = conn.prepareStatement(<span class="string">"INSERT INTO table VALUES (?, ?)"</span>);</div><div class="line">            pstmt.setInt(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">            pstmt.setString(<span class="number">2</span>, <span class="string">"name"</span>);</div><div class="line">            pstmt.addBatch();</div><div class="line">            ...</div><div class="line">            pstmt.executeBatch();</div><div class="line"></div><div class="line">            <span class="comment">// 事务处理</span></div><div class="line">            stmt = conn.createStatement();</div><div class="line">            stmt.addBatch(<span class="string">"INSERT INTO table VALUES (1, 'aaa')"</span>);</div><div class="line">            stmt.executeBatch();</div><div class="line">            conn.commit();</div><div class="line">            conn.setAutoCommit(<span class="keyword">true</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">                    rs.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) &#123;</div><div class="line">                    pstmt.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</div><div class="line">                    stmt.close();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                    conn.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果学过C++，那么从C++过渡到Java很快就能入门。&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://vjudge1.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>精简Visual Studio 2015</title>
    <link href="https://vjudge1.github.io/2016/03/23/compact-vs/"/>
    <id>https://vjudge1.github.io/2016/03/23/compact-vs/</id>
    <published>2016-03-22T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:51.206Z</updated>
    
    <content type="html"><![CDATA[<p>一装Visual Studio 2015，几个G的硬盘空间就轻轻松松地消失了。过去的VS还能选择装什么东西，现在似乎基本上没什么可选择的。那么怎样才能精简Visual Studio，把不需要的东西都删除？</p>
<a id="more"></a>
<p>两种思路：一种是避免安装不需要的东西，另一种是把不需要的组件删除。</p>
<div class="bs-callout bs-callout-danger">
                <h4 id="危险！"><a href="#危险！" class="headerlink" title="危险！"></a>危险！</h4><p>本文内容很危险，而且似乎成效不大。小心操作，如果出错，你将不得不重装VS！</p>

            </div>
<p>安装之前首先需要留足空间，C盘最好超过10GB，免得麻烦。</p>
<h1 id="精简安装"><a href="#精简安装" class="headerlink" title="精简安装"></a>精简安装</h1><p>官方指出，通过无人职守安装，可以决定只安装哪些组件，不安装哪些组件。</p>
<p>如果网络没毛病的话，建议使用在线安装的那个安装程序，因为离线安装的话补丁是单独装的，要白白占掉很多空间，在线装的话补丁是已经打好的。</p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/ee225237(v=vs.140" target="_blank" rel="external">官方的教程</a>.aspx)说的比较清楚，照做即可。它大致思路如下：</p>
<ol>
<li>敲个命令，把安装文件下载到本地。</li>
<li>敲第二条命令，生成AdminDeployment.xml，由你自己修改。<a href="https://gist.github.com/riezebosch/84ea3a7dcac34f93eea0" target="_blank" rel="external">这里</a>有一个修改后的例子（需要翻墙）。</li>
<li>第三条命令，让安装程序利用这个AdminDeployment.xml来进行安装。</li>
</ol>
<h1 id="删除无用组件"><a href="#删除无用组件" class="headerlink" title="删除无用组件"></a>删除无用组件</h1><p>原文：<a href="http://blog.sujay.sarma.in/tutorial/removing-visual-studio-bloatware/" target="_blank" rel="external">http://blog.sujay.sarma.in/tutorial/removing-visual-studio-bloatware/</a></p>
<p>肯定会有一些用不着的东西被装上了。我们可以挨个卸载——</p>
<p>首先下载<a href="http://totaluninstaller.codeplex.com/" target="_blank" rel="external">TotalUninstaller</a>，它的特点是可以进行模糊搜索，把含有关键词的、通过Windows Installer安装的软件统统卸载。</p>
<p>以管理员身份启动命令提示符，输入</p>
<pre><code>TotalUninstaller.exe /ListAll &gt; a.txt
</code></pre><p>打开a.txt，看看里面哪些安装包是不需要的（注意，里面不光有VS，还有其他软件），总结出一些关键词。</p>
<p>接下来编辑TotalUninstaller.exe.config，里面应该有<code>&lt;ProductsToUninstall&gt;</code>，我把它改成了（<strong>注意，不要照抄，否则后果会很惨！</strong>）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ProductsToUninstall</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"Advertising"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"Windows Phone"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"FSharp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"4"</span> <span class="attr">value</span>=<span class="string">"Visual F#"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"5"</span> <span class="attr">value</span>=<span class="string">"LightSwitch"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"6"</span> <span class="attr">value</span>=<span class="string">"Workflow"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"7"</span> <span class="attr">value</span>=<span class="string">"Desktop SDK"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"8"</span> <span class="attr">value</span>=<span class="string">"Windows Store App"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"9"</span> <span class="attr">value</span>=<span class="string">"Azure"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"10"</span> <span class="attr">value</span>=<span class="string">"ARM"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"11"</span> <span class="attr">value</span>=<span class="string">"Office365"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"12"</span> <span class="attr">value</span>=<span class="string">"Application Insights"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"13"</span> <span class="attr">value</span>=<span class="string">"Blend"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"14"</span> <span class="attr">value</span>=<span class="string">"XAML"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ProductsToUninstall</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后</p>
<pre><code>TotalUninstaller.exe /Uninstall
</code></pre><p>程序就会自动搜索含有那些关键词的安装包，挨个卸载。</p>
<p>不过收益似乎不太大——才放掉了800多MB。</p>
<h1 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h1><p>最后，<code>C:\ProgramData\Package Cache</code>是当然要消灭的！能够省下近3GB空间！</p>
<p>消灭的时候注意，不要直接删光，否则以后Visual Studio安装程序无法正常打开。用<code>del C:\ProgramData\Package Cache\*.cab /s /q /f</code>删会好一些。</p>
<p>因为脑袋正常的人不会天天在那儿玩Visual Studio安装程序，所以，以后真的需要修改或修复的时候，重新下载安装程序就行了。</p>
<p>经过试验，试图通过建立符号链接来转移文件的方法是不可行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一装Visual Studio 2015，几个G的硬盘空间就轻轻松松地消失了。过去的VS还能选择装什么东西，现在似乎基本上没什么可选择的。那么怎样才能精简Visual Studio，把不需要的东西都删除？&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="系统维护" scheme="https://vjudge1.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"/>
    
      <category term="Visual Studio" scheme="https://vjudge1.github.io/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Windows平板——高性价比的第二台电脑</title>
    <link href="https://vjudge1.github.io/2016/03/18/tablet/"/>
    <id>https://vjudge1.github.io/2016/03/18/tablet/</id>
    <published>2016-03-17T16:00:00.000Z</published>
    <updated>2017-05-15T18:39:55.992Z</updated>
    
    <content type="html"><![CDATA[<p>过去上学流行买笔记本电脑，而现在平板电脑已经比较普及了。有人问我平板电脑怎么样，我觉得不错，而且身边已经有人受我影响，剁手入坑了。</p>
<p>我不打广告，只写一些自己的体验，所以不推荐任何一款。可以自己到百度上搜测评——到京东上去买，其实都差不太多。</p>
<a id="more"></a>
<h1 id="入坑"><a href="#入坑" class="headerlink" title="入坑"></a>入坑</h1><p>我本来不喜欢平板电脑（那时候一般都是Android系统的，或者是iPad），因为那种系统不够灵活，不能随便装软件，而且打字也不方便。</p>
<p>后来出现了Windows平板，而且看到一哥们买了个Windows 8系统的平板。平板使用Intel Atom处理器，里面装的是32位系统——可以随便折腾嘛！结果就是，我入坑了。</p>
<p>在那哥们的推荐下，我买了<a href="http://item.jd.com/10000140721.html" target="_blank" rel="external">驰为Vi10（64GB，双系统）</a>。主要配置如下：</p>
<ul>
<li>处理器：Intel Atom Z3736F @ 1.33 2.16</li>
<li>内存：2GB</li>
<li>硬盘：64GB eMMC</li>
<li>屏幕尺寸：10.6寸</li>
<li>外置接口：3个USB（其中一个是OTG）支持3.0、耳机、TF卡槽、microHDMI</li>
<li>操作系统：Windows 8.1+Android</li>
</ul>
<h1 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h1><p>不得不承认，现在的国产平板电脑很便宜，质量也不差。8寸平板1000块钱以内就能搞定了，很便宜。如果要求稍微高一点，例如10寸屏，或者内存大一点，1000多块也基本搞定了。</p>
<p>台式机也1000多，笔记本得四千多，所以平板（我指的是装Windows系统的平板，只有那种平板与电脑比较才有意义）还是很划算的。</p>
<p>不建议买Surface。个人感觉买Surface会有些吃亏（没准里面有软件的钱）。2000元以上平板也不合适。</p>
<p>那种动辄上万的超薄本就更不合适了。人家MacBook用的是专用的Mac系统，而这些超薄本全是Windows。系统差异非常大（那些从事软件开发的老外，一般只认苹果），绝不是光靠硬件就能追上的。</p>
<h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p>评价性能最简单办法是跑分。网上评测文章一大堆，自己看评价就好了。</p>
<p>以我自己手里的驰为Vi10为例。</p>
<ul>
<li>开机速度：开机速度十多秒，当然可以接受。</li>
<li>日常使用：日常软件差不多都没问题。平时用Chrome浏览器，多开一些窗口也没什么，不过很快电脑就变得很热了。<ul>
<li>2GB内存够用了。毕竟是个小平板，要是拿它跑MATLAB可就不太恰当了。</li>
<li>也有有问题的，例如像IDEA之类的软件就不快，对触屏也不友好。Ruby（Windows系统）则是慢到家了。</li>
<li>在平板电脑面前，“<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E6%88%98" target="_blank" rel="external">编辑器之战</a>”各方终于打了个平手——如果不挂键盘的话。</li>
</ul>
</li>
<li>发热：电脑太热的时候（例如环境散热不好的时候）偶尔会导致系统不稳定，例如无线挂掉。重启和冷却之后就好了。刚买电脑的时候觉得很容易“过热”，用一段时间就习惯了（反正也没啥大的危害）。</li>
<li>存储：因为装了一堆软件，自带的移动存储很快就不太够了。可以买个大存储卡，把一些不常用的文档、资料什么的放到那里面。<ul>
<li>软件就不要放存储卡里了，会变慢的。</li>
</ul>
</li>
<li>游戏：我不玩游戏，所以不知道游戏性能如何。我敢保证如果壮着胆子玩GTA5肯定卡死你。</li>
<li>耗电：如果不用太费电的软件的话，能用一个白天。不要问我到底是好还是坏。<ul>
<li>平板电脑充电很慢（5V 2A的电源能好到哪里去）。晚上睡觉之前把电脑干没电，插上充电器，可能得等到睡醒之后才充满。当然这是夸张。</li>
</ul>
</li>
</ul>
<h1 id="优势和劣势"><a href="#优势和劣势" class="headerlink" title="优势和劣势"></a>优势和劣势</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>平板电脑最大的好处就是轻巧，方便携带，到哪里都能用。</p>
<ul>
<li>便携性：平板电脑太方便携带了。走哪儿带到哪儿，随时随地可以用，如果不怕小偷的话。<ul>
<li>别忘了磁吸键盘。</li>
<li>我电脑的USB口在平板主体上，比较方便。有人买了个酷比魔方的，USB口在键盘上，不挂键盘用不了，我觉得这个设计比较坑爹，毕竟有些时候不太方便加键盘（例如在车上）。</li>
<li>有的电脑带电磁笔，对于经常做记录的人来说太好了。</li>
</ul>
</li>
<li>舒适度：我的平板电脑打字不太舒服，而且动静不小。一般不在平板电脑上打东西（因为还有笔记本电脑，笔记本电脑打字舒服，所以给平板外接键盘就显得没必要了）。<ul>
<li>Windows 10对平板的优化还算可以。</li>
<li>不过要注意你自己的软件虽然也能通过触摸使用，但是可能不太友好，例如那个“大型软件”IDEA或者“小型软件”Vim。有时候外接鼠标会舒服一些。</li>
</ul>
</li>
<li>系统：与Android和苹果平板相比，Windows平板太划算了，因为可以随便折腾。当然不喜欢折腾的可以无视这一点。</li>
</ul>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>尺寸小：如果你经常打字，建议搞个10寸的平板。太小的平板打字不舒服。<ul>
<li>不要买分辨率太高的平板，例如1080P很容易瞎眼。</li>
</ul>
</li>
<li>性能一般，不适合跑耗CPU耗显卡的东西。</li>
<li>没有风扇，你说散热效果如何。</li>
<li>平板电脑硬件无法升级。如果想用得长久玩得更爽，一开始就应该买个高配耐用的。</li>
</ul>
<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>我的平板本来是Windows 8.1+Android双系统，我觉得Android不实用，就直接把它废掉了。操作方法和普通电脑是一样的。</p>
<p>平板内部为32位UEFI，所以你的启动盘也得支持32位UEFI才行（<code>/efi/boot/bootia32.efi</code>）。在这里推荐<a href="http://www.wepe.com.cn/" target="_blank" rel="external">微PE</a>——就是做通用PE工具箱那伙人，比较信得过，而且微PE可以同时支持32位和64位UEFI。</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>不要随便重装系统，到时候驱动精灵可不一定能帮上忙。最好事先到官网上把驱动搜集好然后再动手。</p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>Android有没有用呢？那要看你自己的情况了。</p>
<p>平板Android是经过定制的，也就是说，如果你贸然地拿个外面的Android x86跑LiveUSB，结果可能会很不爽——触摸屏、无线网、摄像头……反正对于驰为来说就是统统失效。</p>
<p>如果直接用官方固件刷Android，那么分区表会被改写（所以要先刷Android再刷Windows）。不过如果你够NB，能用GRUB把Android引导起来，那当我什么都没说。</p>
<p>平板Android不太容易ROOT。常见那些“一键ROOT”也不一定好使。所以用搜索引擎多搜搜吧……</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>建议不要在平板上折腾Linux，没前途的，尤其是驰为的板子。你连那堆硬件的型号都不知道，去哪儿找驱动？（官方一点风都不透，果然商业机密）</p>
<p>要折腾Linux的话，去买国外的板子吧，希望还能多一些。</p>
<p>不过，既然Android也是Linux，为什么不改造改造Android，把它变成实用系统呢？有闲心的话可以把Android给ROOT掉，装个busybox和Linux Deploy，除了内核老一点——3点十几，体验不会差太多的。</p>
<h1 id="售后"><a href="#售后" class="headerlink" title="售后"></a>售后</h1><p>我向来不找售后，所以不知道他们怎么样。据说有些厂商会糊弄用户。</p>
<p>感觉驰为的售后可能会有些糊弄——发布固件更新的时候啥都不说，给个文件给个教程就拉倒了，也不解释新固件有啥好处。</p>
<h1 id="角色分配"><a href="#角色分配" class="headerlink" title="角色分配"></a>角色分配</h1><p>因为平板的性能并不是很爽，所以平时主要工作还应该在台式机或笔记本上面解决。</p>
<p>可以拿平板做点小事情，例如：</p>
<ul>
<li>看看网页</li>
<li>看视频/电影</li>
<li>记录一些即时的想法：例如印象笔记和OneNote。</li>
<li>写小程序</li>
<li>第二屏幕：通过名为Synergy的软件和主机共享键鼠。</li>
<li>看电子书：阅读经典名著（文学的、哲学的、数学的、工程的、计算机的……）往往不像阅读网络小说那样痛快。如果有一个平板电脑，看起来会舒服一些。</li>
<li>做一些强度不高的工作：高强度工作还得用大电脑，不然很不舒服。</li>
</ul>
<p>因为Windows是电脑系统，所以很多事情是安卓板或苹果板做不了的。</p>
<p>如果平时不怎么使用电脑，只是偶尔需要，那么直接花几百块钱买个平板还是非常划算的。有零花钱的话，买个平板作为第二电脑也很划算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;过去上学流行买笔记本电脑，而现在平板电脑已经比较普及了。有人问我平板电脑怎么样，我觉得不错，而且身边已经有人受我影响，剁手入坑了。&lt;/p&gt;
&lt;p&gt;我不打广告，只写一些自己的体验，所以不推荐任何一款。可以自己到百度上搜测评——到京东上去买，其实都差不太多。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心得" scheme="https://vjudge1.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="平板" scheme="https://vjudge1.github.io/tags/%E5%B9%B3%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>易班</title>
    <link href="https://vjudge1.github.io/2016/03/15/yiban/"/>
    <id>https://vjudge1.github.io/2016/03/15/yiban/</id>
    <published>2016-03-14T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:00.206Z</updated>
    
    <content type="html"><![CDATA[<p>易班是一个整合微博、微信、BBS等功能的全能社交应用，跟校内网（现在是人人网）比较像，不过只能由在校学生注册。虽然整合了互联网时代常见的社交网络形式，为什么还会引来一片骂声呢？其中到底有什么问题？</p>
<a id="more"></a>
<p>很多学生都在抱怨易班的问题。一方面是这个APP本身并不好用，另一方面。也是最重要的一方面，就是很多高校采取强制措施来“推广”易班，这也是易班在微博、知乎、贴吧等平台招来一片骂声的重要原因。</p>
<p>很容易就能搜到那些强制措施：比较轻的无非是要求每位学生都注册账号，严重一点的会把学生和班级测评与易班平台活动挂钩，最严重的甚至是“<a href="http://china.huanqiu.com/article/2016-01/8388679.html" target="_blank" rel="external">不注册易班就取消毕业资格</a>”（后来记者一调查，辅导员开始说“是学生误解了”）。</p>
<p>如果只有个别学校采取强制手段来推广易班，那么评论就很简单了，大致是“辅导员不尊重学生意愿，blahblah”，或者“学生应服从管理，blahblah”。一般情况下辅导员强制要求学生做什么事，学生只能被迫接受，见得多了，也就不奇怪了。当然，多数人最终会选择“不合作”——注册完易班就把它卸载，反正辅导员又不可能挨个要求学生重新装上，或者对卸载的学生给予处分。</p>
<p>很多人的不满情绪到此为止，但是易班的事情没那么简单。</p>
<p><br><br></p>
<p>用搜索引擎来搜索“易班”二字时，我们可以看到一边倒的“xx大学易班建设”——说明不光自己学校在搞易班，而且别的学校也搞，而且领导们还挺重视。在搜索引擎上还可以看到维基百科、百度百科和互动百科都有对易班的介绍，不过百度百科和互动百科基本上就是宣传。</p>
<p>身处天朝，很多人都会联想到“背景”一词。微博、知乎和贴吧里都有很多评论，但是很多都是宣泄情绪，缺少有力的资料，无法回答“背景是谁”这一问题。学校媒体和国内媒体当然不会负面地报道这个东西，境外也不会关心这个APP（一个不知名的破APP，哪里有新闻价值），所以找资料也有一定的难度。</p>
<p>我注意到中国数字时代上面有一个<a href="http://chinadigitaltimes.net/chinese/2015/05/%E3%80%90%E5%9B%BE%E8%AF%B4%E5%A4%A9%E6%9C%9D%E3%80%91%E4%B8%AD%E5%9B%BD%E7%89%B9%E8%89%B2%E7%9A%84%E5%BC%BA%E5%88%B6%E6%80%A7%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%AB%99-%E6%98%93%E7%8F%AD/" target="_blank" rel="external">简单的介绍</a>，而且有不少学术论文在研究易班相关的内容。</p>
<p>中国数字时代里面对易班的介绍以微博截图为主（因为那个时候维基百科里面还没有相关词条，要不然他们肯定会引用一下），后面才是最重要的东西：教育部2015年工作要点、<strong>教育部办公厅 国家互联网信息办公室秘书局关于印发《“易班”推广行动计划和中国大学生在线引领工程实施方案》的通知</strong>。</p>
<p>官方文件是最重要的东西！正是因为这份文件，我们才看到一大堆学校相继“沦陷”，学生们（甚至包括老师）被强制要求注册。</p>
<p>这份文件，应该就是“众多莘莘学子”感到不满的原点。</p>
<p><br><br></p>
<p>其实我并不关心为什么教育部选择易班作为待推广的平台（就是到底有什么“关系”）——反正从技术上讲，选择易班赵班都是一样的。我更关心的是是文件所传达的精神。因为比较熟悉墙和翻墙的事情，所以对一些关键词会比较敏感：教育主阵地、网络思想政治教育创新和网络舆论生态改善、营造清朗网络空间。</p>
<p>什么叫做“主阵地”、“思想政治教育”、“舆论生态”、“清朗网络空间”呢？</p>
<p>文件提到了三大主要任务：(一)拓展应用，丰富思想文化供给；(二)扩大覆盖，筑牢网络育人阵地；(三)引领示范，促进校园网站建设</p>
<p>这三个任务的解释都提到了“思想教育”。</p>
<p>学术论文则从很多角度来研究易班：辅助教学、高校管理、宣传工作、校园文化和班级文化……但谈论最多的，还是“思想教育”这个主题。</p>
<p>什么是“思想教育”？为什么要强调思想教育？要达到什么效果呢？</p>
<p><br><br></p>
<p>很多人明显感觉到近几年以来获取境外信息（俗称“翻墙”）已经越来越困难，越来越多的网站被墙（包括一些看起来完全没有理由被墙的，例如后来才被解封的Python）。最近一次大规模冲击大约是2015年阅兵之前，一大批VPN相继牺牲，翻墙软件Shadowsocks作者被请去喝茶……</p>
<p>近些年来无论是墙内社交网站还是墙外社交网站，“五毛党”的数量越来越多。从2015年初开始，各高校开始大规模招“网络文明志愿者”（其实很多也是强制注册的——所以很多也是完成任务而已）。去年年末和今年年初，“帝吧”已经多次“出征”Facebook，取得了“巨大成果”……</p>
<p>到底发生了什么？</p>
<p>推荐大家先读一读《一九八四》，然后再来回答这些问题……</p>
<img src="/2016/03/15/yiban/telescreen.jpg" alt="BIG BROTHER IS WATCHING YOU" title="BIG BROTHER IS WATCHING YOU">
<p>本文作者正处于恐惧之中，那么就以一个轻松点的话题结尾吧：今年的春晚非常奇怪——明明演得很烂，但是新闻媒体却<strong><em>开足了马力</em></strong>来称赞春晚演得非常好，“歌颂正能量”、“唱响主旋律”，反映了“百姓的心声”。不知道到底为什么。</p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>过去新闻联播是这样的</p>
<ol>
<li>国家领导人很忙</li>
<li>人民生活很幸福</li>
<li>外国人民生活在水深火热之中</li>
</ol>
<p>现在得改改了——“总书记很忙”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;易班是一个整合微博、微信、BBS等功能的全能社交应用，跟校内网（现在是人人网）比较像，不过只能由在校学生注册。虽然整合了互联网时代常见的社交网络形式，为什么还会引来一片骂声呢？其中到底有什么问题？&lt;/p&gt;
    
    </summary>
    
      <category term="个人心得" scheme="https://vjudge1.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="电幕" scheme="https://vjudge1.github.io/tags/%E7%94%B5%E5%B9%95/"/>
    
  </entry>
  
  <entry>
    <title>终端装13利器——zsh、powerline和tmux</title>
    <link href="https://vjudge1.github.io/2016/01/30/zsh-and-powerline/"/>
    <id>https://vjudge1.github.io/2016/01/30/zsh-and-powerline/</id>
    <published>2016-01-29T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:03.779Z</updated>
    
    <content type="html"><![CDATA[<p>天天用终端，怎么能不搞搞插件呢？</p>
<a id="more"></a>
<h1 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h1><p>Linux和Mac默认的shell是bash。作为拿来主义者，不如换用zsh，因为——oh-my-zsh，一堆现成的主题和插件。</p>
<p>首先需要安装zsh（Mac自带），然后通过<code>chsh</code>命令切换默认shell：</p>
<pre><code>chsh -s /bin/zsh
</code></pre><p>接下来要安装oh-my-zsh。项目地址为：<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a>，命令不多，按照里面的说明操作即可。</p>
<p>zsh的补全比较智能，而oh-my-zsh以插件形式提供了更多补全，例如gem，可以在<code>~/.oh-my-zsh/plugins</code>中看看到底有哪些插件。</p>
<p>在项目<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">wiki页面</a>里面有主题的预览效果。部分高端大气上档次的主题需要安装Powerline字体。</p>
<h2 id="wd"><a href="#wd" class="headerlink" title="wd"></a>wd</h2><p>wd是oh-my-zsh提供的一个插件，用于给路径加标签，快速切换路径。例如</p>
<pre><code>wd add a    （给当前路径加标签）
wd a        （快速切换路径）
</code></pre><p>如果成天cd那么几个固定路径，那么用wd会更方便。</p>
<h2 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h2><p><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a> 是一个自动给命令加语法高亮的插件，可以一试。</p>
<h1 id="Powerline"><a href="#Powerline" class="headerlink" title="Powerline"></a>Powerline</h1><p>Powerline可以在shell、vim等软件中显示状态栏，例如下图的状态栏就是Powerline+tmux配合的效果：</p>
<p><img src="https://cloud.githubusercontent.com/assets/2618447/6316861/70f3c4ce-ba03-11e4-88a5-0b423dd5a2ce.png" alt="powerline"></p>
<p>Powerline的安装其实不难，不过因为我使用MacPorts，文档里有些地方写得不明白，结果试了半天才工作。</p>
<p>首先需要安装<a href="https://github.com/powerline/fonts" target="_blank" rel="external">Powerline专用字体</a>，否则装完之后终端里面会出现一堆麻将牌。这些字体不用全部下载，挑个好看的就行。设置完之后设置成默认字体。</p>
<p>然后</p>
<pre><code>pip install powerline-status
</code></pre><p>因为官方说明没讲清楚，所以接下来我没按官方说明操作——</p>
<pre><code>git clone https://github.com/powerline/powerline
cd powerline/powerline
python build.py
# 请把以下路径换成你自己的Python库
sudo mkdir /usr/lib/python2.7/site-packages/scripts
sudo cp ./build/* /usr/lib/python2.7/site-packages/scripts
</code></pre><p>打开<code>~/.zshrc</code>，加入</p>
<pre><code>export TERM=xterm-256color
source /usr/lib/python2.7/site-packages/powerline/bindings/zsh/powerline.zsh
</code></pre><p>并且把刚建立的scripts目录放入PATH中。</p>
<p>如果这样还报”Bad file descriptor”的错，可以在加载Powerline支持之前，手动启动一下powerline-daemon：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> [ $(wc <span class="_">-l</span> &lt;&lt;&lt; `ps ax | grep powerline-daemon`) <span class="_">-lt</span> 2 ]; <span class="keyword">then</span></div><div class="line">    powerline-daemon-2.7</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>最后，遇到问题的话，可以到<a href="https://powerline.readthedocs.org/en/latest/" target="_blank" rel="external">Powerline文档</a>里面找找答案。对了，不要在Cygwin里试，除非你喜欢卡顿的感觉……</p>
<h1 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h1><p>tmux是一个强大的终端分屏软件，本文就是利用它给终端加个状态栏。</p>
<p>光安装tmux，终端底下是不会出现那个炫酷的状态栏的，所以我们要把Powerline也请来：</p>
<pre><code>mkdir ~/.config
cd ~/.config
git clone https://github.com/erikw/tmux-powerline
cp /usr/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf ~/.tmux.conf
</code></pre><p>在<code>~/.tmux.conf</code>中，把powerline.sh的位置改成刚下载的路径（~/.config/tmux-powerline）中，输入tmux即可看到效果。记得把终端窗口拉长一点。</p>
<p>如果对状态栏内容和样式不满意，可以自己改脚本配置一下。配置好之后，就可以把终端模拟器的默认启动程序从shell改成tmux了。不过tmux在需要滚屏的时候不太方便，所以，如果终端支持（例如我换用了iTerm），可以开启类似于“Save lines to scrollback …”功能，这样就可以继续通过滚屏看历史记录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天天用终端，怎么能不搞搞插件呢？&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="https://vjudge1.github.io/tags/Linux/"/>
    
      <category term="Mac" scheme="https://vjudge1.github.io/tags/Mac/"/>
    
      <category term="插件" scheme="https://vjudge1.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="zsh" scheme="https://vjudge1.github.io/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Atom编辑器插件推荐</title>
    <link href="https://vjudge1.github.io/2016/01/26/atom-plugins/"/>
    <id>https://vjudge1.github.io/2016/01/26/atom-plugins/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:12.049Z</updated>
    
    <content type="html"><![CDATA[<p>Atom是由GitHub推出的文本编辑器，虽然比新一代的编辑器之神Sublime Text逊色一些，但毕竟不要钱也不弹窗（Sublime Text可以在不花钱的情况下无限期试用，只是偶尔会跳弹窗让你掏钱），就一直用了。</p>
<a id="more"></a>
<p>即使用其他编辑器，有些内容也值得看一下，尤其是有:kissing_heart:的——在别的编辑器中很可能有类似或同名（甚至同作者）的插件。</p>
<p>暂时写这些。如果以后发现了哪个插件也不错，或者在生产时用上了，我会接着补充。（2016.1.25）</p>
<h1 id="语言无关"><a href="#语言无关" class="headerlink" title="语言无关"></a>语言无关</h1><h2 id="必备插件"><a href="#必备插件" class="headerlink" title="必备插件"></a>必备插件</h2><ul>
<li><code>atom-fix-path</code>：Atom编辑器在Mac系统中有个bug（不能正确获取PATH变量的值），可以通过这个插件修复。</li>
<li><code>highlight-selected</code>和<code>minimap-highlight-selected</code>：选中变量之后，文件中其他相同变量名均被高亮。</li>
<li>:kissing_heart:<code>minimap</code>：代码地图，必备插件。</li>
<li>:kissing_heart:<code>script</code>：必备插件——随手写了一段代码，然后轻轻一按<kbd>⌘I</kbd>（<kbd>Ctrl+I</kbd>），代码就执行了！支持多种脚本语言，还支持C语言等（仅限于Mac）。它还支持自定义运行参数，以及“运行到光标处”（仅限部分语言）。<ul>
<li>目前该插件还不支持从stdin读入，所以不要用此插件运行需要输入的程序。</li>
</ul>
</li>
<li><code>terminal-plus</code>：在编辑器底下会出现一个“＋”，点击之后，一个shell，很方便。</li>
<li>:kissing_heart:<code>vim-mode</code>和<code>ex-mode</code>：谁才是“编辑器之神”？Vim！（因为Vim对于中文输入而言不太方便所以我没使用）</li>
<li><code>atom-beauity</code>：代码美化只在<kbd>⌃⌥B</kbd>（<kbd>Ctrl+Alt+B</kbd>）一瞬间。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li><code>aligner</code>：按下<kbd>⌃⌘/</kbd>（<kbd>Ctrl+Alt+/</kbd>），多行代码立马按等号对齐。对于SCSS、Python等语言还有对应插件，装完支持更多的对齐。</li>
<li><code>build-tools</code>：允许运行自定义工具（方便编译等）。编译和运行出现错误之后可以帮助定位。</li>
<li>:kissing_heart:<code>dash</code>：如果电脑上装了Dash、Zeal或Velocity（查询函数用法的软件），只要按下<kbd>⌃H</kbd>（<kbd>Ctrl+H</kbd>），这个插件就会帮你直接在那些软件中查函数用法。如果用双屏显示器，可以按<kbd>Shift</kbd>避免编辑器失去焦点。</li>
<li><code>git-plus</code>：不用手动敲Git命令了。</li>
<li><code>todo-manager</code>：帮你管理代码里的TODO、NOTE、FIXME。支持自定义规则，所以也可以用fuck调试，然后用这个插件定位和清除调试代码。需要安装<code>bottom-dock</code>插件才能使用。</li>
<li><code>Sublime-Style-Column-Selection</code>：有时候块选很有用，装上这个插件，就可以按住<kbd>⌥</kbd>（<kbd>Alt</kbd>）键拖动鼠标来块选。</li>
<li><code>pigments</code>：自动将代码中各种表示颜色的符号染色。在“命令面板”中还可以找到其他与颜色有关的功能（以Pigments开头），例如显示调色板、列举代码中出现的所有颜色、转换颜色值为其他形式。</li>
</ul>
<h1 id="按编程语言分"><a href="#按编程语言分" class="headerlink" title="按编程语言分"></a>按编程语言分</h1><p>不要一下子全都装上——本来Atom启动就慢，再装一大堆插件，简直没法用了……</p>
<p>如果都装上了，可以选择性地禁用和启用某些插件。安装<code>package-list</code>插件之后操作会更快一些。</p>
<p>很多流行语言和框架都有Snippets（片段）。如果经常用某个框架，不妨到Atom官网上搜一下，把代码片段装上，也好在编码时节省时间。</p>
<h2 id="HTML-CSS-JavaScript"><a href="#HTML-CSS-JavaScript" class="headerlink" title="HTML/CSS/JavaScript"></a>HTML/CSS/JavaScript</h2><p>装完下面的插件，大概能避免购买或使用盗版的WebStorm。</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>大家都知道HTML标签很啰嗦，所以应该没有人愿意这样写代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Line1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Line2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果能像CSS选择器一样写，一按Tab自动产生HTML代码，该多好：</p>
<pre><code>div.panel&gt;(div.title&gt;p{Title})+(div.content&gt;p{Line1}+p{Line2}+ul&gt;li*5)
</code></pre><p>所以，快装:kissing_heart:<code>emmet</code>插件！</p>
<p>这是一个专为写前端的人设计的编辑器插件，可以到<a href="http://emmet.io/" target="_blank" rel="external">官网</a>上面稍微学一下这个插件的用法。</p>
<p>还有，Atom居然对HTML标签无动于衷！所以快装<code>autoclose-html</code>插件，敲完标签之后自动闭合（还有一个<code>tag</code>向Sublime Text致敬，是一键<kbd>⌥⌘.</kbd>手动闭合）。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul>
<li>:kissing_heart:<code>atom-ternjs</code>：以TernJS为后端的JavaScript自动提示。在使用之前需要按照说明稍微配置一下，然后才能用于jQuery、Angular.js、RequireJS、Node.js、Express.js等乱七八糟的js。<ul>
<li>此外<code>you-complete-me</code>也支持js，不过它的配置比较麻烦，而且需要手工装ternjs。</li>
</ul>
</li>
<li>:kissing_heart:<code>linter-jshint</code>：检查代码不规范之处，具体配置方法可以看插件文档。需要同时安装<code>linter</code>插件。</li>
</ul>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p><code>atom-ternjs</code>支持Node.js，也支持Express.js等框架，不过需要按照插件文档手动安装一下支持文件。此外也可以到<a href="https://npmjs.org" target="_blank" rel="external">npmjs.org</a>上面查以“Tern”开头的插件以获得更多支持。</p>
<ul>
<li>安装<code>atom-jade</code>可以给jade加语法高亮，不过没有自动完成功能。</li>
</ul>
<h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>:kissing_heart:<code>atom-typescript</code>，官方出品，不解释。</p>
<h4 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h4><p>TernJS不支持CoffeeScript。有人曾经想通过Hack的形式让tern支持CoffeeScript，不过tern官方不打算支持，而且那个项目烂尾了……</p>
<ul>
<li><code>coffee-complete</code>：可以一键把CoffeeScript代码编译成JavaScript代码。</li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>（未完待续）</p>
<p>大概能避免花钱买PyCharm了。</p>
<ul>
<li><code>autocomplete-python</code>：Python的自动完成功能。支持Django等。也可以使用YouCompleteMe，具体装法见后文。</li>
<li><code>linter-flake8</code>：Python语言的Linter。需要通过pip安装flake8（通过手工指定路径来切换2和3），然后通过apm安装linter。</li>
<li><code>python-nosetests</code>：按下<kbd>F5</kbd>，自动开始测试。测试框架是nose，所以需要事先通过pip装好。至于如何区分2和3，这就需要看文档了。</li>
<li><code>atom-python-debugger</code>：一键插入和删除<code>ipdb.set_trace()</code>语句。需要通过pip安装ipdb。</li>
</ul>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><h3 id="YouCompleteMe"><a href="#YouCompleteMe" class="headerlink" title="YouCompleteMe"></a>YouCompleteMe</h3><p>Vim有一必备插件，叫做:kissing_heart:“YouCompleteMe”，后来作者把插件核心功能做成API，就可以给其他编辑器用了，比如在Atom中这个插件叫做<code>you-complete-me</code>。</p>
<p>这个插件的配置比较麻烦，可以参照<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">YouCompleteMe说明</a>和<a href="https://github.com/Valloric/ycmd" target="_blank" rel="external">ycmd说明</a>来配置一下。下面是一些注意事项：</p>
<ol>
<li>网上很多教程都是基于Vim的，不过换成别的编辑器也没啥太大区别，照做就行了。</li>
<li>需要clang编译器。</li>
<li>Mac系统自带的Python是2.6的，插件会直接崩掉，所以需要装2.7（不要用3），然后让程序走2.7。如果嫌麻烦，也可以直接把系统自带的Python换掉，不过对于10.11系统来说，得先把SIP功能屏蔽，要不然即使有root也改不了。</li>
<li>在家目录中放一个<code>.ycm_extra_conf.py</code>。可以参照<code>~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py</code>修改。</li>
</ol>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h2 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET"></a>ASP.NET</h2><p><code>you-complete-me</code>是一个代码完成插件，支持C#，不过配置比较麻烦（具体装法看前文，需要事先把Mono装好）。所以不如用其他原生支持ASP.NET的跨平台的开发环境，例如：</p>
<ul>
<li>Xamarin Studio（在Linux中叫做MonoDevelop）</li>
<li>Visual Studio Code（官方出品，不过目前还是Beta版）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Atom是由GitHub推出的文本编辑器，虽然比新一代的编辑器之神Sublime Text逊色一些，但毕竟不要钱也不弹窗（Sublime Text可以在不花钱的情况下无限期试用，只是偶尔会跳弹窗让你掏钱），就一直用了。&lt;/p&gt;
    
    </summary>
    
      <category term="经验总结" scheme="https://vjudge1.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="插件" scheme="https://vjudge1.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Atom" scheme="https://vjudge1.github.io/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>如何学习C语言（非计算机专业）</title>
    <link href="https://vjudge1.github.io/2015/12/30/learn-c/"/>
    <id>https://vjudge1.github.io/2015/12/30/learn-c/</id>
    <published>2015-12-29T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:16.329Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题曾经专门给人做过讲座。不过既然有人<span class="blackout">例如学妹</span>没听过，那我还是把自己的经验感悟写出来吧。</p>
<p>说实话，现代人都比较功利——既然是非计算机专业的学生，那么C语言基本上是个用不着的东西。可是，它还是门必修课，那最起码不能挂科，对吧？</p>
<p>内容很长，最好找个时间慢慢读。</p>
<a id="more"></a>
<h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><p>稍微了解一下C语言的历史，你就应该知道那个东西绝不是给孩子们入门用的——一开始它的应用是Unix操作系统。</p>
<p>从这个角度讲，对于非计算机专业的学生来说，Pascal甚至Basic都比C语言靠谱。因为C语言对于他们而言过于灵活，暴露了很多让初学者迷惑的东西。而Pascal和Basic都很简单，而且Visual Basic还很好玩。</p>
<p>当然，虽然VB又简单又好玩，但是有人<span class="blackout">我们的老师</span>成功地把VB讲成了一个比C语言还困难的语言，而且不是因为内容深，而是<span class="blackout">讲得不好</span>……。由此可见，<strong>编程语言学不好是自己的问题——没找到合适的入门教程</strong>。</p>
<p>很多人喜欢看清华大学出版社的谭浩强的书。不要以为清华大学出版社的书有多么好，特别是<strong>绝对不要看谭浩强的C和C++书</strong>！这里绝对不是抹黑他——80年代的时候，谭浩强写了一系列关于BASIC语言的书，为编程语言在中国的普及做出了贡献。然而，C语言可不像BASIC那样简单，而且他自己都没学明白，他的书怎么可能讲明白？结果就是，他的C语言书不仅讲不明白，而且还误导人。</p>
<p>如果有闲功夫的话，可以拜读一下C语言之父Dennis Ritchie（dmr）的《C程序设计语言》。这本入门书比大多数国产C语言书薄，但是是一部经典。毕竟是C语言亲爹写的。</p>
<h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><p>回答“只要多努力……”、“只要多练习……”当然没有意义，所以下面写一些个人经验。</p>
<p>注意，本文有一个前提——“非计算机专业”。因此我假设学完C语言基本上是为了通过考试和二级。</p>
<h2 id="新思维"><a href="#新思维" class="headerlink" title="新思维"></a>新思维</h2><p>大学每一科目都有自己的思维方式，C语言也一样。</p>
<p>C语言作为一门“语言”，当然有自己的语法，只不过是人类和机器约定好的、互相都能看得懂的语法。人类可以一目十行，但是对于机器而言，它只能一行一行地读、一句一句地读。</p>
<p>如果把每一条语句当作一件事儿，那么计算机当然是有条不紊地做事儿。写代码的时候，你当然也要一件事儿一件事儿地做。</p>
<p>因为我们学的是简单的单文件的C语言，所以实际上代码结构基本都是这样的：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 输入</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 处理</span></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 输出</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>做题的时候（编写练习程序和做题类似），按照题目要求逐步完善输入、处理和输出过程。也就是按照题目要求填坑。至于能不能填上，就看你积累了多少“段子”——这和多做数学题积攒解题思路是差不多的。</p>
<p>填坑的时候有一个技巧：如果遇到困难，尽量先把题目的语言翻译成“像C语言的东西”。例如，“判断n是否为XX数，如果是则输出YES和全部的xxx，否则输出‘NO’”。那么首先应该能够想到，“判断”是if，因此：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (n是XX数)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">    <span class="comment">// 输出全部的xxx</span></div><div class="line">    <span class="built_in">printf</span>(全部xxx);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那什么是“XX数”呢？看题目其他条件，例如“一个数恰好等于因子之和”，那么if语句应该是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (n == n的因子之和)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>“因子”之和怎么求呢？按照以往的练习，因子是用for语句找的，所以在if之前最起码得有个for语句：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (i是因子)</div><div class="line">    &#123;</div><div class="line">        sum=sum+i;    <span class="comment">// 不要忘记前面 sum=0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (n == sum)</div><div class="line">...</div></pre></td></tr></table></figure>
<p>“是因子”实际上就是整除，即“n%i==0”。</p>
<p>假如题目还需要输出所有因子。毕竟不是ACM比赛，对性能也没有太高要求，那么我们不妨在找因子的时候把类似代码再敲一遍。</p>
<p>最后检查一下输入输出格式，把细节完善（见后面的“一一对应”），然后测试、调试，一切OK就可以提交了。如果考试是笔试，实在遇到困难，也可以用类似方法骗分。</p>
<h2 id="先问搜索引擎"><a href="#先问搜索引擎" class="headerlink" title="先问搜索引擎"></a>先问搜索引擎</h2><p>问问题是一门艺术。在错误的时间、错误的地点找错误的人问了错误的问题，那是要失败的。</p>
<p>学习编程会遇到很多问题，例如不会搭建开发环境、忘记某个函数的名字或参数、遇到错误，这时候不建议马上去问别人。不妨先自己尝试解决，如果解决不了，再到搜索引擎上搜索。</p>
<p>如果不会使用搜索引擎，可以<a href="https://vjudge1.github.io/kuso/sos/?wd=%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">点击这里</a>查看动画演示。</p>
<p>因为大多数语言和框架（在开发项目时，从零开始是不理智的）是老外写的，对于某些问题，如果你用英文搜索，可能会更快得到结果。这时候你可能就要想办法找谷歌了。</p>
<p>在技术方面的中文搜索中，百度和谷歌区别不太大。百度经常有误导人的推广，但是在技术话题上这个问题并不明显。</p>
<p>在英文搜素方面，百度几乎不可用。谷歌最好（直接与StackOverflow整合），如果在网络方面遇到困难，也可以考虑必应。当然，因为很多外国网站使用谷歌服务器来加速（CDN），所以点进链接后可能会卡半天不出内容。遭遇这种情况的话，你还是需要先把网络问题解决一下。</p>
<p>因为全世界包括那个没有国际互联网<span class="blackout">只对老外和少数特权人士开放</span>的朝鲜都使用C语言，因此搜C语言本身的东西不会遇到太大困难。</p>
<h2 id="照猫画虎"><a href="#照猫画虎" class="headerlink" title="照猫画虎"></a>照猫画虎</h2><p>不要问别人“xxx怎么写”——照着书上的代码改，或者到搜索引擎上找代码，照着他们的代码改。</p>
<p>学习一门编程语言，很多时候找个老师不如<strong>找一段示例代码，照着敲一遍，编译运行，观察现象，然后对代码稍作修改，编译运行，观察产生了什么变化……</strong></p>
<p>需要注意的是，有些东西涉及算法（应该都是简单算法，不涉及数据结构），例如简单素数判断<span class="blackout">（素数测试有很多种）</span>。那么你需要找到一些现成的代码，搞清楚处理过程中哪些变量是输入、哪些是结果，了解大致的思路，然后自己写一遍。这种东西务必亲自上机写一遍，哪怕没有完全理解——光靠背是不现实的。</p>
<p>因为很多算法的套路是固定的，因此建议学过函数之后，自己编程的时候把它们都扔到函数里，例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> number)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;number; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用的时候直接<code>is_prime(a)</code>，既方便又避免出错。</p>
<h2 id="一一对应"><a href="#一一对应" class="headerlink" title="一一对应"></a>一一对应</h2><p>编程是个比较严谨的东西。初学者在写代码的时候，为了避免出错，要注意“一一对应”：</p>
<ul>
<li>解答题目的时候，你的代码是否和题目条件、输入输出格式要求对应？</li>
<li>该写分号的地方是否写分号了？</li>
<li>不该写分号的地方是不是没写？（例如for (…;…;…)的后面不应该写，如果故意要写，最好用个注释说明一下）</li>
<li>printf、scanf中的“%d”（或别的什么）是否和后面的变量一一对应？</li>
<li>假如后面不是int类型，你前面是否还在用“%d”？</li>
<li>scanf后面有没有“&amp;”？</li>
<li>int main()、if、while、for等的圆括号是否匹配？后面是否跟了“{”和“}”并且数量匹配？<ul>
<li>虽然if、while、for后面代码只有一句时可以省略花括号，但是强烈建议你不要偷这个懒。</li>
</ul>
</li>
<li>在使用变量的时候，前面是否已经定义了？（例如要scanf n了，前面是否有int n？按照题目要求是不是应该为int？）</li>
<li>在使用“++”、“–”、“+=”等符号的时候，前面是否已经初始化了？初始化的值和初始化的位置是否正确？</li>
<li>数组大小是否不比题目要求的小？<ul>
<li>为了安全，建议开大点。例如题目说最大100，你就开110甚至是11000。反正贪污和浪费内存不是极大的犯罪（by 毛泽西）。</li>
</ul>
</li>
<li>头文件都写全了吗？<ul>
<li>为了安全，可以把你听说过的标准库的头文件都写上。ACM比赛经常有这样做的：#include的行数比代码实现的行数都多……</li>
</ul>
</li>
</ul>
<h2 id="多试验"><a href="#多试验" class="headerlink" title="多试验"></a>多试验</h2><p>别怕试验。多写一些小片段，看看那些代码是怎样运行的。</p>
<p>举个例子——for循环到底执行了多少次：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span> (i=<span class="number">12</span>; i&lt;<span class="number">15</span>; i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"A"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (i=<span class="number">12</span>; i&lt;=<span class="number">15</span>; i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"B"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</div></pre></td></tr></table></figure>
<p>scanf和gets的冲突：scanf和get紧挨着可能在输入数据时遇到问题，这时候需要一个小技巧……</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;n);</div><div class="line">fgets(str, <span class="number">100</span>, <span class="built_in">stdin</span>);   <span class="comment">// 其实就是 gets(str) 的推荐写法</span></div><div class="line"><span class="built_in">puts</span>(str);                <span class="comment">// 如果那个scanf里没有“\n”，gets的时候……</span></div></pre></td></tr></table></figure>
<p>再举个例子（指针与一维数组）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>&#125;;</div><div class="line">    <span class="keyword">int</span> *p = a;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, &amp;a[<span class="number">0</span>]);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p+<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(p+<span class="number">1</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p+<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为只是为了看个结果，所以，只要自己能把结果弄明白，怎么舒服怎么来。</p>
<p>（当然有个重要前提——你手头得有个电脑。如果没有，可以买个Win10平板，只需要几百块钱，比手机便宜，又方便又实惠……当然装Linux系统可能会遇到困难）</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>经常有人问“为什么我的代码结果不对”，然后贴上一段代码。这是非常令人讨厌的行为。</p>
<p>为了不被人鄙视，大家应该学一些调试的技巧。</p>
<p>作为非专业人士，与其学习那些复杂又难用的调试工具，不如学习又简单又实用的 printf。</p>
<p>printf有两大作用：定位错误、查看中间值。</p>
<p>假如程序崩溃了，可以这样调试：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> i, n;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"准备读n\n"</span>);</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, n);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"准备读a\n"</span>);</div><div class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">&#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"开始处理\n"</span>);</div></pre></td></tr></table></figure>
<p>假如崩溃的时候屏幕上面只有“准备读n”而没有“准备读a”，说明中间夹着的scanf有问题；假如崩溃的时候有“准备读a”而没有“开始处理”，说明中间夹着的for有问题，这样你可以在for语句内部插入一些<code>printf(&quot;a\n&quot;)</code>，从而精确地找到错误的出处（例如，崩溃的时候看到10个a，说明数组开得不够大）。</p>
<p>如果计算结果不正确，可以这样调试（筛法求素数）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> i, num, isprime;</div><div class="line">isprime = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (num=<span class="number">2</span>; num&lt;<span class="number">10</span>; num++)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;num; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"DEBUG: %d不是素数(╯°Д°)╯︵ ┻━┻\n"</span>, num);</div><div class="line">            isprime = <span class="number">0</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"DEBUG: %d 是素数吗？%d\n"</span>, num, isprime);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isprime)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果只有2和3。通过观察调试输出，发现程序认为5不是素数。按理说，如果不是素数，屏幕会输出一个掀桌子的表情。然而程序认为5不是素数，但是还没有掀桌子表情，说明问题出在isprime变量上面——<code>isprime=1</code>的位置不对。</p>
<p>当然，交作业的时候别忘了把这种输出删掉。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>不要把测试和调试搞混。用一句话概括它们的区别：测试是为了观察“程序结果是否正确”，而调试是为了“找到程序的错误”。</p>
<p>很多初学者经常不做测试，或者不做充分的测试就提交，然后遇到问题就反复改，反复提交。这样也是不好的。</p>
<p>Online Judge就是测试的一种：系统预置了一系列数据和答案，按照题目要求解题、提交，系统会自动编译和运行代码，检查程序是否能在规定时间内处理预定输入并得到正确结果。在比赛中，错误提交是要影响成绩的，因此选手必须要学会自己测试，争取一次提交就通过。</p>
<p>程序编译通过之后，当然要用数据检验一下结果。如果把样例输入敲进去结果都不对，那程序肯定不行。</p>
<p>光通过样例也是不行的。为了保证通过，你应该自行构造多个输入，观察输出是否正确。应从以下几个角度构造数据：</p>
<ol>
<li>守规矩的计算</li>
<li>不守规矩的计算：如果题目没做保证，那么应假设有非法数据。假如题目没说a一定大于0，那你有没有想到a可以等于0或-1？</li>
<li>多种情况：假如程序有多种结果（Yes/No），你是否都测试到了？</li>
<li>边界条件：假如最多100个人，那么你的程序在恰好输入100个人的情况下能否正常工作？<ul>
<li>没有人或只有1个人呢？</li>
<li>稍微提一下，假如数组有100个元素（int a[100]），访问a[100]是非法的，但是在你自己电脑上不一定报错。这是一个隐藏的错误。为了避免这种错误，可以把数组开大一些，例如200甚至10000。</li>
</ul>
</li>
</ol>
<p>除此之外，初学者常常忽略的问题有空格（一个空格、两个空格、多个空格、行末空格）、回车（例如最后一行的回车）、字母大小写和符号全半角，还有不明显的格式差别（例如题目要求用逗号分隔你却用了空格）。因为测试是全文逐字比较的，所以不要犯这种低级错误。</p>
<h2 id="养成好习惯"><a href="#养成好习惯" class="headerlink" title="养成好习惯"></a>养成好习惯</h2><p>建议大家照做，因为这样可以避免很多不必要的错误：</p>
<ul>
<li>如果你不知道全角符号<code>，。、（）</code>和半角符号<code>,.\()</code>有什么区别，那么建议你写代码的时候把输入法关掉，免得出现莫名其妙的错误。</li>
<li>不同功能（定义变量、输入、数据处理、输出）之间留点空行，也就是按功能分块，就像前面提到的那样。</li>
<li>接上条，如果代码太长，那么最好多用一些函数，把各功能分离出来。写代码的时候一个功能一个功能地写。没有人喜欢又长又臭的代码。</li>
<li>缩进，一定要保持代码的缩进。没有缩进的代码难以理解，而且很有可能丢花括号，从而造成不必要的麻烦。</li>
<li>使用“黑科技”（不解释就难以理解）的时候要加注释。</li>
<li>if、for等语句后面可以不加花括号对吧？别懒，把花括号加上，免得犯这样的错误：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (a &gt; b)</div><div class="line">    c=a;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div><div class="line"><span class="keyword">else</span></div><div class="line">    c=b;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</div></pre></td></tr></table></figure>
<h1 id="如何通过二级"><a href="#如何通过二级" class="headerlink" title="如何通过二级"></a>如何通过二级</h1><p>这是也很多人关心的问题。虽然事实上计算机二级比英语六级容易通过（对于985、211的学生来说，只要英语三级也就是高考成绩不太烂，英语四级裸奔也能过……），但是很多人还是没通过。这不是他们不刻苦或者学得不好，而是因为他们不知道如何对付一个考证级别的考试。对，和英语四六级有着本质的区别。</p>
<p>首先用一句话概括通过计算机三级和四级的武林秘籍：去购买高等教育出版社的、封面上带个大大的黄色字母K的官方教材，从头到尾把题刷一遍，该背的（包括试题）背下来，如果还没通过那你肯定是故意的。</p>
<p>一本官方教材胜过N本练习册。</p>
<h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><p>虽然二级过了三四级成绩才能算数，但是，之所以先介绍三四级，是因为三四级比二级好过——三四级基本上可以纯背，但二级还是要会点东西的。下面就介绍介绍二级C语言：</p>
<ul>
<li>选择题40分，大题（改错、填空、编程）60分。</li>
<li>上机考试，先做选择题，选择题全部做完才能做大题。做选择的时候电脑屏幕是锁死的，做大题的时候才能使用编程软件。</li>
<li>题目是从题库里随机抽的，所以不要尝试照旁边的人抄。当然，运气好的话，你会碰到和官方教材中差不多的题。撞大题的概率更高。</li>
<li>选择题中至少有20~30分来自“二级公共语言基础”，这个“公共语言基础”大致分成两类，一类是“算法与数据结构”，需要你去理解一些东西；另一类不管它是啥，反正是纯粹要背的东西。剩下的选择题和C语言本身有关。</li>
<li>C语言课的东西够用了，关键是你对考试出题的基本法的了解程度。</li>
<li>编程软件是钦点的Visual C++ 6.0，虽然它是盗版的，虽然它很可能无法在你自己的电脑上正常运行。</li>
<li>二级考完只有三种状态：没通过（&lt;60分）、合格（60~89分）、优秀（90~100分）。因此，如果你不打算拿优秀证，考60和考89没有任何区别。（在这一点上，英语四六级就不一样——证书上面把成绩写出来了）</li>
<li>因为计算机二三四级证书都很水，因此，求职时如果应聘条件没有明确要求，不要指望拿这些证书给自己贴金。虽然二级可能是很多岗位的基本条件之一。</li>
<li>最后，如果你想考三四级，一定要看清楚对应科目对二级的要求——是要求通过编程语言类的二级还是数据库语言类的二级。如果你二级报的是Office那还是别考三四级了。</li>
</ul>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p>如果你觉得大题把握很大，而且没有拿优秀证的打算，那么“二级公共语言基础”的东西就可以少背一点了。反之要多背一些。</p>
<p>“算法和数据结构”是一个不太容易懂的东西——如果学得很好，没准就可以去打ACM比赛了。既然是个只需要拿60分的考证，那么不妨把官方教材拿出来，看看他们喜欢怎样出题，把相关考点记住即可。</p>
<p>有关C语言本身的选择题，实在不懂也不必太较真，因为它可能没有意义：例如经典的<code>a+=a-=a*a;</code>和<code>a=a++;</code>都是未定义行为——连C语言标准对这些语句的结果都没有任何保证，所以肯定没有正确答案。</p>
<h2 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h2><p>大题是一定要会的。如果你没有精心准备，选择题分数可能会惨不忍睹，因此大题要尽量把分数都弄到手。</p>
<p>为了把分数搞到手，我们要从两方面准备，一方面是正确解答题目，另一方面是正确地解答题目。</p>
<h3 id="正确解答题目"><a href="#正确解答题目" class="headerlink" title="正确解答题目"></a>正确解答题目</h3><p>大题分为改错、填空、编程。</p>
<p>改错就很简单了。因为改错的模式都比较固定，只要多看看官方的题目就应该清楚他们会怎样考了。</p>
<p>填空也一样。一般是让你填一些“单词”，或者是些简单的表达式。填空时候要多留意已经定义和未使用的变量。</p>
<p>其实吧，改错和填空题很多时候就是<strong>推理</strong>题——不用太清楚程序干嘛，只要保证所有变量都被用过了，该对应的地方都对应了，OK。</p>
<p>编程题要注意：数组、指针和字符串对于初学者来说比较难理解，对吧？不幸的是，出题人也爱考这些东西。因此，还是要看官方教材，看看他们喜欢怎样出题，并且建议你在做这些题的时候亲自上机练习一下。</p>
<h3 id="正确地解答题目"><a href="#正确地解答题目" class="headerlink" title="正确地解答题目"></a>正确地解答题目</h3><p>两个要点：一是不犯低级错误，二是要会用Visual C++ 6.0编辑代码。</p>
<p>不犯低级错误，举个例子，题目提示<code>只修改/******* FOUND *******/下一行的代码</code>，那么你不要改其他地方的代码，也不要把这个注释本身修改或删除。此外尽量不要碰原有代码的其他部分，例如空格和缩进。</p>
<p>Visual C++ 6.0是一个古老的软件了（1998年发布），在现代操作系统（Windows 8/8.1/10）中会出现兼容性问题，甚至无法启动。因此，平时在自己电脑上练习的时候可以使用其他编程软件，然后考前去一趟机房（机房应该安装了Visual C++ 6.0），学会如何打开和保存代码（考试软件会帮你打开代码）、如何找到<code>int main()</code>、如何编译运行。知道这些就足够了。</p>
<img src="/2015/12/30/learn-c/vc6.png" alt="会点这三个按钮就够了。" title="会点这三个按钮就够了。">
<p>会点这三个按钮就够了。</p>
<h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><p>对于非计算机专业的学生来说，尽管C语言很难学，尽管C语言<span class="blackout">看起来</span>“不实用”，但是很多编程语言的套路都是类似的，因此学完C语言有助于其他“实用”语言的学习。有些“实用”语言甚至直接向C语言致敬，例如PHP。</p>
<p>以下是一些当下很流行的、学起来可以“实用”的编程语言，如果有兴趣的话可以学一学。</p>
<ul>
<li>HTML+CSS+JavaScript：做网页的一套语言，虽然是三个，但是实际上哪个都不需要学得太深——一方面需要什么东西可以自己去查，另一方面现成框架太多了，很多时候用不着从零开始。我个人建议不要用Dreamweaver，即使用也要用最新的Dreamweaver CC，否则容易落伍。</li>
<li>PHP：想做个实用网站吗？学吧！就是它大量致敬了C语言的语法！<ul>
<li>由于PHP学习门槛很低，因此很容易写出有大量安全漏洞的网站。做项目时要多加小心。</li>
</ul>
</li>
<li>Python：Python是个小巧而又强大的脚本语言。建议有兴趣的一定要学。<ul>
<li>如果想写一个随写随用的程序，当然要找它；</li>
<li>如果想做一个实用的网站，同样可以找它——可以学习基于Python语言的Django框架；</li>
<li>如果想做一个带窗口对话框的程序，当然也可以找它——可以学习基于Python语言和Qt的PyQt框架。对于这种情况，建议同时学习PyQt和Qt C++。</li>
<li>Python有两套版本，一个是2.7.10，一个是3.5。它们两个有些差别，但是实际上不影响学习。遇到困难时到搜索引擎上搜一下就行了。</li>
</ul>
</li>
<li>Visual C#：C++和C#都带个“C”，那它们当然是从C语言衍生过来的……学C语言写不出一个带窗口对话框的程序对吧<span class="blackout">其实C语言有GTK+</span>，没关系，我们可以用一个好学的Visual C#，随手画个窗口出来！</li>
<li>Qt C++：同样是用来制作带窗口对话框程序的，只不过这个是C++语言。</li>
<li>Java：Android应用就是拿Java写的……</li>
<li>Objective-C：iOS应用是拿这个语言写的，只不过进App Store的门槛有点高。</li>
<li>MATLAB：数值计算、数值模拟必备。一定先把高等数学和线性代数学好然后再学这个……</li>
</ul>
<p>我不推荐Pascal和Basic，前者用的人数不多，后者……VB6也是1998年的东西，在现在的系统中已经不能正常运行了，而且学新版VB不如学C#。</p>
<p>另外还有两个硬件：</p>
<ul>
<li>Arduino：Arduino是一个卡片大小的开发板（如果不知道开发板是啥——就是可以让你拿来写程序的电路板），编程的时候基本上就是C或C++。与电路相关的东西都是封装好的，可以直接调用函数，所以不会被一些细枝末节困扰<span>当然对单片机和电路有一定了解之后那些细枝末节还是要学的</span>。虽然玩51单片机的人更多，但是从Arduino入门会容易很多。</li>
<li>树莓派：树莓派是一个卡片大小的单板电脑。虽然设计者的定位是儿童电脑，不过实际上被极客当成高级玩具了。最新的树莓派2可以跑Linux和Windows 10（物联网版）系统，对物联网感兴趣的可以玩玩。</li>
</ul>
<p>我个人的学习建议：</p>
<ol>
<li>尽量找外文书的中译本，原因很简单，翻译一本书需要付出大量时间精力，因此能够被拿来翻译的书基本上都是好书。<span>因为写书很容易，因此国内很容易出烂书。外国的月亮也不圆——外国也一样。</span></li>
<li>把书粗读一遍，大致了解一下基本语法。很多语言的基本结构都差不多，只不过单词不一样罢了。</li>
<li>细读，看看（特别是翻译本）作者的思想和思路。</li>
<li>照着教材做个小练习。</li>
<li>不用强求把所有东西都记住。现在局域网那么发达，有问题可以直接去网上查。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题曾经专门给人做过讲座。不过既然有人&lt;span class=&quot;blackout&quot;&gt;例如学妹&lt;/span&gt;没听过，那我还是把自己的经验感悟写出来吧。&lt;/p&gt;
&lt;p&gt;说实话，现代人都比较功利——既然是非计算机专业的学生，那么C语言基本上是个用不着的东西。可是，它还是门必修课，那最起码不能挂科，对吧？&lt;/p&gt;
&lt;p&gt;内容很长，最好找个时间慢慢读。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心得" scheme="https://vjudge1.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="编程" scheme="https://vjudge1.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="C" scheme="https://vjudge1.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>编写图形界面程序</title>
    <link href="https://vjudge1.github.io/2015/11/23/gui/"/>
    <id>https://vjudge1.github.io/2015/11/23/gui/</id>
    <published>2015-11-22T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:24.259Z</updated>
    
    <content type="html"><![CDATA[<p>买了个 Windows 10 平板电脑，发现不能刷 Linux（因为各种没驱动），然后就遇到了一个问题——如果想随手写一个实用的 GUI 程序，用哪个比较好呢？</p>
<a id="more"></a>
<p>为了方便叙述，先把条件摆上：</p>
<ol>
<li>没有被现在的操作系统抛弃。</li>
<li>不要太占地方，因为平板一共才 60G。</li>
<li>能够快速开发——最起码得有个界面设计器。</li>
<li>最好能跨平台，因为我个人 Windows/Linux/Mac 经常换着用。</li>
</ol>
<p>条件 1 是针对 VB6 和易语言说的。这两个非常适合随手写随手用（快速应用开发，RAD），可惜它们都过时了。</p>
<p>条件 2 是针对 Visual Studio 的。VS 非常好用，可惜占空间太大了。即使是 Community 或者 Express 也不能选择只安装单一语言，只能看着不需要的东西在那儿白白占地方。</p>
<p>虽然很多事情通过一个脚本就能搞定，虽然现在是 Web 的时代，不过有些时候还是有个窗口对话框比较好用，因此我对常见的框架进行了一系列考察。</p>
<h1 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h1><p>Qt 是个跨平台的 C++ 框架。</p>
<p>Qt Creator 集成了代码编辑器、界面设计器等功能，新建一个项目之后就可以拿界面设计器画窗口，而且控件（VB 的叫法）自动实例化，所以不用像 MFC 那样需要手动添加变量，再加上布局管理、信号和槽等机制，非常方便，可以做到随手画随手写然后就随手拿去用。</p>
<p>不过 Qt 也非常占地方，大约需要 3GB——因为 Windows 没有 C++ 编译器，只能用 Qt 自带的 MinGW，或者把 Visual Studio 装上然后用它的编译器……</p>
<h1 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h1><p>Java 是跨平台的——是地球人就知道。所以说，用 Java 写的 GUI 程序也是。</p>
<p>虽然 Java 的 IDE 非常多，但是并不是所有 IDE 都有界面设计器，所以感觉真的很蛋疼。而且写 Java 代码同样蛋疼。</p>
<h1 id="Gtk"><a href="#Gtk" class="headerlink" title="Gtk"></a>Gtk</h1><p>即使抛弃 VS，C# 也是不错的选择。只不过，肯定不是 Windows Forms 框架了（Windows Forms 没开源）。</p>
<p>很多人都在找 Xamarin Studio 破解版，不过要是开发桌面应用的话，根本不用花钱（其实他们都写 Android 应用，那个可是价格不菲）。至于图形界面，就只好用跨平台的 Gtk# 了。</p>
<p>Xamarin Studio 的代码编辑和图形界面比 VS 逊色很多，不过它的只有几百兆的体积可比 VS 好多了。因为 Gtk# 也是 .Net 平台（其实是 Mono），所以 .Net 本身的东西（例如<code>System</code>）都是一样的，不过在 Gtk 那边我得摸着石头过河了，毕竟 Gtk# 不是那么主流。</p>
<p>备注：</p>
<ol>
<li>虽然新建工程里面写着 VB 其实它根本不支持 VB。</li>
<li>IDE 本身有一些 bug，例如不能调语言……中英文混合的界面实在蛋疼。</li>
<li>如果不需要界面设计器，可以拿着 Xamarin Studio 写 ASP.NET 应用。等开源的那个 ASP.NET 出正式版我就打算试试。</li>
</ol>
<h1 id="PyQt-PySide"><a href="#PyQt-PySide" class="headerlink" title="PyQt/PySide"></a>PyQt/PySide</h1><p>PyQt = Python + Qt，既然 Python 和 Qt 都是跨平台的，那么 PyQt 当然也是跨平台的。</p>
<p>PyQt 官网提供了附带 Qt 框架的 PyQt。不过反正都是闲着，而且已经装了 Qt，我就自己编译了——在 Windows 中编译，要事先把 PATH 环境变量设置好，然后做好找不到头文件的精神准备。只要准备充分，不比 Linux 中麻烦多少。</p>
<p>PyQt 除了把编程语言换成了 Python 以外，其他东西都是一样的。</p>
<p>不过，Qt 有一个集成的开发环境，PyQt 可没有——PyQt 提供了一个 Qt Designer，但是每次修改都需要自己运行代码生成器 PyUIC，这样就比较麻烦。比方说，如果建立了一个叫做 hello 的窗口（其中有一个按钮），运行了一遍 PyUIC，那么 helloworld 程序就需要这样写——</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</div><div class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</div><div class="line"><span class="keyword">import</span> hello</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWindow</span><span class="params">(QtWidgets.QWidget, hello.Ui_Hello)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        super(HelloWindow, self).__init__()</div><div class="line">        self.setupUi(self)</div><div class="line">        self.pushButton.clicked.connect(self.say_hello)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">(self)</span>:</span></div><div class="line">        QtWidgets.QMessageBox.information(self, <span class="string">"Hello"</span>, <span class="string">"Hello, world!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app = QtWidgets.QApplication(sys.argv)</div><div class="line">    f = HelloWindow()</div><div class="line">    f.show()</div><div class="line">    sys.exit(app.exec_())</div></pre></td></tr></table></figure>
<p>有人说 PyQt 和 Python 没多大关系，全都是 Qt。不过既然放着 C++ 不用，那肯定是冲着 Python 来的嘛——什么时候想给 Python 程序加个高大上的界面的时候就可以考虑一下了（其实还是想借 Python 的光）。</p>
<h1 id="Lazarus"><a href="#Lazarus" class="headerlink" title="Lazarus"></a>Lazarus</h1><p>若干年前，Delphi 是一个很火的编程软件，不知为何，后来逐渐淡出了人们的视线（不过 Delphi 一直在开发，从来未弃坑）。</p>
<p>Delphi 是要钱的。在这个讲究开源的时代，谁乐意为了一个写 helloworld 级别的程序而掏钱啊。所以 Xojo 也是没必要在乎的。</p>
<p>但是 Lazarus 就不一样了。它是社区搞的，自由软件，跨平台，而且一直在“山寨” Delphi。所以，直接找本 Delphi 的教材就可以进行学习了。</p>
<p>Lazarus 和 Delphi 新建工程之后都是直接出现一个窗口，然后就可以直接用鼠标画控件，就像 VB 和易语言那样，非常迅速、方便。只不过 Pascal 的语法和其他语言很不一样（比如赋值符号<code>:=</code>），所以可能除了那些打过信息学竞赛（不是 ACM）的人听过，其他人都没听过。</p>
<h1 id="Web-技术"><a href="#Web-技术" class="headerlink" title="Web 技术"></a>Web 技术</h1><p>Web 这么火，肯定有人想把 Web 那一套搬到桌面应用上。这样的例子很多，比如 Atom 和有抄袭嫌疑的 Visual Studio Code。</p>
<p>这一类框架使用 Node.js、Chromium、HTML5/CSS3/JavaScript——因为 Node.js 跨平台，浏览器跨平台（而且还是钦点的），那么这种应用当然也跨平台了。</p>
<p>因为我考察这些框架是为了随手写一个能用的程序（想想做网页的过程有多么痛苦），而且带着个大浏览器，编程和调试都很麻烦，所以当然不会拿这种框架来开发本地应用了。</p>
<p>再次强调，不是因为这种技术不好，而是不够轻巧。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>最后的结果是：留下 Qt、PyQt、Xamarin Studio 和 Lazarus。</p>
<p>Lazarus 启动就能动手编，很随意。在 Windows 中还有 Windows API 用。</p>
<p>拿 Qt 可以写点像样的东西。（备注：没说拿 Lazarus 不行）</p>
<p>PyQt……有人说那是 Qt，其实是用来抱 Python 大腿的。</p>
<p>Xamarin Studio 就留给将来学习 ASP.NET 用了。（如果 Visual Studio Code 不差的话可能还要换着用）</p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>出于现实的需要，我用 Java 了……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买了个 Windows 10 平板电脑，发现不能刷 Linux（因为各种没驱动），然后就遇到了一个问题——如果想随手写一个实用的 GUI 程序，用哪个比较好呢？&lt;/p&gt;
    
    </summary>
    
      <category term="经验总结" scheme="https://vjudge1.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="GUI" scheme="https://vjudge1.github.io/tags/GUI/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果安装心得</title>
    <link href="https://vjudge1.github.io/2015/09/13/hackintosh/"/>
    <id>https://vjudge1.github.io/2015/09/13/hackintosh/</id>
    <published>2015-09-12T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:28.569Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于周围有很多人想体验体验苹果系统，作为一个成功用上黑苹果的人，我随便写点心得吧。</p>
<a id="more"></a>
<div class="bs-callout bs-callout-info">
                <h4 id="什么是黑苹果"><a href="#什么是黑苹果" class="headerlink" title="什么是黑苹果"></a>什么是黑苹果</h4><p>黑苹果就是在自己（非苹果品牌）电脑上面安装的苹果系统。因为苹果官方不允许这样做，所以对于初学者来说，黑苹果的安装绝对比其他系统困难很多。</p>

            </div>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="买电脑"><a href="#买电脑" class="headerlink" title="买电脑"></a>买电脑</h2><p>如果你还没买电脑，建议咨询咨询已经装过黑苹果的人，尽量买一台配置接近苹果的电脑。<span class="blackout">土豪们可以直接买苹果电脑，反正 Pro 才一万多点，比戴尔的外星人便宜多了，而且还省了高达九成九的麻烦。</span></p>
<p>绝对不要：</p>
<ol>
<li>买联想或惠普的电脑。除非你想知道刷机刷成砖的样子。</li>
<li>买处理器是 AMD 的电脑。处理器是 AMD，意味着你和黑苹果无缘了。<span class="blackout">其实 AMD 也能装，就是麻烦事儿多点。</span></li>
</ol>
<h2 id="做好思想准备"><a href="#做好思想准备" class="headerlink" title="做好思想准备"></a>做好思想准备</h2><ol>
<li><p>如果你是从头开始，请做好<strong>长期斗争</strong>的准备！</p>
<p>如果事情一切顺利，大约需要一个星期的时间。如果事情不顺，可能得花几个月时间才能弄得比较好用。</p>
</li>
<li><p>安装双系统（3 个系统、4 个系统……）不会对电脑造成破坏，<span class="blackout">除非你脑残或手残。</span></p>
</li>
</ol>
<h2 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h2><p>请到<a href="http://bbs.pcbeta.com" target="_blank" rel="external">远景论坛</a>上面注册账号。这不是广告，而是各路网友智慧的结晶。</p>
<p>注册之后请大致扫一眼<a href="http://bbs.pcbeta.com/viewthread-1516108-1-1.html" target="_blank" rel="external">这个目录</a>。以后我们会经常和这个论坛打交道。</p>
<p>接下来本文会贴一些来自远景论坛的链接。有的需要阅读权限或下载附件，所以你当然要注册账号。</p>
<h2 id="认识一些概念"><a href="#认识一些概念" class="headerlink" title="认识一些概念"></a>认识一些概念</h2><p>如果对以下问题不感冒，那么请不要拿黑苹果练手。<span class="blackout">先好好练习如何装 Windows 系统，练会了再回来。</span></p>
<ol>
<li>苹果系统最新版本是多少？</li>
<li>装过系统吗？</li>
<li>你的电脑是 UEFI/Legacy、GPT/MBR？</li>
<li>什么是引导？</li>
</ol>
<h2 id="确定自己电脑能不能安装"><a href="#确定自己电脑能不能安装" class="headerlink" title="确定自己电脑能不能安装"></a>确定自己电脑能不能安装</h2><h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>只要电脑处理器不是 AMD 的，基本上没问题。<span class="blackout">可以直接下载一个已经装好的映像。</span></p>
<h3 id="笔记本"><a href="#笔记本" class="headerlink" title="笔记本"></a>笔记本</h3><p>只要不是 AMD 处理器，就可以看<a href="http://bbs.pcbeta.com/viewthread-1516108-1-1.html" target="_blank" rel="external">这里</a>。如果 CPU 和显卡符合要求，那么可以继续了。</p>
<p>苹果系统不支持 AMD 处理器。<span style="background-color: #111">可以通过更换破解之后的内核来安装。因为破解有一定的隐患（例如不能直接升级），所以说，即使能成功，我也不建议在 AMD 处理器电脑上安装。</span></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><div class="bs-callout bs-callout-success">
                <h4 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h4><p>在正式按照论坛教程安装系统之前，先看这里——</p>
<p>装系统，不管是安装哪个系统（Windows/Linux/黑苹果），思路都是一样的：</p>
<ol>
<li>下载安装盘</li>
<li>将下载好的安装盘制作成启动盘</li>
<li>通过启动盘启动安装盘</li>
<li>运行安装程序</li>
<li>完成系统安装</li>
<li>安装驱动</li>
<li>安装软件，开始使用新系统</li>
</ol>

            </div>
<p>由于 Windows 或比较流行的 Linux 发行版都希望用户能够轻松地把系统装到自己电脑上，所以，即使有些概念不太好理解，最终还是可以不太费力地把系统装好。</p>
<p>而苹果公司并不希望用户在普通电脑上面安装苹果，所以以上每一步操作都有着极大的障碍。而且，苹果是硬件公司，你的电脑很可能因为与苹果硬件不匹配而在半路出现问题！</p>
<p>装黑苹果感觉很复杂，原因就在此。</p>
<p>接下来将对以上几步进行讲解，并用 Windows 作对比。希望大家理解之后再去看论坛的教程。</p>
<h2 id="0-准备"><a href="#0-准备" class="headerlink" title="0. 准备"></a>0. 准备</h2><p>由于黑苹果的特殊性，我们应该做一些准备：</p>
<ol>
<li>把电脑硬盘给苹果划出一个分区。如果只想体验体验，那么 50GB 足矣。如果日后可能要作为日常系统使用（事实上很可能如此），并且要安装一些大型软件<span class="blackout">例如黄片</span>，那么就要多分一些，因为苹果系统分区基本上没办法改容量。</li>
<li>准备一个 PE 启动盘。一旦后悔，可以随时把电脑恢复原状。</li>
<li>虽然事实上只用 Linux 系统也能把黑苹果装好，但是我建议初学者在 Windows 里操作。因为在 Linux 中一旦出问题，只有那高高在上的<a href="http://cn.uncyclopedia.wikia.com/没有人" target="_blank" rel="external">没有人</a>才会来救你。</li>
</ol>
<div class="bs-callout bs-callout-info">
                <h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>不建议你用 Linux，是因为很难找到一个在 Linux 中刻录 dmg/cdr 格式的软件。如果你已经刻了一个安装盘，或者找到刻录软件了，您请便。只有刻启动盘、安装启动器和处理故障的时候才需要电脑上原有的系统。</p>
<p>Linux，装上 HFS+ 文件系统支持之后就可以读写 HFS+ 分区了，而且是免费的。</p>

            </div>
<h2 id="1-下载安装盘"><a href="#1-下载安装盘" class="headerlink" title="1. 下载安装盘"></a>1. 下载安装盘</h2><div class="bs-callout bs-callout-info">
                <h4 id="Windows-是这样的"><a href="#Windows-是这样的" class="headerlink" title="Windows 是这样的"></a>Windows 是这样的</h4><p>Windows 的安装盘是 ISO 格式的（我从来不考虑 GHO），所以可以很轻松地刻录成安装盘。即使不想刻录，基于 U 盘的解决方案也有很多。</p>

            </div>
<p>而苹果是这样的——苹果安装盘的映像是 dmg 或 cdr 格式的。不管是哪种，能够读取的软件都很少。而且普通电脑是无法直接拿来引导！</p>
<p>在远景论坛上面，苹果系统的安装盘一般分三种：</p>
<ol>
<li>原版——基于原版制作的安装盘。一般不是“彻底”的原版，而是进行了一些简单的加工，可以用于安装，因为“纯正”的原版在普通电脑上面根本用不了。</li>
<li>懒人版——经过破解，支持了 MBR 分区（因为苹果系统只支持 EFI+GPT）。除此之外，不要以为懒人版有什么额外的东西了。</li>
<li>整合版——整合了一些驱动。</li>
</ol>
<p>那么如何选择安装盘？这取决于电脑的配置情况——</p>
<ol>
<li>UEFI+GPT 优先选择原版。这是最接近原生苹果的搭配。</li>
<li>Legacy+MBR 当然只能选择懒人版。</li>
</ol>
<div class="bs-callout bs-callout-info">
                <h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><p>我的建议是，如果电脑支持而且你会操作，那么就先把电脑转换成 UEFI+GPT，因为在 MBR 条件下把系统装好，<strong>进行系统升级会带来很大麻烦</strong>，而 UEFI+GPT 可以大大方方地升级而不用担心出错。不过也可以在装完之后再转。<a href="/2014/12/18/legacy-mbr-to-uefi-gpt-hackintosh/">这里</a>是一个装完之后才转换的教程。</p>

            </div>
<div class="bs-callout bs-callout-warning">
                <h4 id="看不懂？"><a href="#看不懂？" class="headerlink" title="看不懂？"></a>看不懂？</h4><p>即使看不懂，也要清楚自己电脑到底是 UEFI+GPT，还是 Legacy+MBR，或者是什么方案，否则后面实在无法继续。</p>
<p>下面是一些简易的区分方法：</p>
<ol>
<li>Windows XP：肯定是 Legacy+MBR</li>
<li>Windows 7：绝大多数系统都是 Legacy+MBR</li>
<li>Windows 8 或更高：打开“计算机管理”，找到“磁盘管理”。如果里面有几个零碎的、没有盘符的分区，那么就是 UEFI+GPT，否则是 Legacy+MBR。</li>
<li>Linux：能够装 Linux，那么这个问题不用教了吧？（提示：看 /dev/sda1 后面是 sda2 还是 sda5）</li>
</ol>

            </div>
<h2 id="2-将下载好的安装盘制作成启动盘"><a href="#2-将下载好的安装盘制作成启动盘" class="headerlink" title="2. 将下载好的安装盘制作成启动盘"></a>2. 将下载好的安装盘制作成启动盘</h2><div class="bs-callout bs-callout-info">
                <h4 id="Windows-是这样的"><a href="#Windows-是这样的" class="headerlink" title="Windows 是这样的"></a>Windows 是这样的</h4><p>ISO 格式安装盘可以直接刻录到光盘里。因为现在很少有人使用光盘，所以一般都采用一些软件（例如 UltraISO）将安装盘刻录到 U 盘中。即使不直接刻录，通过 PE 启动盘也可以进行安装。总之解决方案非常多。</p>

            </div>
<p>由于苹果采用了特殊的文件系统（HFS+），所以在 Windows 中不太容易看到其中的文件。并且，由于没有引导信息，所以即使刻录好也无法直接引导启动（后面再讲如何启动）。</p>
<p>因此论坛教程会让你安装 <code>TransMac</code>、<code>Leopard 硬盘安装助手</code>之类的软件。这些软件将完成同样的“刻录”过程。</p>
<p>此外还有一点与 Windows 不同，刻录黑苹果安装盘的时候，有的教程会让你刻录到 U 盘中，有的教程会让你刻录到自己电脑硬盘中。这些都是可行的。</p>
<p>刻录完毕，有些教程会让你把刻录的磁盘分区的磁盘标记改为 AF（MBR 磁盘）或 {48465300-0000-11AA-AA11-00306543ECAC}。这是为了能让各种软件正确地将分区识别为“苹果系统分区”而不是损坏的分区。</p>
<h2 id="3-通过启动盘启动安装盘"><a href="#3-通过启动盘启动安装盘" class="headerlink" title="3. 通过启动盘启动安装盘"></a>3. 通过启动盘启动安装盘</h2><div class="bs-callout bs-callout-info">
                <h4 id="Windows-是这样的"><a href="#Windows-是这样的" class="headerlink" title="Windows 是这样的"></a>Windows 是这样的</h4><p>开机按 F12</p>

            </div>
<p>黑苹果就麻烦多了……</p>
<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><p>与刻录出来的 Windows 安装盘不同，苹果系统盘映像不含引导信息（就算有，普通电脑也根本无法引导）。</p>
<p>因此必须借助一个辅助程序，才能让普通电脑启动苹果系统。目前流行这两个程序：</p>
<ul>
<li>Clover (四叶草)——用于 UEFI+GPT 模式</li>
<li>Chameleon (变色龙)——用于 Legacy+MBR 模式</li>
</ul>
<p>变色龙有 Windows 版安装程序，而四叶草没有，因此四叶草的文件需要想办法弄到手。</p>
<div class="bs-callout bs-callout-info">
                <h4 id="EFI-引导"><a href="#EFI-引导" class="headerlink" title="EFI 引导"></a>EFI 引导</h4><p>通过 EFI 引导并不需要去“刻录”。以 U 盘为例，只要在 U 盘根目录里有个 EFI 文件夹，EFI 里面有个 BOOT，BOOT 里面有个 bootx64.efi，而且文件正确，电脑就能以 UEFI 模式引导 U 盘了。</p>

            </div>
<p>以后会经常遇到“-f”、“-x”、“-v”等字样，这些是 Chameleon 的；而“Verbose mode”、“Without caches”等字样是 Clover 的。</p>
<h3 id="驱动-Kext"><a href="#驱动-Kext" class="headerlink" title="驱动 (Kext)"></a>驱动 (Kext)</h3><p>苹果电脑把驱动叫做“Kext”。以后看到“SLE”（/System/Library/Extensions）、“EE”（/Extra/Extensions，变色龙专用）、“kexts/10.10”（Clover 安装目录/kexts/10.10，Clover 专用）要知道他们在谈论驱动的存放路径。</p>
<p>由于苹果电脑硬件和普通电脑不完全一样，部分驱动在普通电脑上面会产生错误，因此在正式进入安装程序之前，需要添加或删除一些驱动。</p>
<p>由于 Windows 无法直接操作苹果分区，所以有的教程会让你安装 HFS+ for Windows，并且够意思地给了一个注册码。（某些 Linux，如 Ubuntu，可以直接读取 HFS+ 分区，不过需要手动用 mount 挂载才能写入。）</p>
<p>添加和删除哪些驱动呢？看教程怎样说。此外有贴子专门解释了那些需要添加的驱动的作用。</p>
<h2 id="4-运行安装程序"><a href="#4-运行安装程序" class="headerlink" title="4. 运行安装程序"></a>4. 运行安装程序</h2><div class="bs-callout bs-callout-info">
                <h4 id="Windows-是这样的"><a href="#Windows-是这样的" class="headerlink" title="Windows 是这样的"></a>Windows 是这样的</h4><p>这一步 Windows 和黑苹果都一样，屏幕上都会出现能让人认识的中国字（虽然连成单词之后不一定知道是什么意思）。只不过，运气不好的话，黑苹果安装程序可以让系统崩溃……</p>

            </div>
<div class="bs-callout bs-callout-info">
                <h4 id="学会自救"><a href="#学会自救" class="headerlink" title="学会自救"></a>学会自救</h4><p>在激动人心时刻到来之前，我们必须学会如何自救。</p>
<p>一般情况下，教程都会告诉你应该用什么参数启动，并让你开启详细模式。但是，毕竟不是官方电脑，所以系统崩溃是正常现象。一旦崩溃，你需要知道如何通过错误信息进行自救。<a href="http://bbs.pcbeta.com/viewthread-863656-1-1.html" target="_blank" rel="external">这里</a>是一个常见错误总结。</p>

            </div>
<p>进行到这一步时，我们终于要和真正的苹果程序打交道了。</p>
<p>如果一进去就崩溃了，那么当然要去论坛搜索相关错误现象和错误信息。建议不要直接提问，以免被人鄙视。</p>
<p>安装向导都是中国字，很好懂。不过千万不要手残，选错了分区……</p>
<p>安装过程很漫长。即使电脑是固态硬盘，安装时间也不短。这个时候你只能祈祷不出错。</p>
<p>如果安装坚持到了最后，没崩溃，那么恭喜你！</p>
<h2 id="5-完成系统安装"><a href="#5-完成系统安装" class="headerlink" title="5. 完成系统安装"></a>5. 完成系统安装</h2><p>有的教程会让你重新删驱动，照做即可。</p>
<p>如果无法进入系统，那么一定要用“详细模式”引导，记录错误现象，并向论坛寻求帮助。</p>
<p>如果能够进入系统，那么接下来按照屏幕提示完成系统安装即可。都是中国话，应该没有人看不懂。</p>
<div class="bs-callout bs-callout-warning">
                <h4 id="讲解到此为止"><a href="#讲解到此为止" class="headerlink" title="讲解到此为止"></a>讲解到此为止</h4><p>可以逛论坛去了，因为在你真正操作到这一步的时候，麻烦才刚刚开始……</p>

            </div>
<h2 id="6-安装驱动"><a href="#6-安装驱动" class="headerlink" title="6. 安装驱动"></a>6. 安装驱动</h2><div class="bs-callout bs-callout-warning">
                <h4 id="先把系统装好"><a href="#先把系统装好" class="headerlink" title="先把系统装好"></a>先把系统装好</h4><p>先把系统装好，然后再讨论装驱动的问题。</p>

            </div>
<div class="bs-callout bs-callout-info">
                <h4 id="Windows-是这样的"><a href="#Windows-是这样的" class="headerlink" title="Windows 是这样的"></a>Windows 是这样的</h4><p>下载并按照“驱动精灵”，如果没有网卡驱动就下载集成网卡驱动的版本。全部装完之后把驱动精灵卸载就可以了。</p>

            </div>
<div class="bs-callout bs-callout-info">
                <h4 id="白苹果是这样的"><a href="#白苹果是这样的" class="headerlink" title="白苹果是这样的"></a>白苹果是这样的</h4><p>苹果是硬件公司——所有硬件都免驱，系统装好就可以使用了。</p>

            </div>
<p>安装系统，运气好的（初学者），几个小时就能弄好。运气差的也不会花太多时间。</p>
<p>因为绝大多数时间都花在驱动上面了。<span style="background-color: #111;">忘记备份驱动和 DSDT<br> 而重装系统也会产生相同的效果。</span></p>
<p>如果进行到这一步，接下来就要经常和论坛打交道了，例如<a href="http://bbs.pcbeta.com/viewthread-1516108-1-1.html" target="_blank" rel="external">这个导览</a>和<a href="http://bbs.pcbeta.com/viewthread-1470582-1-1.html" target="_blank" rel="external">这个导览</a>。</p>
<h3 id="网卡"><a href="#网卡" class="headerlink" title="网卡"></a>网卡</h3><p>网络是最关键的问题。有了网络，你才能到论坛上面搜答案。</p>
<p>有线网卡一般问题不大。到论坛里找到驱动，下载安装即可。</p>
<p>无线网卡问题很大，大致分为以下几种情况：</p>
<ol>
<li>Atheros、Broadcom 牌：如果论坛中提到解决方案，那么太好了。（有些型号免驱，装完系统就能直接用——这是最好的）如果“无解”，那么就得换无线网卡了。</li>
<li>Intel 牌：直接预备 30 块钱换无线网卡吧。</li>
<li>USB 无线网卡：弄清楚网卡芯片，然后到论坛上面寻找解决方案（驱动）。<strong>USB 无线网卡不稳定，容易导致系统崩溃。</strong></li>
</ol>
<div class="bs-callout bs-callout-info">
                <h4 id="无线网卡"><a href="#无线网卡" class="headerlink" title="无线网卡"></a>无线网卡</h4><p>到淘宝网即可很方便地买到支持黑苹果的无线网卡，而且价格并不算贵。不过最好先确认一下接口，并且确认应该使用半高还是全高（把电脑拆开就知道是什么意思了）。</p>

            </div>
<div class="bs-callout bs-callout-info">
                <h4 id="联想和惠普笔记本"><a href="#联想和惠普笔记本" class="headerlink" title="联想和惠普笔记本"></a>联想和惠普笔记本</h4><p>联想和惠普的笔记本采用了“白名单”机制，也就是说，你更换无线网卡，电脑会拒绝开机，并要求你将“非法的”无线网卡拆下来。</p>
<p>这时你需要找另外一台笔记本电脑，查看无线网卡的 DEV、VEN 和 SUBSYS 参数，并且按照刷白名单教程，通过一些工具提取 BIOS 固件，将白名单修改成你自己的网卡，并重新刷 BIOS。</p>
<p><strong>注意，刷机有风险，刷坏会变砖！</strong><span class="blackout">变砖也不怕，只要找到自己电脑型号的盲刷包，对电脑进行盲刷，即可救砖。我的电脑砖过一次，然后就是靠盲刷省了几千块钱……</span></p>
<p><a href="http://bbs.bios.net.cn/thread-4521994-1-1.html" target="_blank" rel="external">这里是刷白名单的教程</a></p>

            </div>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>一般情况下，Intel 核显是能够自动识别的，而 Nvidia 或 AMD 独显无解（即使系统能够识别出来），所以只能用核显。</p>
<p>大多数基于 Optimus 技术的笔记本是无法屏蔽核显的，这就意味着，N 卡独显在黑苹果中根本没有任何作用，除了多耗你一点电。如果不能把独显屏蔽，请到论坛搜索有关教程（涉及 DSDT，本文后面会提及）。</p>
<h3 id="声卡"><a href="#声卡" class="headerlink" title="声卡"></a>声卡</h3><p>声卡有两种解决方案：万能声卡驱动和仿冒官方声卡。</p>
<p>万能声卡驱动是最简单的——只需要安装一个叫做 VoodooHDA 的驱动即可解决问题。不过音量太大的时候可能会爆音。</p>
<p>而仿冒官方声卡是一个非常麻烦的过程，需要对硬件有一定的了解（需要改 DSDT，本文后面会提及）。对于新手来说，这个过程是非常漫长和复杂的。</p>
<h3 id="触摸板"><a href="#触摸板" class="headerlink" title="触摸板"></a>触摸板</h3><p>如果苹果系统不支持你的触摸板，那么可以用万能驱动（VoodooController），只不过你很可能体验不了苹果的触摸板手势。</p>
<h3 id="电池电量"><a href="#电池电量" class="headerlink" title="电池电量"></a>电池电量</h3><p>我是通过一个叫 ACPIBatteryManager 的驱动来解决问题的。如果安装这个驱动导致系统崩溃，那么只能去改 DSDT 了。</p>
<h3 id="USB-3-0"><a href="#USB-3-0" class="headerlink" title="USB 3.0"></a>USB 3.0</h3><p>我电脑没有 USB 3.0，所以我没做过相关研究。</p>
<h2 id="6-5-DSDT"><a href="#6-5-DSDT" class="headerlink" title="6.5 DSDT"></a>6.5 DSDT</h2><p>DSDT，简而言之就是用于识别硬件的<span class="blackout">、看多了容易脑残的</span>一些代码。</p>
<p>一般情况都是先从 Windows 或 Linux 中提取一个原始的 DSDT，然后在苹果系统中通过 DSDT Editor 来编辑。变色龙和四叶草都可以加载自定义 DSDT，所以你需要做的就是，改代码，保存，编译，重启，观察现象然后再改代码，如此反复。</p>
<p>此外还有一个工具叫做 IORegistryExplorer，是用来查看电脑硬件情况的。DSDT Editor 和它配合使用，效果更好。</p>
<p><span class="blackout">因为改 DSDT 非常容易导致脑残，所以装黑苹果不仅浪费时间，而且还特别耽误事儿。如果你因此丢了女朋友，我概不负责。</span></p>
<h3 id="亮度调节"><a href="#亮度调节" class="headerlink" title="亮度调节"></a>亮度调节</h3><h3 id="电池电量-1"><a href="#电池电量-1" class="headerlink" title="电池电量"></a>电池电量</h3><h3 id="原生电源管理"><a href="#原生电源管理" class="headerlink" title="原生电源管理"></a>原生电源管理</h3><div class="bs-callout bs-callout-info">
                <h4 id="这里是有意留空的"><a href="#这里是有意留空的" class="headerlink" title="这里是有意留空的"></a>这里是有意留空的</h4><p>如果遇到了相关问题，去论坛上面找答案吧。</p>

            </div>
<h2 id="7-安装软件，开始享受新系统"><a href="#7-安装软件，开始享受新系统" class="headerlink" title="7. 安装软件，开始享受新系统"></a>7. 安装软件，开始享受新系统</h2><p>这个不用解释了吧。</p>
<p>值得注意的是，尽管苹果系统免费，但是因为苹果公司要求系统只能在苹果设备上运行，所以你的黑苹果仍然是盗版。<span class="blackout">别带着自己电脑去外国嘚瑟，除非你想吃外国的牢饭。</span></p>
<h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="系统升级"><a href="#系统升级" class="headerlink" title="系统升级"></a>系统升级</h2><p>只要你没破解过内核，那么只管放心地从 App Store 升级系统。</p>
<p>如果你破解了内核（懒人版也是破解了内核），那么请先到论坛里把破解的内核下载好，升级之后重新破解一下。</p>
<p>如果嫌麻烦，建议你找个时间把自己电脑改成 UEFI+GPT 的。</p>
<h2 id="iMessage-和-FaceTime"><a href="#iMessage-和-FaceTime" class="headerlink" title="iMessage 和 FaceTime"></a>iMessage 和 FaceTime</h2><p>黑苹果直接登录是登不进去的，因为这两个服务会对系统的真伪进行验证。</p>
<p>使用变色龙的，变色龙本身有一个功能可以对这两个服务进行破解，从而顺利登录。</p>
<p>而 Clover 没有类似功能。因此，需要到网上搜一个（或者问一些认识人，或者去苹果专卖店偷）正版电脑的序列号，然后给苹果客服打电话。一般情况下，和苹果客服磨叽磨叽就能解决问题。<span class="blackout">当然，不要让他们知道你的苹果是假的，除非你被 DSDT 折腾脑残了。</span></p>
<h2 id="iWork-和-iMovie"><a href="#iWork-和-iMovie" class="headerlink" title="iWork 和 iMovie"></a>iWork 和 iMovie</h2><p>这两套软件在新苹果电脑上是免费的，而黑苹果用户到 App Store 里一看，会发现它们价格感人。</p>
<p>因此，需要到网上搜一下老苹果用户如何免费使用这些软件。大致的思路是，先把电脑系统的语言换成英语，然后下载旧版的软件，接下来蹭 App Store 的优惠活动（免费升级）。升级之后你就成功“购买”了这些软件——以后即使重装也可以随便用了。</p>
<h2 id="挂载-NTFS-磁盘"><a href="#挂载-NTFS-磁盘" class="headerlink" title="挂载 NTFS 磁盘"></a>挂载 NTFS 磁盘</h2><p>苹果系统可以读取 NTFS 磁盘，但是只读（因为苹果对 NTFS 支持有限，容易出错）。如果真需要写入，可以看<a href="/2015/05/30/enable-ntfs-writing-support-in-os-x/">这里</a>。</p>
<h2 id="维护相关"><a href="#维护相关" class="headerlink" title="维护相关"></a>维护相关</h2><h3 id="Recovery-HD"><a href="#Recovery-HD" class="headerlink" title="Recovery HD"></a>Recovery HD</h3><p>Recovery HD 是一个相当于 PE 的紧急系统。</p>
<p>只有原生安装盘才会装出一个 Recovery HD。如果你的电脑没有（例如用了懒人版），那么在转成 UEFI+GPT 之后升级系统，Recovery HD 也会冒出来。</p>
<h3 id="重装"><a href="#重装" class="headerlink" title="重装"></a>重装</h3><p>如果有 Recovery HD，那么只需进 Recovery HD 里，然后选择重装。总之，具体操作和白苹果是基本相同的，除了开机时不能按 Command-R。</p>
<p>当然，你应该备份一下自己破解时用的驱动，还有 DSDT。如果弄丢了，你几个星期的辛苦就全白费了。</p>
<h3 id="调整分区容量"><a href="#调整分区容量" class="headerlink" title="调整分区容量"></a>调整分区容量</h3><p>很少有支持 HFS+ 文件系统的磁盘分区软件。</p>
<p>对于一般电脑而言，苹果本身的“磁盘工具”会以为你用了 Bootcamp，然后拒绝调整容量。因此要用其他软件——</p>
<ul>
<li>Windows 中有 Paragon Partition Manager。</li>
<li>Linux 中有 GParted，但是只能缩小容量，不能扩大容量。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;鉴于周围有很多人想体验体验苹果系统，作为一个成功用上黑苹果的人，我随便写点心得吧。&lt;/p&gt;
    
    </summary>
    
      <category term="个人心得" scheme="https://vjudge1.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="Hackintosh" scheme="https://vjudge1.github.io/tags/Hackintosh/"/>
    
      <category term="Mac" scheme="https://vjudge1.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 系统中上 QQ</title>
    <link href="https://vjudge1.github.io/2015/08/20/wineqq/"/>
    <id>https://vjudge1.github.io/2015/08/20/wineqq/</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:38.722Z</updated>
    
    <content type="html"><![CDATA[<p>腾讯公司为了商业利益，放弃了 QQ for Linux 的开发。但是中国人又不得不用 QQ，于是……</p>
<a id="more"></a>
<p>Linux 世界出现了几种解决方案：</p>
<ol>
<li>WebQQ（腾讯同样放弃了）/SmartQQ</li>
<li>分析 WebQQ 或什么的协议，自己写客户端</li>
<li>虚拟机：包括装 Windows 的和装 Android 的（GenyMotion）</li>
<li>WineQQ</li>
</ol>
<p>第一点当然最稳定，只不过功能少点，而且很容易顺手就把浏览器关掉了；第二点容易被封号；第三点当然很稳定，只不过有个虚拟机总给人一种累赘的感觉。</p>
<p>所以 WineQQ 是一个折中的方案——不稳定，功能够多，不让人觉得累赘。</p>
<p>最初的 WineQQ 是有 longene 团队开发的，现在他们已经弃坑（毕竟 wineqq 是副业），而深度团队和 CrossOver 合作（当然没有腾讯参与），已经出了比较新的 WineQQ。</p>
<p>由于 wine 也支持 OS X 系统，所以苹果电脑同样可以用类似的方法使用 QQ。只不过，因为 QQ 有官方的苹果版，所以没有人会在乎这个。</p>
<h1 id="更新-wine"><a href="#更新-wine" class="headerlink" title="更新 wine"></a>更新 wine</h1><p>因为 Ubuntu 的 wine 比较旧，所以需要将 wine 更新到 1.7 版：</p>
<pre><code>sudo add-apt-repository ppa:ubuntu-wine/ppa
sudo apt-get update
sudo apt-get install wine1.7
</code></pre><p>其他系统（Fedora、Archlinux等等）可以略过。</p>
<h1 id="下载和安装-WineQQ"><a href="#下载和安装-WineQQ" class="headerlink" title="下载和安装 WineQQ"></a>下载和安装 WineQQ</h1><p>深度 WineQQ 是个 deb 安装包，但是因为用到了深度专有的软件包，所以 Ubuntu 等系统无法直接安装。</p>
<p>先把它<a href="http://packages.linuxdeepin.com/deepin/pool/non-free/d/deepinwine-qq/" target="_blank" rel="external">下载</a>下来，当然，不要直接安装。</p>
<p>使用解压缩软件解压，再将名为 control 的包解压（有的软件识别 deb 格式，看见的就是直接识别出来的内容），将其中的 opt/cxoffice/support/Deepin-QQ 目录解压到某个目录，例如 ~/Deepin-QQ。</p>
<p>最后，运行命令：<code>WINEPREFIX=~/Deepin-QQ wine &quot;C:\Program Files\Tencent\QQ\Bin\QQ.exe&quot;</code>，WineQQ 就弄好了。</p>
<p>为了方便，可以将这条命令制作成脚本或启动器。</p>
<h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><p>假如 Deepin-QQ 目录是 /home/ubuntu/Deepin-QQ。</p>
<p>想办法弄一张 QQ 的图片，保存到 /home/ubuntu/Deepin-QQ/qq.png。这张图将作为启动器（以及应用程序菜单中）的图标。</p>
<p>建立一个文件 ~/.local/share/applications/qq.desktop，用文本编辑器将其打开，并输入</p>
{% highlight ini %}
[Desktop Entry]
Type=Application
Categories=Network;InstantMessaging;
Comment=
Terminal=false
Name=QQ
Exec=/usr/bin/env WINEPREFIX=/home/ubuntu/Deepin-QQ wine "C:\Program Files\Tencent\QQ\Bin\QQ.exe"
Icon=/home/ubuntu/Deepin-QQ/qq.png
{% endhighlight %}
<p>保存之后就可以在应用程序菜单中找到 QQ 了。</p>
<h2 id="QQ-卡死的处理"><a href="#QQ-卡死的处理" class="headerlink" title="QQ 卡死的处理"></a>QQ 卡死的处理</h2><p>毕竟是 wine，而且是腾讯不支持的项目，卡死崩溃都是正常现象。一旦卡死，可用以下命令结束所有 QQ 进程：</p>
<pre><code>WINEPREFIX=/home/ubuntu/Deepin-QQ wineserver -k
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;腾讯公司为了商业利益，放弃了 QQ for Linux 的开发。但是中国人又不得不用 QQ，于是……&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="https://vjudge1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="https://vjudge1.github.io/tags/Linux/"/>
    
      <category term="wine" scheme="https://vjudge1.github.io/tags/wine/"/>
    
      <category term="QQ" scheme="https://vjudge1.github.io/tags/QQ/"/>
    
  </entry>
  
  <entry>
    <title>常见的云服务器</title>
    <link href="https://vjudge1.github.io/2015/08/16/cloud/"/>
    <id>https://vjudge1.github.io/2015/08/16/cloud/</id>
    <published>2015-08-15T16:00:00.000Z</published>
    <updated>2017-05-15T18:40:43.422Z</updated>
    
    <content type="html"><![CDATA[<p>做出一个网站，到哪里去找一个合适的服务器呢？</p>
<a id="more"></a>
<div class="bs-callout bs-callout-danger">
                <h4 id="原作者"><a href="#原作者" class="headerlink" title="原作者"></a>原作者</h4><p>本文原是<a href="http://wangchenyu.net.cn" target="_blank" rel="external">课戴表王晨宇</a>写的，稍微整理了一下格式。转载请标明原作者！</p>

            </div>
<h1 id="云主机"><a href="#云主机" class="headerlink" title="云主机"></a>云主机</h1><p>没有用过 benchmark 来跑分，但是我用 php 探针检测，腾讯云的可能因为是共享核吧的计算时间比列表中的参考值要大，阿里云的计算时间就比列表中的参考值都要小。我见网上很多人评论阿里云的硬盘速度慢，不过实际上网站的速度决定于 CPU 运算时间长短还有内存够不够用——除非你有别的用处。</p>
<p>国内的我就用过腾讯云的 512M 共享核、阿里云的 1G 1核、阿里云的 512M 1核。实际上其他的也都不咋地了。</p>
<p>国外的主机商我用过 DigitalOcean 的 512M 单核、Amazon AWS的各种配置（所有的“通用”型配置都用了一遍）、Windows Azure 4G、7G内存（免费体验嘛…）、vps.me的 128M 单核、HapHost 的 128M 单核、Conoha.jp 日本 1G 双核。</p>
<p>IBM 的 Softlayer 只能算是应用引擎，所以后面再讲。</p>
<p>可惜没能用上 Linode，因为不支持我的信用卡。</p>
<h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><ul>
<li>价格：512M 单核一年只需 288，但是流量费用另计。不过感觉起来是要比腾讯云划算。</li>
<li>操控性：可以随意的升级、降级、按月付费。</li>
<li>网速：下载东西时也是峰值 1~1.5MB/s 良心。不过因为我选择的青岛区域机房，所以在学校（备注：学校在青岛）的 ping 值 10 以下，有时候宿舍甚至是 2ms 1ms 爽。对了，腾讯云的共享核只能选广东。</li>
<li>系统：可以选择 Debian 5 32位。我选择的是 CentOS，一方面 yum 功能很强大，另一方面阿里云特别优化了 CentOS，装好启动内存在占 14M，我又稍微精简了一下只占 13M。镜像市场比腾讯云丰富的多，甚至有预装了 hhvm 的镜像。</li>
<li>客服：只能电话或者工单。不过工单一般一天内就回复了，技术类的几分钟就回复。</li>
<li>赠品：云盾是个好东西，能真的帮忙拦截 web 攻击和 ssh 攻击。不过 ssh 攻击只要主机优化好了也没啥。送 128M 的 OCS（完全兼容 memcached）也是一个大礼，尤其是对于 512M 内存的服务器，简直是雪中送炭。我的网站就在用，目测提速不少。通过 ACE 还可以开通免费的 RDS（rds 可能将来会收费）。</li>
</ul>
<h2 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h2><ul>
<li>价格，一年 360 块钱的共享核能凭借低价吸引很多人。</li>
<li>操控性：我是贪便宜的上当者，因为买了以后才发现不能升级、不能退款，只能以年为单位续费。所以只好挂一个小网站耗着。也有优点，就是可以直接在后台给 Linux 服务器挂载 SSH 密钥。然而这个小小的优点……有点鸡肋。</li>
<li>网速：下载东西时 1M 宽带峰值 1~1.5MB/s 良心。</li>
<li>系统：后台可选择的系统不多，至少没有“专门针对小内存主机”的 Debian 32 位系统。好在服务市场里面免费环境很多。</li>
<li>客服：比较垃圾。联系很多次有时候等一天都排不上个队。</li>
</ul>
<h2 id="DigitalOcean"><a href="#DigitalOcean" class="headerlink" title="DigitalOcean"></a>DigitalOcean</h2><ul>
<li>网速：网上大批的 do 的评测文章因为邀请一个人注册送 10$，但是国内线路最好的 San Francisco 节点我用起来感觉一点也不好。虽然网速可以达到满但是延迟 200~300 太高，不适合放网站。我装了一个 amh 面板，那个面板打开有时候慢的惊人。</li>
<li>操控性：提供的系统非常全面，而且可以细分到很多，这一点我非常满意，所以我经常测试各种系统</li>
<li>价格：512M 的 $5 一个月已经算是非常便宜了。而且推荐别人注册还能送钱。据说容易封号，不过我的账号用了半年了都没被封。</li>
<li>客服：全英文，不过很友好，回答速度也很快。</li>
<li>跑分同样是没跑，不过……我就挂了一个 vpn 目前。</li>
</ul>
<h2 id="Amazon-AWS"><a href="#Amazon-AWS" class="headerlink" title="Amazon AWS"></a>Amazon AWS</h2><p>因为我在除了 1G 1 核以外其他主机都用的 Windows 系统，所以不说什么了。而且现在没在用，只能凭回忆。不过吐槽一下 4 核 8G 内存的主机挖矿效率很低啊！</p>
<ul>
<li>网速：下载速度可以到满速，但是 Oregon 和 San Francisco 到国内延迟就很高，有时候还丢包。东京的很满意，Ping 值有时候 100 左右，而且网速也比较稳定。</li>
<li>操控性：非常好。可以搜到其他用户共享出来的镜像，所以基本上你想得到的都有。镜像市场更是非常全面。</li>
<li>客服：一般提交 Ticket 以后就会有客服来打电话，说的英语很标准，而且也很热心。</li>
<li>赠品：非常多，rds 20G，S3 储存 5G，SSD 磁盘 30G 其他的我都没用过。</li>
</ul>
<p>现在注册以后是不能直接用东京节点的服务器的，只能发邮件申请，而且时间相当漫长，好像要一星期。</p>
<h2 id="免费空间"><a href="#免费空间" class="headerlink" title="免费空间"></a>免费空间</h2><p>vps.me 和 HapHost 我用的都是免费的，性能很垃圾。</p>
<p>现在 haphost 已经没了，都并入 host1plus 了。</p>
<p>vps.me 上没有开放ipv4，需要做端口映射，只给了ipv6。</p>
<p>Conoha.jp 也没怎么用，申请了体验两个月，现在应该还没过期。国内速度可以。操作系统给的很全。因为用的是 kvm，所以可以直接重装系统啊什么的，理论上还能挂一个 Windows 镜像玩玩。只支持信用卡付款。客服没接触过，官网日语难懂，翻译了也难懂。还好系统都是英语的。</p>
<p>对了，我有两个免费空间十分推荐，提供PHP和Mysql，据我观察他们上面有不少早至2009年就存在的免费网站，简单来说就是他们已经被证实至少6年不删不活跃用户：一个是freehostia.com（注册登陆需要翻墙，但是申请到的空间不需翻墙）一个是summerhost.info（完全开放给国人），summerhost.info 和 byethost.com很类似，都很稳定，不删用户。</p>
<h1 id="应用引擎"><a href="#应用引擎" class="headerlink" title="应用引擎"></a>应用引擎</h1><p>（此处忘记了 SAE、BAE、GAE、Heroku）</p>
<p>因为 openshift 支持 ssh 连接，所以基本上算半个 vps 了。</p>
<p>openshift 用的就是亚马逊的服务器，但是网址被墙了。幸运的是ip没被墙，所以直接ping出来ip然后用一个cdn就能做网站，直接用ip连ssh就能翻墙。提供1.5GRAM和3G的硬盘空间，无限流量，一个用户可以创建3个免费的应用。</p>
<p>和openshift相似但是没有被屏蔽的有phpcloud appfog 还有一个大家都知道的 SourceForge。</p>
<ul>
<li>uhurucloud 支持 .Net。</li>
<li>Snapphq  asp php mysql</li>
<li>Jelastic Java php mysql</li>
<li>CloudBees java php mysql</li>
<li>Cumulogic java php mysql</li>
<li>MoPaaS Java Ruby php mysql</li>
<li>Another Service  Another Service是一个法国的云计算平台</li>
<li>phpfog和Orchestra和cloudcontrol和dotcloud和pagodabox php+mysql</li>
<li>Appharbor和Webweb asp asp.net</li>
</ul>
<p>需要注意的是，这些免费版（除了 GAE）一般不允许 24 小时连续开机，需要手动启动，除非付钱。</p>
<p>对了，国内的引擎还有</p>
<ul>
<li>阿里的 ACE（目前内侧免费）</li>
<li>京东的 jae</li>
<li>腾讯的 cee</li>
<li>盛大的 CAE</li>
</ul>
<h1 id="在线开发平台"><a href="#在线开发平台" class="headerlink" title="在线开发平台"></a>在线开发平台</h1><p>然后就是在线开发平台，比如 cloud9.io、coding.net、nitrous.io、heroku、uhurucloud。值得一提的是这些基本上都支持node.js。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做出一个网站，到哪里去找一个合适的服务器呢？&lt;/p&gt;
    
    </summary>
    
      <category term="经验总结" scheme="https://vjudge1.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="云" scheme="https://vjudge1.github.io/tags/%E4%BA%91/"/>
    
      <category term="VPS" scheme="https://vjudge1.github.io/tags/VPS/"/>
    
  </entry>
  
</feed>
