---
title:  "编写图形界面程序"
categories: 经验总结
tags:
- GUI
---
买了个 Windows 10 平板电脑，发现不能刷 Linux（因为各种没驱动），然后就遇到了一个问题——如果想随手写一个实用的 GUI 程序，用哪个比较好呢？

为了方便叙述，先把条件摆上：

1. 没有被现在的操作系统抛弃。
2. 不要太占地方，因为平板一共才 60G。
3. 能够快速开发——最起码得有个界面设计器。
4. 最好能跨平台，因为我个人 Windows/Linux/Mac 经常换着用。

条件 1 是针对 VB6 和易语言说的。这两个非常适合随手写随手用（快速应用开发，RAD），可惜它们都过时了。

条件 2 是针对 Visual Studio 的。VS 非常好用，可惜占空间太大了。即使是 Community 或者 Express 也不能选择只安装单一语言，只能看着不需要的东西在那儿白白占地方。

虽然很多事情通过一个脚本就能搞定，虽然现在是 Web 的时代，不过有些时候还是有个窗口对话框比较好用，因此我对常见的框架进行了一系列考察。

# Qt

Qt 是个跨平台的 C++ 框架。

Qt Creator 集成了代码编辑器、界面设计器等功能，新建一个项目之后就可以拿界面设计器画窗口，而且控件（VB 的叫法）自动实例化，所以不用像 MFC 那样需要手动添加变量，再加上布局管理、信号和槽等机制，非常方便，可以做到随手画随手写然后就随手拿去用。

不过 Qt 也非常占地方，大约需要 3GB——因为 Windows 没有 C++ 编译器，只能用 Qt 自带的 MinGW，或者把 Visual Studio 装上然后用它的编译器……

# Swing

Java 是跨平台的——是地球人就知道。所以说，用 Java 写的 GUI 程序也是。

虽然 Java 的 IDE 非常多，但是并不是所有 IDE 都有界面设计器，所以感觉真的很蛋疼。而且写 Java 代码同样蛋疼。

# Gtk#

即使抛弃 VS，C# 也是不错的选择。只不过，肯定不是 Windows Forms 框架了（Windows Forms 没开源）。

很多人都在找 Xamarin Studio 破解版，不过要是开发桌面应用的话，根本不用花钱（其实他们都写 Android 应用，那个可是价格不菲）。至于图形界面，就只好用跨平台的 Gtk# 了。

Xamarin Studio 的代码编辑和图形界面比 VS 逊色很多，不过它的只有几百兆的体积可比 VS 好多了。因为 Gtk# 也是 .Net 平台（其实是 Mono），所以 .Net 本身的东西（例如`System`）都是一样的，不过在 Gtk 那边我得摸着石头过河了，毕竟 Gtk# 不是那么主流。

备注：

1. 虽然新建工程里面写着 VB 其实它根本不支持 VB。
2. IDE 本身有一些 bug，例如不能调语言……中英文混合的界面实在蛋疼。
3. 如果不需要界面设计器，可以拿着 Xamarin Studio 写 ASP.NET 应用。等开源的那个 ASP.NET 出正式版我就打算试试。

# PyQt/PySide

PyQt = Python + Qt，既然 Python 和 Qt 都是跨平台的，那么 PyQt 当然也是跨平台的。

PyQt 官网提供了附带 Qt 框架的 PyQt。不过反正都是闲着，而且已经装了 Qt，我就自己编译了——在 Windows 中编译，要事先把 PATH 环境变量设置好，然后做好找不到头文件的精神准备。只要准备充分，不比 Linux 中麻烦多少。

PyQt 除了把编程语言换成了 Python 以外，其他东西都是一样的。

不过，Qt 有一个集成的开发环境，PyQt 可没有——PyQt 提供了一个 Qt Designer，但是每次修改都需要自己运行代码生成器 PyUIC，这样就比较麻烦。比方说，如果建立了一个叫做 hello 的窗口（其中有一个按钮），运行了一遍 PyUIC，那么 helloworld 程序就需要这样写——

```python
import sys
from PyQt5 import QtWidgets
from PyQt5 import QtCore
import hello

class HelloWindow(QtWidgets.QWidget, hello.Ui_Hello):
    def __init__(self):
        super(HelloWindow, self).__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.say_hello)

    def say_hello(self):
        QtWidgets.QMessageBox.information(self, "Hello", "Hello, world!")


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    f = HelloWindow()
    f.show()
    sys.exit(app.exec_())
```

有人说 PyQt 和 Python 没多大关系，全都是 Qt。不过既然放着 C++ 不用，那肯定是冲着 Python 来的嘛——什么时候想给 Python 程序加个高大上的界面的时候就可以考虑一下了（其实还是想借 Python 的光）。

# Lazarus

若干年前，Delphi 是一个很火的编程软件，不知为何，后来逐渐淡出了人们的视线（不过 Delphi 一直在开发，从来未弃坑）。

Delphi 是要钱的。在这个讲究开源的时代，谁乐意为了一个写 helloworld 级别的程序而掏钱啊。所以 Xojo 也是没必要在乎的。

但是 Lazarus 就不一样了。它是社区搞的，自由软件，跨平台，而且一直在“山寨” Delphi。所以，直接找本 Delphi 的教材就可以进行学习了。

Lazarus 和 Delphi 新建工程之后都是直接出现一个窗口，然后就可以直接用鼠标画控件，就像 VB 和易语言那样，非常迅速、方便。只不过 Pascal 的语法和其他语言很不一样（比如赋值符号`:=`），所以可能除了那些打过信息学竞赛（不是 ACM）的人听过，其他人都没听过。

# Web 技术

Web 这么火，肯定有人想把 Web 那一套搬到桌面应用上。这样的例子很多，比如 Atom 和有抄袭嫌疑的 Visual Studio Code。

这一类框架使用 Node.js、Chromium、HTML5/CSS3/JavaScript——因为 Node.js 跨平台，浏览器跨平台（而且还是钦点的），那么这种应用当然也跨平台了。

因为我考察这些框架是为了随手写一个能用的程序（想想做网页的过程有多么痛苦），而且带着个大浏览器，编程和调试都很麻烦，所以当然不会拿这种框架来开发本地应用了。

再次强调，不是因为这种技术不好，而是不够轻巧。

# 结论

最后的结果是：留下 Qt、PyQt、Xamarin Studio 和 Lazarus。

Lazarus 启动就能动手编，很随意。在 Windows 中还有 Windows API 用。

拿 Qt 可以写点像样的东西。（备注：没说拿 Lazarus 不行）

PyQt……有人说那是 Qt，其实是用来抱 Python 大腿的。

Xamarin Studio 就留给将来学习 ASP.NET 用了。（如果 Visual Studio Code 不差的话可能还要换着用）

# 后续

出于现实的需要，我用 Java 了……
