---
layout: post
title: "自己动手写東方Project作弊器（二）"
author: vjudge1
categories: 游戏
tags: 東方Project 反汇编
---
* contents
{:toc}

東方的射击类游戏还没修改完。接着折腾。（没有耐心的话可以直接看结尾附带的链接。）





# 东方红魔乡

红魔乡似乎加壳了。虽然对作弊器研究没有影响，但是上一篇文章提到的“参考资料”的作者研究了脱壳的问题，所以我直接贴个地址：[东方红魔乡脱壳](http://tieba.baidu.com/p/3730028296)

# 东方妖妖梦 & 东方永夜抄
![吃货](https://static.mengniang.org/common/2/29/Th135Youmu%26Yuyuko.gif)

（版本：妖妖梦1.00b，永夜抄1.00d）

妖妖梦和永夜抄的作弊与其他正作略有区别。不同之处在于：

1. 残机、BOMB、Power等数据以浮点数形式储存（不知为何ZUN神主突然想拿float当int使）。
2. 地址是动态的，即使是续关，地址都会发生变化。
3. 直接改数值的话游戏会崩掉。

了解这些情况之后，应当先练习一下妖妖梦和永夜抄，至少要撑到第三四关（囧），否则很可能搜不到数据。练得差不多之后继续开修改器搜索。但是，找到数据之后，不要停止游戏，而是应当立马开启追踪。然后，剩下的事情就和其他作品差不多了。

以永夜抄为例：

通过搜索，找到了存放生命值的地址是2D0EB84。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th8_1.png)

追踪对这个地址的读写（注意float是4字节），找到两个地址43C66D和43C676。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th8_2.png)

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th8_3.png)

<del>对于那个FILD指令，加残机的时候进去的数字是1，掉残机时进去的数字是-1。</del>何必管它呢？直接把43C676处的指令（FSTP那个）填成3个90（NOP），这样改就不掉残机数了（不过也不增加了）。

稍微深入地跟踪一下，发现Miss时是由44D100处调用改残机数的指令，前面（44D0F9处）有个`push -1`——经过试验，将44D0FA改成00也能不掉残机数。

大胆地往前找call，反复加断点，并结合[上篇文章]({{site.baseurl}}/2016/08/12/touhou-cheater.html)的经验（判定时会读写自机的状态），可以发现：

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th8_4.png)

在Miss过程中，44C48A（`call 0044CBF0`）会被不断地调用。44C482处的`cmp edx, 2`是判断自机状态（由前文经验得知），也就是说，状态2表示“正在挂掉”。继续追踪，发现这个状态被写在了17D5EF8里面，而且这个地址是固定的。不过这次不要再野蛮地改成RET了，否则游戏会崩——改成NOP就行了。

备注：在永夜抄中，自机Miss的一瞬间会有一个短暂的暂停——等待玩家发动决死。有人给出了跳过这段等待时间的方法，照着改就行：[永夜抄自机、bomb、power内存地址](http://tieba.baidu.com/p/1271755034)。

# 东方花映塚
（版本：1.50a）

花映塚的作弊和格斗类游戏的作弊有一点相似——双方掉血都是由同一指令操作的。详细思路见[下一篇文章]({{site.baseurl}}/2016/08/20/touhou-cheater-3.html)。

花映塚的人数是浮点数。经过搜索，它位于Bxxxxx（动态地址），追踪后发现417AAF（`fld dword ptr [ecx]`），接下来一句是`fsub dword ptr [0x48e2a4]`。冲到48E2A4那里一看，里面果然存着一个浮点数1，但这个数字不能改，否则游戏会崩。回到417AB1（fsub dword ptr [48E2A4]），我们干脆把它NOP掉（改成6个90），于是再也不会没人了。

再谈对战的问题。通过搜血量（满血是10），找到血的地址（把它记住，然后别死掉，后面还要用），跟踪到41E5FE，血是在这里扣的，地址存在了`[ESI+0A8]`里——指针。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th9_1.png)

下断点，使用内存搜索搜ESI的值（可以换GameMaster搜），自己血量的地址存在4A7D94里，对手血量的地址存在4A7DCC里。

往前追几行（注意跳转的来源），我们简单粗暴一点，把41E46A改成`mov esi, dword ptr [4A7DCC]`（`8B 35 CC 7D 4A 00`），接下来的两条指令全部NOP掉（改为9个90）——撞弹直接赢。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th9_2.png)

直接让对方挂掉确实有点太损了，还是只让自己无敌比较好。那么回到41E5FE，往前翻，子程序从41E420开始。它是由41E8EC调用的，说明在这里已经准备好扣血了。

接下来要搞清楚一个问题：人物状态存在了哪里？

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th9_3.png)

在上图中下了多个断点，发现41E8B0这段子程序也会按1P和2P轮流调用。在41E8B7处，EAX的值就是自机和敌机状态（1正常、4正在挂掉、2已经挂掉），因此改变自机状态的子程序很可能就在435EC0里面。

想得挺美——其实435EC0里面只有一个`mov eax, dword ptr [ecx]`。说明这句话实际上是想把[ecx]里面存的状态送给eax。

我们试一下，如果把41E8B2改为`mov eax, 1`（B801000000），双方是否都会无敌呢？

果然敌我双方都无敌了。

这样的话，我们就可以写一个子程序，<del>如果ecx是[4A7DC8]，那么就不要让eax等于4，如果ecx是[4A7DCC]，那么就照常执行`mov eax, dword ptr [ecx]`</del>（实践证明这不好使，暂时还没想明白为什么）。附近没有地方写子程序，“答案”给出了一个方案，那就是到程序末尾随便找个空间。下面直接贴出“答案”：

```nasm
;地址   汇编指令                      机器码
48DB20: cmp dword ptr [4A7EA4], 4    ;83 3D A4 7E 4A 00 04
48DB27: je short 0048DB2E            ;74 05
48DB29: cmp ebx, 0B                  ;83 FB 0B
48DB2C: je short 0048DB30            ;74 02
48DB2E: mov eax, dword ptr [ecx]     ;8B 01
48DB30: retn                         ;C3
```

最后别忘了把41E8B2改成`call 0048DB20`（E8 69 F2 06 00）。

# 妖精大战争
<del>我的[琪露诺](https://zh.moegirl.org/%E7%90%AA%E9%9C%B2%E8%AF%BA)那么强，用得着作弊吗？</del>

（版本：1.00a）

妖精大战争的作弊比较容易，不过干劲的设定与残机数量略有区别。最初的干劲是200%，实际上在内存中的数值是20000（十进制）。

很容易就能搜到具体地址4B4D64，固定的。追踪发现，干劲上升和下降都是同一指令在起作用（下图42729C）。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th128_1.png)

如果不想上升也不想下降，直接写入6个90（NOP）就可以了。如果想上升不想下降，我们注意ECX的值，还有427277处的指令，可以发现干劲的变化值被存到堆栈里面了。继续追踪调用这段代码的CALL，找到了43CDDF（下图）。

![]({{ site.baseurl }}/img/2016-08-18-touhou-2/th128_2.png)

看到43CDD8处的`push -2710`了吗？Miss一下就掉100%干劲，乘100再转成十六进制，正好2710。所以改成`push 0`就完事儿了。需要注意的是，在EX关，魔理沙的大招（激光）也会让小[⑨](https://zh.moegirl.org/%E7%90%AA%E9%9C%B2%E8%AF%BA#.E2.80.9C.E2.91.A8.E2.80.9D.E5.8F.8A.E2.80.9C.E7.AC.A8.E8.9B.8B.E2.80.9D.E4.B9.8B.E5.90.8D.E7.9A.84.E7.94.B1.E6.9D.A5)掉干劲。想作的彻底一点的话就自己研究吧。

妖精大战争的无敌方法和[前文]({{site.baseurl}}/2016/08/12/touhou-cheater.html)完全一样，本文不再重复叙述了。直接给出“答案”：把43D0C0处改为C2 04 00（`retn 4`）。

# 弹幕天邪鬼
（版本：1.00a）

弹幕天邪鬼的作弊稍微麻烦一点，因为Miss之后直接Game Over了，所以不能向其他作品那样靠撞弹定位指令。

道具数量很好改，开搜索之后能搜到两个地址，这两个都是动态地址，均是道具数量，代码跟踪之后可以找到457860（`DEC DWORD PTR [EDI+18]`），NOP掉就行（改成90 90 90）。

接下来是无敌。

## 第一次研究（失败）
这次从擦弹入手。

弹幕天邪鬼的分数由多部分组成，例如射击分数、擦弹分数，这些分数在内存中是分开放置的，直到显示的时候才会求和。因此在搜索擦弹数量的时候要专心擦弹，不要射击或者用道具。每10分是1个子弹。

擦弹分数也保存在两个不同的地址中，一个是动态的，另一个是4E46F8。追踪对4E46F8的写入，可定位到41970B（`MOV DWORD PTR [4E46F8], ECX`）。找到对这部分指令的CALL，便来到435801。

一直往前翻，直到这部分代码的开头，可以一直翻到4350E0。对这里下断点，发现这部分代码是可能游戏的主循环，或者是主循环的一部分。

后面的事情就很无聊了：下断点（建议对所有CALL和不在范围内的JMP下断点，然后记录调用顺序），打游戏，等死，定位……一帧一帧地玩。

结果发现这段循环根本与判定无关。实际上，它是擦弹并且离开之后才被调用的，中间还隔着Windows API，对我这样的初学者来说根本没法玩。

## 第二次研究（成功）
这次又是碰运气与投机取巧的结合体。

经过多次作弊，我发现东方每部射击作品都用01234这几个数字来表示自机状态（未出场、正常状态、正在死亡和已经死亡）。正常状态和已经死亡的状态是比较持久的，即使满身疮痍，那个死亡的状态仍在内存里面保存着，并且直接续关之后地址不变。因此，我们可以尝试反复搜索两种状态，直到找到地址为止。

现在有一个小问题，就是不知道“正常”和“死亡”分别是几。

考虑到弹幕天邪鬼是辉针城的后作，那么我们可以偷个懒，先尝试用辉针城的状态来搜天邪鬼，也就是说，活着的时候反复搜索1，死了之后反复搜索2。当然，不要一出场或者一死亡就点搜索按钮，因为还有0和4两个状态。

经过观察，状态确实是用1和2表示的，因为死亡一瞬间那个地址的数值一下子变成了4，然后很快就变成了2。得到的地址是0Axxxxxx（每次都变化的），追踪对这个地址的写入，撞弹，发现确实能找到一个对其写入4的指令，其地址为44F26C（`mov dword ptr [edi+684], 4`）。

所以剩下的事情和辉针城一模一样了——往前翻，直到这个子程序的开头44F140，把它改成C3（RET），这样写入死亡状态的子程序就全被屏蔽了。

# 东方文花帖 & DS
（文花帖版本1.02a，DS文花帖版本1.00a）

东方文花帖和DS作什么弊呢？还是不死吧。

因为和天邪鬼一样都是撞弹就满身疮痍，所以还是直接搜状态。

经过试验，文花帖和DS文花帖都用1表示活着，用2表示死亡，并且没有“正在死亡”的状态。那么剩下的事情就和天邪鬼一模一样了。直接给结论：文花帖是把4306D0改成C3，DS文花帖是把436C20改成C3。

# 参考资料

* [東方改造: Nice cheat.](http://cheater.seesaa.net/category/9478192-1.html)
    * [东方绀珠传作弊](http://cheater.seesaa.net/article/169529488.html)
* [永夜抄自机、bomb、power内存地址](http://tieba.baidu.com/p/1271755034)
* [关于妖妖梦作弊.......](http://tieba.baidu.com/p/1270485699)
* [东方红魔乡脱壳](http://tieba.baidu.com/p/3730028296)
